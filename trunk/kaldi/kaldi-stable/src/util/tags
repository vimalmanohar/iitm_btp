!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BaseFloatMatrixWriter	table-types.h	/^typedef TableWriter<KaldiObjectHolder<Matrix<BaseFloat> > >  BaseFloatMatrixWriter;$/;"	t	namespace:kaldi
BaseFloatPairVectorWriter	table-types.h	/^typedef TableWriter<BasicPairVectorHolder<BaseFloat> >  BaseFloatPairVectorWriter;$/;"	t	namespace:kaldi
BaseFloatVectorWriter	table-types.h	/^typedef TableWriter<KaldiObjectHolder<Vector<BaseFloat> > >  BaseFloatVectorWriter;$/;"	t	namespace:kaldi
BaseFloatWriter	table-types.h	/^typedef TableWriter<BasicHolder<BaseFloat> >  BaseFloatWriter;$/;"	t	namespace:kaldi
BasicHolder	kaldi-holder-inl.h	/^  BasicHolder(): t_(static_cast<T>(-1)) { }$/;"	f	class:kaldi::BasicHolder
BasicHolder	kaldi-holder-inl.h	/^template<class BasicType> class BasicHolder {$/;"	c	namespace:kaldi
BasicPairVectorHolder	kaldi-holder-inl.h	/^  BasicPairVectorHolder() { }$/;"	f	class:kaldi::BasicPairVectorHolder
BasicPairVectorHolder	kaldi-holder-inl.h	/^template<class BasicType> class BasicPairVectorHolder {$/;"	c	namespace:kaldi
BasicVectorHolder	kaldi-holder-inl.h	/^  BasicVectorHolder() { }$/;"	f	class:kaldi::BasicVectorHolder
BasicVectorHolder	kaldi-holder-inl.h	/^template<class BasicType> class BasicVectorHolder {$/;"	c	namespace:kaldi
BasicVectorVectorHolder	kaldi-holder-inl.h	/^  BasicVectorVectorHolder() { }$/;"	f	class:kaldi::BasicVectorVectorHolder
BasicVectorVectorHolder	kaldi-holder-inl.h	/^template<class BasicType> class BasicVectorVectorHolder {$/;"	c	namespace:kaldi
BoolWriter	table-types.h	/^typedef TableWriter<BasicHolder<bool> >  BoolWriter;$/;"	t	namespace:kaldi
CheckImpl	kaldi-table-inl.h	/^void RandomAccessTableReader<Holder>::CheckImpl() const {$/;"	f	class:kaldi::RandomAccessTableReader
CheckImpl	kaldi-table-inl.h	/^void SequentialTableReader<Holder>::CheckImpl() const {$/;"	f	class:kaldi::SequentialTableReader
CheckImpl	kaldi-table-inl.h	/^void TableWriter<Holder>::CheckImpl() const {$/;"	f	class:kaldi::TableWriter
ClassifyRspecifier	kaldi-table.cc	/^RspecifierType ClassifyRspecifier(const std::string &rspecifier,$/;"	f	namespace:kaldi
ClassifyRxfilename	kaldi-io.cc	/^InputType ClassifyRxfilename(const std::string &filename) {$/;"	f	namespace:kaldi
ClassifyWspecifier	kaldi-table.cc	/^WspecifierType ClassifyWspecifier(const std::string &wspecifier,$/;"	f	namespace:kaldi
ClassifyWxfilename	kaldi-io.cc	/^OutputType ClassifyWxfilename(const std::string &filename) {$/;"	f	namespace:kaldi
Clear	hash-list-inl.h	/^typename HashList<I, T>::Elem* HashList<I, T>::Clear() {$/;"	f	class:kaldi::HashList
Clear	kaldi-holder-inl.h	/^  void Clear() {  \/\/ free up memory and clear t_.$/;"	f	class:kaldi::GauPostHolder
Clear	kaldi-holder-inl.h	/^  void Clear() {  \/\/ free up memory and clear t_.$/;"	f	class:kaldi::PosteriorHolder
Clear	kaldi-holder-inl.h	/^  void Clear() { feats_.Resize(0, 0); }$/;"	f	class:kaldi::SphinxMatrixHolder
Clear	kaldi-holder-inl.h	/^  void Clear() { t_.clear(); }$/;"	f	class:kaldi::BasicPairVectorHolder
Clear	kaldi-holder-inl.h	/^  void Clear() { t_.clear(); }$/;"	f	class:kaldi::BasicVectorHolder
Clear	kaldi-holder-inl.h	/^  void Clear() { t_.clear(); }$/;"	f	class:kaldi::BasicVectorVectorHolder
Clear	kaldi-holder-inl.h	/^  void Clear() { t_.clear(); }$/;"	f	class:kaldi::TokenHolder
Clear	kaldi-holder-inl.h	/^  void Clear() { t_.clear(); }$/;"	f	class:kaldi::TokenVectorHolder
Clear	kaldi-holder-inl.h	/^  void Clear() { t_.first.Resize(0, 0); }$/;"	f	class:kaldi::HtkMatrixHolder
Clear	kaldi-holder-inl.h	/^  void Clear() { }$/;"	f	class:kaldi::BasicHolder
Clear	kaldi-holder-inl.h	/^  void Clear() {$/;"	f	class:kaldi::KaldiObjectHolder
Clear	kaldi-holder.h	/^  void Clear() { }$/;"	f	class:kaldi::GenericHolder
Close	kaldi-io.cc	/^  virtual bool Close() {$/;"	f	class:kaldi::FileOutputImpl
Close	kaldi-io.cc	/^  virtual bool Close() {$/;"	f	class:kaldi::PipeOutputImpl
Close	kaldi-io.cc	/^  virtual bool Close() {$/;"	f	class:kaldi::StandardOutputImpl
Close	kaldi-io.cc	/^  virtual void Close() {$/;"	f	class:kaldi::FileInputImpl
Close	kaldi-io.cc	/^  virtual void Close() {$/;"	f	class:kaldi::OffsetFileInputImpl
Close	kaldi-io.cc	/^  virtual void Close() {$/;"	f	class:kaldi::PipeInputImpl
Close	kaldi-io.cc	/^  virtual void Close() {$/;"	f	class:kaldi::StandardInputImpl
Close	kaldi-io.cc	/^bool Output::Close() {$/;"	f	class:kaldi::Output
Close	kaldi-io.cc	/^void Input::Close() {$/;"	f	class:kaldi::Input
Close	kaldi-table-inl.h	/^  virtual bool Close() {$/;"	f	class:kaldi::RandomAccessTableReaderDSortedArchiveImpl
Close	kaldi-table-inl.h	/^  virtual bool Close() {$/;"	f	class:kaldi::RandomAccessTableReaderScriptImpl
Close	kaldi-table-inl.h	/^  virtual bool Close() {$/;"	f	class:kaldi::RandomAccessTableReaderSortedArchiveImpl
Close	kaldi-table-inl.h	/^  virtual bool Close() {$/;"	f	class:kaldi::RandomAccessTableReaderUnsortedArchiveImpl
Close	kaldi-table-inl.h	/^  virtual bool Close() {$/;"	f	class:kaldi::SequentialTableReaderArchiveImpl
Close	kaldi-table-inl.h	/^  virtual bool Close() {$/;"	f	class:kaldi::SequentialTableReaderScriptImpl
Close	kaldi-table-inl.h	/^  virtual bool Close() {$/;"	f	class:kaldi::TableWriterArchiveImpl
Close	kaldi-table-inl.h	/^  virtual bool Close() {$/;"	f	class:kaldi::TableWriterBothImpl
Close	kaldi-table-inl.h	/^  virtual bool Close() {$/;"	f	class:kaldi::TableWriterScriptImpl
Close	kaldi-table-inl.h	/^bool RandomAccessTableReader<Holder>::Close() {$/;"	f	class:kaldi::RandomAccessTableReader
Close	kaldi-table-inl.h	/^bool SequentialTableReader<Holder>::Close() {$/;"	f	class:kaldi::SequentialTableReader
Close	kaldi-table-inl.h	/^bool TableWriter<Holder>::Close() {$/;"	f	class:kaldi::TableWriter
CloseInternal	kaldi-table-inl.h	/^  bool CloseInternal() {$/;"	f	class:kaldi::RandomAccessTableReaderArchiveImplBase
CompareFirstMemberOfPair	stl-utils.h	/^struct CompareFirstMemberOfPair {$/;"	s	namespace:kaldi
ConstIntegerSet	const-integer-set.h	/^  ConstIntegerSet(): lowest_member_(1), highest_member_(0) { }$/;"	f	class:kaldi::ConstIntegerSet
ConstIntegerSet	const-integer-set.h	/^  explicit ConstIntegerSet(const ConstIntegerSet<I> &other): slow_set_(other.slow_set_) {$/;"	f	class:kaldi::ConstIntegerSet
ConstIntegerSet	const-integer-set.h	/^  explicit ConstIntegerSet(const std::set<I> &input) {$/;"	f	class:kaldi::ConstIntegerSet
ConstIntegerSet	const-integer-set.h	/^  explicit ConstIntegerSet(const std::vector<I> &input): slow_set_(input) {$/;"	f	class:kaldi::ConstIntegerSet
ConstIntegerSet	const-integer-set.h	/^template<class I> class ConstIntegerSet {$/;"	c	namespace:kaldi
ContainsNullPointers	stl-utils.h	/^bool ContainsNullPointers(const std::vector<A*> &v) {$/;"	f	namespace:kaldi
ConvertStringToInteger	text-utils.h	/^bool ConvertStringToInteger(const std::string &str,$/;"	f	namespace:kaldi
ConvertStringToReal	text-utils.cc	/^bool ConvertStringToReal(const std::string &str,$/;"	f	namespace:kaldi
CopyMapKeysToSet	stl-utils.h	/^void CopyMapKeysToSet(const std::map<A, B> &m, std::set<A> *s) {$/;"	f	namespace:kaldi
CopyMapKeysToVector	stl-utils.h	/^void CopyMapKeysToVector(const std::map<A, B> &m, std::vector<A> *v) {$/;"	f	namespace:kaldi
CopyMapToVector	stl-utils.h	/^void CopyMapToVector(const std::map<A, B> &m,$/;"	f	namespace:kaldi
CopyMapValuesToSet	stl-utils.h	/^void CopyMapValuesToSet(const std::map<A, B> &m, std::set<B> *s) {$/;"	f	namespace:kaldi
CopyMapValuesToVector	stl-utils.h	/^void CopyMapValuesToVector(const std::map<A, B> &m, std::vector<B> *v) {$/;"	f	namespace:kaldi
CopySetToVector	stl-utils.h	/^void CopySetToVector(const std::set<T> &s, std::vector<T> *v) {$/;"	f	namespace:kaldi
CopyVectorToSet	stl-utils.h	/^void CopyVectorToSet(const std::vector<A> &v, std::set<A> *s) {$/;"	f	namespace:kaldi
CopyVectorToVector	stl-utils.h	/^void CopyVectorToVector(const std::vector<A> &vec_in, std::vector<B> *vec_out) {$/;"	f	namespace:kaldi
Delete	hash-list-inl.h	/^inline void HashList<I, T>::Delete(Elem *e) {$/;"	f	class:kaldi::HashList
DeletePointers	stl-utils.h	/^void DeletePointers(std::vector<A*> *v) {$/;"	f	namespace:kaldi
DocInfo	parse-options.h	/^    DocInfo() {}$/;"	f	struct:kaldi::ParseOptions::DocInfo
DocInfo	parse-options.h	/^    DocInfo(const std::string &name, const std::string &usemsg)$/;"	f	struct:kaldi::ParseOptions::DocInfo
DocInfo	parse-options.h	/^    DocInfo(const std::string &name, const std::string &usemsg,$/;"	f	struct:kaldi::ParseOptions::DocInfo
DocInfo	parse-options.h	/^  struct DocInfo {$/;"	s	class:kaldi::ParseOptions
DocMapType	parse-options.h	/^  typedef std::map<std::string, DocInfo> DocMapType;$/;"	t	class:kaldi::ParseOptions
Done	kaldi-table-inl.h	/^  virtual bool Done() const {$/;"	f	class:kaldi::SequentialTableReaderArchiveImpl
Done	kaldi-table-inl.h	/^  virtual bool Done() const {$/;"	f	class:kaldi::SequentialTableReaderScriptImpl
Done	kaldi-table-inl.h	/^bool SequentialTableReader<Holder>::Done() {$/;"	f	class:kaldi::SequentialTableReader
DoubleMatrixWriter	table-types.h	/^typedef TableWriter<KaldiObjectHolder<Matrix<double> > >  DoubleMatrixWriter;$/;"	t	namespace:kaldi
DoubleVectorWriter	table-types.h	/^typedef TableWriter<KaldiObjectHolder<Vector<double> > >  DoubleVectorWriter;$/;"	t	namespace:kaldi
DoubleWriter	table-types.h	/^typedef TableWriter<BasicHolder<double> >  DoubleWriter;$/;"	t	namespace:kaldi
Elapsed	timer.h	/^  double Elapsed() {$/;"	f	class:kaldi::Timer
Elem	hash-list.h	/^  struct Elem {$/;"	s	class:kaldi::HashList
Escape	parse-options.cc	/^std::string ParseOptions::Escape(const std::string &str) {$/;"	f	class:kaldi::ParseOptions
FileInputImpl	kaldi-io.cc	/^class FileInputImpl: public InputImplBase {$/;"	c	namespace:kaldi	file:
FileOutputImpl	kaldi-io.cc	/^class FileOutputImpl: public OutputImplBase {$/;"	c	namespace:kaldi	file:
Find	hash-list-inl.h	/^inline typename HashList<I, T>::Elem* HashList<I, T>::Find(I key) {$/;"	f	class:kaldi::HashList
FindKeyInternal	kaldi-table-inl.h	/^  bool FindKeyInternal(const std::string &key) {$/;"	f	class:kaldi::RandomAccessTableReaderDSortedArchiveImpl
FindKeyInternal	kaldi-table-inl.h	/^  bool FindKeyInternal(const std::string &key, const T **value_ptr = NULL) {$/;"	f	class:kaldi::RandomAccessTableReaderUnsortedArchiveImpl
FindKeyInternal	kaldi-table-inl.h	/^  bool FindKeyInternal(const std::string &key, size_t *index) {$/;"	f	class:kaldi::RandomAccessTableReaderSortedArchiveImpl
Flush	kaldi-table-inl.h	/^  virtual void Flush() { }$/;"	f	class:kaldi::TableWriterScriptImpl
Flush	kaldi-table-inl.h	/^  virtual void Flush() {$/;"	f	class:kaldi::TableWriterArchiveImpl
Flush	kaldi-table-inl.h	/^  virtual void Flush() {$/;"	f	class:kaldi::TableWriterBothImpl
Flush	kaldi-table-inl.h	/^void TableWriter<Holder>::Flush() {$/;"	f	class:kaldi::TableWriter
FreeCurrent	kaldi-table-inl.h	/^  virtual void FreeCurrent() {$/;"	f	class:kaldi::SequentialTableReaderArchiveImpl
FreeCurrent	kaldi-table-inl.h	/^  void FreeCurrent() {$/;"	f	class:kaldi::SequentialTableReaderScriptImpl
FreeCurrent	kaldi-table-inl.h	/^void SequentialTableReader<Holder>::FreeCurrent() {$/;"	f	class:kaldi::SequentialTableReader
GauPost	kaldi-holder.h	/^typedef std::vector<std::vector<std::pair<int32, Vector<BaseFloat> > > > GauPost;$/;"	t	namespace:kaldi
GauPostHolder	kaldi-holder-inl.h	/^  GauPostHolder() { }$/;"	f	class:kaldi::GauPostHolder
GauPostHolder	kaldi-holder-inl.h	/^class GauPostHolder {$/;"	c	namespace:kaldi
GauPostWriter	table-types.h	/^typedef TableWriter<GauPostHolder> GauPostWriter;$/;"	t	namespace:kaldi
GenericHolder	kaldi-holder.h	/^  GenericHolder() { }$/;"	f	class:kaldi::GenericHolder
GenericHolder	kaldi-holder.h	/^template<class SomeType> class GenericHolder {$/;"	c	namespace:kaldi
GetArg	parse-options.cc	/^std::string ParseOptions::GetArg(int i) {$/;"	f	class:kaldi::ParseOptions
GetList	hash-list-inl.h	/^typename HashList<I, T>::Elem* HashList<I, T>::GetList() {$/;"	f	class:kaldi::HashList
GetOptArg	parse-options.h	/^  std::string GetOptArg(int param) {$/;"	f	class:kaldi::ParseOptions
GetRandChar	text-utils-test.cc	/^char GetRandChar() {$/;"	f	namespace:kaldi
GetRandDelim	text-utils-test.cc	/^char GetRandDelim() {$/;"	f	namespace:kaldi
HandlePendingDelete	kaldi-table-inl.h	/^  void HandlePendingDelete() {$/;"	f	class:kaldi::RandomAccessTableReaderSortedArchiveImpl
HandlePendingDelete	kaldi-table-inl.h	/^  void HandlePendingDelete() {$/;"	f	class:kaldi::RandomAccessTableReaderUnsortedArchiveImpl
HasKey	kaldi-table-inl.h	/^  virtual bool HasKey(const std::string &key) {$/;"	f	class:kaldi::RandomAccessTableReaderDSortedArchiveImpl
HasKey	kaldi-table-inl.h	/^  virtual bool HasKey(const std::string &key) {$/;"	f	class:kaldi::RandomAccessTableReaderScriptImpl
HasKey	kaldi-table-inl.h	/^  virtual bool HasKey(const std::string &key) {$/;"	f	class:kaldi::RandomAccessTableReaderSortedArchiveImpl
HasKey	kaldi-table-inl.h	/^  virtual bool HasKey(const std::string &key) {$/;"	f	class:kaldi::RandomAccessTableReaderUnsortedArchiveImpl
HasKey	kaldi-table-inl.h	/^bool RandomAccessTableReader<Holder>::HasKey(const std::string &key) {$/;"	f	class:kaldi::RandomAccessTableReader
HasKeyInternal	kaldi-table-inl.h	/^  virtual bool HasKeyInternal(const std::string &key, bool preload) {$/;"	f	class:kaldi::RandomAccessTableReaderScriptImpl
HashBucket	hash-list.h	/^    inline HashBucket(size_t i, Elem *e): prev_bucket(i), last_elem(e) {}$/;"	f	struct:kaldi::HashList::HashBucket
HashBucket	hash-list.h	/^  struct HashBucket {$/;"	s	class:kaldi::HashList
HashList	hash-list-inl.h	/^template<class I, class T> HashList<I, T>::HashList() {$/;"	f	class:kaldi::HashList
HashList	hash-list.h	/^template<class I, class T> class HashList {$/;"	c	namespace:kaldi
HtkMatrixHolder	kaldi-holder-inl.h	/^  HtkMatrixHolder() {}$/;"	f	class:kaldi::HtkMatrixHolder
HtkMatrixHolder	kaldi-holder-inl.h	/^class HtkMatrixHolder {$/;"	c	namespace:kaldi
Init	const-integer-set.h	/^  void Init(const std::set<I> &input) {$/;"	f	class:kaldi::ConstIntegerSet
Init	const-integer-set.h	/^  void Init(const std::vector<I> &input) {$/;"	f	class:kaldi::ConstIntegerSet
InitInternal	const-integer-set-inl.h	/^void ConstIntegerSet<I>::InitInternal() {$/;"	f	class:kaldi::ConstIntegerSet
Input	kaldi-io.cc	/^Input::Input(const std::string &rxfilename, bool *binary): impl_(NULL) {$/;"	f	class:kaldi::Input
Input	kaldi-io.h	/^  Input(): impl_(NULL) {}$/;"	f	class:kaldi::Input
Input	kaldi-io.h	/^class Input {$/;"	c	namespace:kaldi
InputImplBase	kaldi-io.cc	/^class InputImplBase {$/;"	c	namespace:kaldi	file:
InputType	kaldi-io.h	/^enum InputType {$/;"	g	namespace:kaldi
Insert	hash-list-inl.h	/^void HashList<I, T>::Insert(I key, T val) {$/;"	f	class:kaldi::HashList
InsertMore	hash-list-inl.h	/^void HashList<I, T>::InsertMore(I key, T val) {$/;"	f	class:kaldi::HashList
Int32PairVectorWriter	table-types.h	/^typedef TableWriter<BasicPairVectorHolder<int32> >  Int32PairVectorWriter;$/;"	t	namespace:kaldi
Int32VectorVectorWriter	table-types.h	/^typedef TableWriter<BasicVectorVectorHolder<int32> >  Int32VectorVectorWriter;$/;"	t	namespace:kaldi
Int32VectorWriter	table-types.h	/^typedef TableWriter<BasicVectorHolder<int32> >  Int32VectorWriter;$/;"	t	namespace:kaldi
Int32Writer	table-types.h	/^typedef TableWriter<BasicHolder<int32> >  Int32Writer;$/;"	t	namespace:kaldi
IsLine	text-utils.cc	/^bool IsLine(const std::string &line) {$/;"	f	namespace:kaldi
IsOpen	kaldi-io-inl.h	/^bool Input::IsOpen() {$/;"	f	class:kaldi::Input
IsOpen	kaldi-io-inl.h	/^bool Output::IsOpen() {$/;"	f	class:kaldi::Output
IsOpen	kaldi-table-inl.h	/^  virtual bool IsOpen() const {  return (state_ == kReadScript);  }$/;"	f	class:kaldi::TableWriterScriptImpl
IsOpen	kaldi-table-inl.h	/^  virtual bool IsOpen() const {$/;"	f	class:kaldi::RandomAccessTableReaderArchiveImplBase
IsOpen	kaldi-table-inl.h	/^  virtual bool IsOpen() const {$/;"	f	class:kaldi::RandomAccessTableReaderScriptImpl
IsOpen	kaldi-table-inl.h	/^  virtual bool IsOpen() const {$/;"	f	class:kaldi::SequentialTableReaderArchiveImpl
IsOpen	kaldi-table-inl.h	/^  virtual bool IsOpen() const {$/;"	f	class:kaldi::SequentialTableReaderScriptImpl
IsOpen	kaldi-table-inl.h	/^  virtual bool IsOpen() const {$/;"	f	class:kaldi::TableWriterArchiveImpl
IsOpen	kaldi-table-inl.h	/^  virtual bool IsOpen() const {$/;"	f	class:kaldi::TableWriterBothImpl
IsOpen	kaldi-table-inl.h	/^bool SequentialTableReader<Holder>::IsOpen() const {$/;"	f	class:kaldi::SequentialTableReader
IsOpen	kaldi-table-inl.h	/^bool TableWriter<Holder>::IsOpen() const {$/;"	f	class:kaldi::TableWriter
IsOpen	kaldi-table.h	/^  bool IsOpen() const { return (impl_ != NULL); }$/;"	f	class:kaldi::RandomAccessTableReader
IsReadInBinary	kaldi-holder-inl.h	/^  static bool IsReadInBinary() { return false; }$/;"	f	class:kaldi::TokenHolder
IsReadInBinary	kaldi-holder-inl.h	/^  static bool IsReadInBinary() { return false; }$/;"	f	class:kaldi::TokenVectorHolder
IsReadInBinary	kaldi-holder-inl.h	/^  static bool IsReadInBinary() { return true; }$/;"	f	class:kaldi::BasicHolder
IsReadInBinary	kaldi-holder-inl.h	/^  static bool IsReadInBinary() { return true; }$/;"	f	class:kaldi::BasicPairVectorHolder
IsReadInBinary	kaldi-holder-inl.h	/^  static bool IsReadInBinary() { return true; }$/;"	f	class:kaldi::BasicVectorHolder
IsReadInBinary	kaldi-holder-inl.h	/^  static bool IsReadInBinary() { return true; }$/;"	f	class:kaldi::BasicVectorVectorHolder
IsReadInBinary	kaldi-holder-inl.h	/^  static bool IsReadInBinary() { return true; }$/;"	f	class:kaldi::GauPostHolder
IsReadInBinary	kaldi-holder-inl.h	/^  static bool IsReadInBinary() { return true; }$/;"	f	class:kaldi::HtkMatrixHolder
IsReadInBinary	kaldi-holder-inl.h	/^  static bool IsReadInBinary() { return true; }$/;"	f	class:kaldi::KaldiObjectHolder
IsReadInBinary	kaldi-holder-inl.h	/^  static bool IsReadInBinary() { return true; }$/;"	f	class:kaldi::PosteriorHolder
IsReadInBinary	kaldi-holder-inl.h	/^  static bool IsReadInBinary() { return true; }$/;"	f	class:kaldi::SphinxMatrixHolder
IsReadInBinary	kaldi-holder.h	/^  static bool IsReadInBinary() { return true; }$/;"	f	class:kaldi::GenericHolder
IsSorted	stl-utils.h	/^inline bool IsSorted(const std::vector<T> &vec) {$/;"	f	namespace:kaldi
IsSortedAndUniq	stl-utils.h	/^inline bool IsSortedAndUniq(const std::vector<T> &vec) {$/;"	f	namespace:kaldi
IsToken	text-utils.cc	/^bool IsToken(const std::string &token) {$/;"	f	namespace:kaldi
KALDI_UTIL_COMMON_UTILS_H_	common-utils.h	18;"	d
KALDI_UTIL_CONST_INTEGER_SET_H_	const-integer-set.h	20;"	d
KALDI_UTIL_CONST_INTEGER_SET_INL_H_	const-integer-set-inl.h	20;"	d
KALDI_UTIL_EDIT_DISTANCE_H_	edit-distance.h	20;"	d
KALDI_UTIL_HASH_LIST_H_	hash-list.h	20;"	d
KALDI_UTIL_HASH_LIST_INL_H_	hash-list-inl.h	20;"	d
KALDI_UTIL_KALDI_HOLDER_H_	kaldi-holder.h	20;"	d
KALDI_UTIL_KALDI_HOLDER_INL_H_	kaldi-holder-inl.h	20;"	d
KALDI_UTIL_KALDI_IO_H_	kaldi-io.h	18;"	d
KALDI_UTIL_KALDI_IO_INL_H_	kaldi-io-inl.h	18;"	d
KALDI_UTIL_KALDI_PIPEBUF_H_	kaldi-pipebuf.h	24;"	d
KALDI_UTIL_KALDI_TABLE_H_	kaldi-table.h	19;"	d
KALDI_UTIL_KALDI_TABLE_INL_H_	kaldi-table-inl.h	20;"	d
KALDI_UTIL_PARSE_OPTIONS_H_	parse-options.h	21;"	d
KALDI_UTIL_SIMPLE_IO_FUNCS_H_	simple-io-funcs.h	18;"	d
KALDI_UTIL_STL_UTILS_H_	stl-utils.h	19;"	d
KALDI_UTIL_TABLE_TYPES_H_	table-types.h	20;"	d
KALDI_UTIL_TEXT_UTILS_H_	text-utils.h	19;"	d
KALDI_UTIL_TIMER_H_	timer.h	18;"	d
KaldiObjectHolder	kaldi-holder-inl.h	/^  KaldiObjectHolder(): t_(NULL) { }$/;"	f	class:kaldi::KaldiObjectHolder
KaldiObjectHolder	kaldi-holder-inl.h	/^template<class KaldiType> class KaldiObjectHolder {$/;"	c	namespace:kaldi
Key	kaldi-table-inl.h	/^  virtual std::string Key() {$/;"	f	class:kaldi::SequentialTableReaderArchiveImpl
Key	kaldi-table-inl.h	/^  virtual std::string Key() {$/;"	f	class:kaldi::SequentialTableReaderScriptImpl
Key	kaldi-table-inl.h	/^std::string SequentialTableReader<Holder>::Key() {$/;"	f	class:kaldi::SequentialTableReader
KeyList	kaldi-table.h	/^typedef std::vector<std::string> KeyList;$/;"	t	namespace:kaldi
LevenshteinAlignment	edit-distance-inl.h	/^int32 LevenshteinAlignment(const std::vector<T> &a,$/;"	f	namespace:kaldi
LevenshteinEditDistance	edit-distance-inl.h	/^int32 LevenshteinEditDistance(const std::vector<T> &a,$/;"	f	namespace:kaldi
LevenshteinEditDistance	edit-distance-inl.h	/^int32 LevenshteinEditDistance(const std::vector<T> &ref,$/;"	f	namespace:kaldi
LoadCurrent	kaldi-table-inl.h	/^  bool LoadCurrent() {$/;"	f	class:kaldi::SequentialTableReaderScriptImpl
LookupFilename	kaldi-table-inl.h	/^  bool LookupFilename(const std::string &key, std::string *wxfilename) {$/;"	f	class:kaldi::TableWriterScriptImpl
LookupKey	kaldi-table-inl.h	/^  bool LookupKey(const std::string &key, size_t *script_offset) {$/;"	f	class:kaldi::RandomAccessTableReaderScriptImpl
MakeFilename	kaldi-table-inl.h	/^  void MakeFilename(typename std::ostream::pos_type streampos, std::string *output) const {$/;"	f	class:kaldi::TableWriterBothImpl
MakeTombstone	kaldi-table-inl.h	/^  void MakeTombstone(const std::string &key) {$/;"	f	class:kaldi::RandomAccessTableReaderScriptImpl
MapType	kaldi-table-inl.h	/^  typedef unordered_map<std::string, Holder*, StringHasher>  MapType;$/;"	t	class:kaldi::RandomAccessTableReaderUnsortedArchiveImpl
MergePairVectorSumming	stl-utils.h	/^inline void MergePairVectorSumming(std::vector<std::pair<I, F> > *vec) {$/;"	f	namespace:kaldi
MustBeQuoted	parse-options.cc	/^static bool MustBeQuoted(const std::string &str, ShellType st) {$/;"	f	namespace:kaldi
MyType	kaldi-io.cc	/^  virtual InputType MyType() { return kFileInput; }$/;"	f	class:kaldi::FileInputImpl
MyType	kaldi-io.cc	/^  virtual InputType MyType() { return kOffsetFileInput; }$/;"	f	class:kaldi::OffsetFileInputImpl
MyType	kaldi-io.cc	/^  virtual InputType MyType() { return kPipeInput; }$/;"	f	class:kaldi::PipeInputImpl
MyType	kaldi-io.cc	/^  virtual InputType MyType() { return kStandardInput; }$/;"	f	class:kaldi::StandardInputImpl
New	hash-list-inl.h	/^inline typename HashList<I, T>::Elem* HashList<I, T>::New() {$/;"	f	class:kaldi::HashList
Next	kaldi-table-inl.h	/^  virtual void Next() {$/;"	f	class:kaldi::SequentialTableReaderArchiveImpl
Next	kaldi-table-inl.h	/^  void Next() {$/;"	f	class:kaldi::SequentialTableReaderScriptImpl
Next	kaldi-table-inl.h	/^void SequentialTableReader<Holder>::Next() {$/;"	f	class:kaldi::SequentialTableReader
NextScpLine	kaldi-table-inl.h	/^  void NextScpLine() {$/;"	f	class:kaldi::SequentialTableReaderScriptImpl
NormalizeArgName	parse-options.cc	/^void ParseOptions::NormalizeArgName(std::string *str) {$/;"	f	class:kaldi::ParseOptions
NumArgs	parse-options.cc	/^int ParseOptions::NumArgs() {$/;"	f	class:kaldi::ParseOptions
OffsetFileInputImpl	kaldi-io.cc	/^class OffsetFileInputImpl: public InputImplBase {$/;"	c	namespace:kaldi	file:
Open	kaldi-io-inl.h	/^bool Input::Open(const std::string &rxfilename, bool *binary) {$/;"	f	class:kaldi::Input
Open	kaldi-io.cc	/^  virtual bool Open(const std::string &filename, bool binary) {$/;"	f	class:kaldi::FileInputImpl
Open	kaldi-io.cc	/^  virtual bool Open(const std::string &filename, bool binary) {$/;"	f	class:kaldi::FileOutputImpl
Open	kaldi-io.cc	/^  virtual bool Open(const std::string &filename, bool binary) {$/;"	f	class:kaldi::StandardInputImpl
Open	kaldi-io.cc	/^  virtual bool Open(const std::string &filename, bool binary) {$/;"	f	class:kaldi::StandardOutputImpl
Open	kaldi-io.cc	/^  virtual bool Open(const std::string &rxfilename, bool binary) {$/;"	f	class:kaldi::OffsetFileInputImpl
Open	kaldi-io.cc	/^  virtual bool Open(const std::string &rxfilename, bool binary) {$/;"	f	class:kaldi::PipeInputImpl
Open	kaldi-io.cc	/^  virtual bool Open(const std::string &wxfilename, bool binary) {$/;"	f	class:kaldi::PipeOutputImpl
Open	kaldi-io.cc	/^bool Output::Open(const std::string &wxfn, bool binary, bool header) {$/;"	f	class:kaldi::Output
Open	kaldi-table-inl.h	/^  virtual bool Open(const std::string &rspecifier) {$/;"	f	class:kaldi::RandomAccessTableReaderArchiveImplBase
Open	kaldi-table-inl.h	/^  virtual bool Open(const std::string &rspecifier) {$/;"	f	class:kaldi::RandomAccessTableReaderScriptImpl
Open	kaldi-table-inl.h	/^  virtual bool Open(const std::string &rspecifier) {$/;"	f	class:kaldi::SequentialTableReaderArchiveImpl
Open	kaldi-table-inl.h	/^  virtual bool Open(const std::string &rspecifier) {$/;"	f	class:kaldi::SequentialTableReaderScriptImpl
Open	kaldi-table-inl.h	/^  virtual bool Open(const std::string &wspecifier) {$/;"	f	class:kaldi::TableWriterArchiveImpl
Open	kaldi-table-inl.h	/^  virtual bool Open(const std::string &wspecifier) {$/;"	f	class:kaldi::TableWriterBothImpl
Open	kaldi-table-inl.h	/^  virtual bool Open(const std::string &wspecifier) {$/;"	f	class:kaldi::TableWriterScriptImpl
Open	kaldi-table-inl.h	/^bool RandomAccessTableReader<Holder>::Open(const std::string &rspecifier) {$/;"	f	class:kaldi::RandomAccessTableReader
Open	kaldi-table-inl.h	/^bool SequentialTableReader<Holder>::Open(const std::string &rspecifier) {$/;"	f	class:kaldi::SequentialTableReader
Open	kaldi-table-inl.h	/^bool TableWriter<Holder>::Open(const std::string &wspecifier) {$/;"	f	class:kaldi::TableWriter
OpenInternal	kaldi-io.cc	/^bool Input::OpenInternal(const std::string &rxfilename,$/;"	f	class:kaldi::Input
OpenTextMode	kaldi-io-inl.h	/^bool Input::OpenTextMode(const std::string &rxfilename) {$/;"	f	class:kaldi::Input
Output	kaldi-io.cc	/^Output::Output(const std::string &rxfilename, bool binary, bool write_header): impl_(NULL) {$/;"	f	class:kaldi::Output
Output	kaldi-io.h	/^  Output(): impl_(NULL) {};$/;"	f	class:kaldi::Output
Output	kaldi-io.h	/^class Output {$/;"	c	namespace:kaldi
OutputImplBase	kaldi-io.cc	/^class OutputImplBase {$/;"	c	namespace:kaldi	file:
OutputType	kaldi-io.h	/^enum OutputType {$/;"	g	namespace:kaldi
PairCompare	kaldi-table-inl.h	/^  struct PairCompare {$/;"	s	class:kaldi::RandomAccessTableReaderSortedArchiveImpl
PairHasher	stl-utils.h	/^  PairHasher() {  \/\/ Check we're instantiated with an integer type.$/;"	f	struct:kaldi::PairHasher
PairHasher	stl-utils.h	/^struct PairHasher { \/\/ hashing function for pair<int>$/;"	s	namespace:kaldi
ParseOptions	parse-options.h	/^  explicit ParseOptions(const char *usage):$/;"	f	class:kaldi::ParseOptions
ParseOptions	parse-options.h	/^class ParseOptions {$/;"	c	namespace:kaldi
PipeInputImpl	kaldi-io.cc	/^  PipeInputImpl(): f_ (NULL), is_(NULL) { }$/;"	f	class:kaldi::PipeInputImpl
PipeInputImpl	kaldi-io.cc	/^class PipeInputImpl: public InputImplBase {$/;"	c	namespace:kaldi	file:
PipeOutputImpl	kaldi-io.cc	/^  PipeOutputImpl(): f_ (NULL), os_(NULL) { }$/;"	f	class:kaldi::PipeOutputImpl
PipeOutputImpl	kaldi-io.cc	/^class PipeOutputImpl: public OutputImplBase {$/;"	c	namespace:kaldi	file:
PipebufType	kaldi-io.cc	/^typedef basic_pipebuf<char> PipebufType;$/;"	t	namespace:kaldi	file:
Posterior	kaldi-holder.h	/^typedef std::vector<std::vector<std::pair<int32, BaseFloat> > > Posterior;$/;"	t	namespace:kaldi
PosteriorHolder	kaldi-holder-inl.h	/^  PosteriorHolder() { }$/;"	f	class:kaldi::PosteriorHolder
PosteriorHolder	kaldi-holder-inl.h	/^class PosteriorHolder {$/;"	c	namespace:kaldi
PosteriorWriter	table-types.h	/^typedef TableWriter<PosteriorHolder> PosteriorWriter;$/;"	t	namespace:kaldi
PrintConfig	parse-options.cc	/^void ParseOptions::PrintConfig(std::ostream &os) {$/;"	f	class:kaldi::ParseOptions
PrintUsage	parse-options.cc	/^void ParseOptions::PrintUsage(bool print_command_line) {$/;"	f	class:kaldi::ParseOptions
PrintableRxfilename	kaldi-io.cc	/^std::string PrintableRxfilename(std::string rxfilename) {$/;"	f	namespace:kaldi
PrintableWxfilename	kaldi-io.cc	/^std::string PrintableWxfilename(std::string wxfilename) {$/;"	f	namespace:kaldi
QuoteAndEscape	parse-options.cc	/^static std::string QuoteAndEscape(const std::string &str, ShellType st) {$/;"	f	namespace:kaldi
RandomAccessBaseFloatMatrixReader	table-types.h	/^typedef RandomAccessTableReader<KaldiObjectHolder<Matrix<BaseFloat> > >  RandomAccessBaseFloatMatrixReader;$/;"	t	namespace:kaldi
RandomAccessBaseFloatPairVectorReader	table-types.h	/^typedef RandomAccessTableReader<BasicPairVectorHolder<BaseFloat> >  RandomAccessBaseFloatPairVectorReader;$/;"	t	namespace:kaldi
RandomAccessBaseFloatReader	table-types.h	/^typedef RandomAccessTableReader<BasicHolder<BaseFloat> >  RandomAccessBaseFloatReader;$/;"	t	namespace:kaldi
RandomAccessBaseFloatVectorReader	table-types.h	/^typedef RandomAccessTableReader<KaldiObjectHolder<Vector<BaseFloat> > >  RandomAccessBaseFloatVectorReader;$/;"	t	namespace:kaldi
RandomAccessBoolReader	table-types.h	/^typedef RandomAccessTableReader<BasicHolder<bool> >  RandomAccessBoolReader;$/;"	t	namespace:kaldi
RandomAccessDoubleMatrixReader	table-types.h	/^typedef RandomAccessTableReader<KaldiObjectHolder<Matrix<double> > >  RandomAccessDoubleMatrixReader;$/;"	t	namespace:kaldi
RandomAccessDoubleReader	table-types.h	/^typedef RandomAccessTableReader<BasicHolder<double> >  RandomAccessDoubleReader;$/;"	t	namespace:kaldi
RandomAccessDoubleVectorReader	table-types.h	/^typedef RandomAccessTableReader<KaldiObjectHolder<Vector<double> > >  RandomAccessDoubleVectorReader;$/;"	t	namespace:kaldi
RandomAccessGauPostReader	table-types.h	/^typedef RandomAccessTableReader<GauPostHolder> RandomAccessGauPostReader;$/;"	t	namespace:kaldi
RandomAccessInt32PairVectorReader	table-types.h	/^typedef RandomAccessTableReader<BasicPairVectorHolder<int32> >  RandomAccessInt32PairVectorReader;$/;"	t	namespace:kaldi
RandomAccessInt32Reader	table-types.h	/^typedef RandomAccessTableReader<BasicHolder<int32> >  RandomAccessInt32Reader;$/;"	t	namespace:kaldi
RandomAccessInt32VectorReader	table-types.h	/^typedef RandomAccessTableReader<BasicVectorHolder<int32> >  RandomAccessInt32VectorReader;$/;"	t	namespace:kaldi
RandomAccessInt32VectorVectorReader	table-types.h	/^typedef RandomAccessTableReader<BasicVectorVectorHolder<int32> >  RandomAccessInt32VectorVectorReader;$/;"	t	namespace:kaldi
RandomAccessPosteriorReader	table-types.h	/^typedef RandomAccessTableReader<PosteriorHolder> RandomAccessPosteriorReader;$/;"	t	namespace:kaldi
RandomAccessTableReader	kaldi-table-inl.h	/^RandomAccessTableReader<Holder>::RandomAccessTableReader(const std::string &rspecifier):$/;"	f	class:kaldi::RandomAccessTableReader
RandomAccessTableReader	kaldi-table.h	/^  RandomAccessTableReader(): impl_(NULL) { }$/;"	f	class:kaldi::RandomAccessTableReader
RandomAccessTableReader	kaldi-table.h	/^class RandomAccessTableReader {$/;"	c	namespace:kaldi
RandomAccessTableReaderArchiveImplBase	kaldi-table-inl.h	/^  RandomAccessTableReaderArchiveImplBase(): holder_(NULL), state_(kUninitialized) { }$/;"	f	class:kaldi::RandomAccessTableReaderArchiveImplBase
RandomAccessTableReaderArchiveImplBase	kaldi-table-inl.h	/^template<class Holder>  class RandomAccessTableReaderArchiveImplBase:$/;"	c	namespace:kaldi
RandomAccessTableReaderDSortedArchiveImpl	kaldi-table-inl.h	/^  RandomAccessTableReaderDSortedArchiveImpl() { }$/;"	f	class:kaldi::RandomAccessTableReaderDSortedArchiveImpl
RandomAccessTableReaderDSortedArchiveImpl	kaldi-table-inl.h	/^template<class Holder>  class RandomAccessTableReaderDSortedArchiveImpl:$/;"	c	namespace:kaldi
RandomAccessTableReaderImplBase	kaldi-table-inl.h	/^template<class Holder> class RandomAccessTableReaderImplBase {$/;"	c	namespace:kaldi
RandomAccessTableReaderScriptImpl	kaldi-table-inl.h	/^  RandomAccessTableReaderScriptImpl(): last_found_(0), state_(kUninitialized) {}$/;"	f	class:kaldi::RandomAccessTableReaderScriptImpl
RandomAccessTableReaderScriptImpl	kaldi-table-inl.h	/^class RandomAccessTableReaderScriptImpl:$/;"	c	namespace:kaldi
RandomAccessTableReaderSortedArchiveImpl	kaldi-table-inl.h	/^  RandomAccessTableReaderSortedArchiveImpl():$/;"	f	class:kaldi::RandomAccessTableReaderSortedArchiveImpl
RandomAccessTableReaderSortedArchiveImpl	kaldi-table-inl.h	/^template<class Holder>  class RandomAccessTableReaderSortedArchiveImpl:$/;"	c	namespace:kaldi
RandomAccessTableReaderUnsortedArchiveImpl	kaldi-table-inl.h	/^  RandomAccessTableReaderUnsortedArchiveImpl(): to_delete_iter_(map_.end()),$/;"	f	class:kaldi::RandomAccessTableReaderUnsortedArchiveImpl
RandomAccessTableReaderUnsortedArchiveImpl	kaldi-table-inl.h	/^template<class Holder>  class RandomAccessTableReaderUnsortedArchiveImpl:$/;"	c	namespace:kaldi
RandomAccessTokenReader	table-types.h	/^typedef RandomAccessTableReader<TokenHolder> RandomAccessTokenReader;$/;"	t	namespace:kaldi
RandomAccessTokenVectorReader	table-types.h	/^typedef RandomAccessTableReader<TokenVectorHolder> RandomAccessTokenVectorReader;$/;"	t	namespace:kaldi
RandomizeVector	kaldi-table-test.cc	/^template<class T> void RandomizeVector(std::vector<T> *v) {$/;"	f	namespace:kaldi
Read	const-integer-set-inl.h	/^void ConstIntegerSet<I>::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::ConstIntegerSet
Read	kaldi-holder-inl.h	/^  bool Read(std::istream &is) {$/;"	f	class:kaldi::BasicHolder
Read	kaldi-holder-inl.h	/^  bool Read(std::istream &is) {$/;"	f	class:kaldi::BasicPairVectorHolder
Read	kaldi-holder-inl.h	/^  bool Read(std::istream &is) {$/;"	f	class:kaldi::BasicVectorHolder
Read	kaldi-holder-inl.h	/^  bool Read(std::istream &is) {$/;"	f	class:kaldi::BasicVectorVectorHolder
Read	kaldi-holder-inl.h	/^  bool Read(std::istream &is) {$/;"	f	class:kaldi::GauPostHolder
Read	kaldi-holder-inl.h	/^  bool Read(std::istream &is) {$/;"	f	class:kaldi::HtkMatrixHolder
Read	kaldi-holder-inl.h	/^  bool Read(std::istream &is) {$/;"	f	class:kaldi::KaldiObjectHolder
Read	kaldi-holder-inl.h	/^  bool Read(std::istream &is) {$/;"	f	class:kaldi::PosteriorHolder
Read	kaldi-holder-inl.h	/^  bool Read(std::istream &is) {$/;"	f	class:kaldi::SphinxMatrixHolder
Read	kaldi-holder-inl.h	/^  bool Read(std::istream &is) {$/;"	f	class:kaldi::TokenHolder
Read	kaldi-holder-inl.h	/^  bool Read(std::istream &is) {$/;"	f	class:kaldi::TokenVectorHolder
Read	parse-options.cc	/^int ParseOptions::Read(int argc, const char *const argv[]) {$/;"	f	class:kaldi::ParseOptions
ReadConfigFile	parse-options.cc	/^void ParseOptions::ReadConfigFile(const std::string &filename) {$/;"	f	class:kaldi::ParseOptions
ReadIntegerVectorSimple	simple-io-funcs.cc	/^bool ReadIntegerVectorSimple(std::string rxfilename, std::vector<int32> *list) {$/;"	f	namespace:kaldi
ReadIntegerVectorVectorSimple	simple-io-funcs.cc	/^bool ReadIntegerVectorVectorSimple(std::string rxfilename, std::vector<std::vector<int32> > *list) {$/;"	f	namespace:kaldi
ReadKaldiObject	kaldi-io.h	/^template <class C> inline void ReadKaldiObject(const std::string &filename,$/;"	f	namespace:kaldi
ReadNextObject	kaldi-table-inl.h	/^  void ReadNextObject() {$/;"	f	class:kaldi::RandomAccessTableReaderArchiveImplBase
ReadScriptFile	kaldi-table.cc	/^bool ReadScriptFile(const std::string &rxfilename,$/;"	f	namespace:kaldi
ReadScriptFile	kaldi-table.cc	/^bool ReadScriptFile(std::istream &is,$/;"	f	namespace:kaldi
Register	parse-options.cc	/^void ParseOptions::Register(const std::string &name, T *ptr,$/;"	f	class:kaldi::ParseOptions
RegisterCommon	parse-options.cc	/^void ParseOptions::RegisterCommon(const std::string &name, T *ptr,$/;"	f	class:kaldi::ParseOptions
RegisterSpecific	parse-options.cc	/^void ParseOptions::RegisterSpecific(const std::string &name,$/;"	f	class:kaldi::ParseOptions
RegisterStandard	parse-options.cc	/^void ParseOptions::RegisterStandard(const std::string &name, T *ptr,$/;"	f	class:kaldi::ParseOptions
Reset	timer.h	/^  void Reset() {$/;"	f	class:kaldi::Timer
ReverseVector	stl-utils.h	/^inline void ReverseVector(std::vector<T> *vec) {$/;"	f	namespace:kaldi
RspecifierOptions	kaldi-table.h	/^  RspecifierOptions(): once(false), sorted(false),$/;"	f	struct:kaldi::RspecifierOptions
RspecifierOptions	kaldi-table.h	/^struct  RspecifierOptions {$/;"	s	namespace:kaldi
RspecifierType	kaldi-table.h	/^enum RspecifierType  {$/;"	g	namespace:kaldi
Seek	kaldi-io.cc	/^  bool Seek(size_t offset) {$/;"	f	class:kaldi::OffsetFileInputImpl
SequentialBaseFloatMatrixReader	table-types.h	/^typedef SequentialTableReader<KaldiObjectHolder<Matrix<BaseFloat> > >  SequentialBaseFloatMatrixReader;$/;"	t	namespace:kaldi
SequentialBaseFloatPairVectorReader	table-types.h	/^typedef SequentialTableReader<BasicPairVectorHolder<BaseFloat> >  SequentialBaseFloatPairVectorReader;$/;"	t	namespace:kaldi
SequentialBaseFloatReader	table-types.h	/^typedef SequentialTableReader<BasicHolder<BaseFloat> >  SequentialBaseFloatReader;$/;"	t	namespace:kaldi
SequentialBaseFloatVectorReader	table-types.h	/^typedef SequentialTableReader<KaldiObjectHolder<Vector<BaseFloat> > >  SequentialBaseFloatVectorReader;$/;"	t	namespace:kaldi
SequentialBoolReader	table-types.h	/^typedef SequentialTableReader<BasicHolder<bool> >  SequentialBoolReader;$/;"	t	namespace:kaldi
SequentialDoubleMatrixReader	table-types.h	/^typedef SequentialTableReader<KaldiObjectHolder<Matrix<double> > >  SequentialDoubleMatrixReader;$/;"	t	namespace:kaldi
SequentialDoubleReader	table-types.h	/^typedef SequentialTableReader<BasicHolder<double> >  SequentialDoubleReader;$/;"	t	namespace:kaldi
SequentialDoubleVectorReader	table-types.h	/^typedef SequentialTableReader<KaldiObjectHolder<Vector<double> > >  SequentialDoubleVectorReader;$/;"	t	namespace:kaldi
SequentialGauPostReader	table-types.h	/^typedef SequentialTableReader<GauPostHolder> SequentialGauPostReader;$/;"	t	namespace:kaldi
SequentialInt32PairVectorReader	table-types.h	/^typedef SequentialTableReader<BasicPairVectorHolder<int32> >  SequentialInt32PairVectorReader;$/;"	t	namespace:kaldi
SequentialInt32Reader	table-types.h	/^typedef SequentialTableReader<BasicHolder<int32> >  SequentialInt32Reader;$/;"	t	namespace:kaldi
SequentialInt32VectorReader	table-types.h	/^typedef SequentialTableReader<BasicVectorHolder<int32> >  SequentialInt32VectorReader;$/;"	t	namespace:kaldi
SequentialInt32VectorVectorReader	table-types.h	/^typedef SequentialTableReader<BasicVectorVectorHolder<int32> >  SequentialInt32VectorVectorReader;$/;"	t	namespace:kaldi
SequentialPosteriorReader	table-types.h	/^typedef SequentialTableReader<PosteriorHolder> SequentialPosteriorReader;$/;"	t	namespace:kaldi
SequentialTableReader	kaldi-table-inl.h	/^SequentialTableReader<Holder>::SequentialTableReader(const std::string &rspecifier): impl_(NULL) {$/;"	f	class:kaldi::SequentialTableReader
SequentialTableReader	kaldi-table.h	/^  SequentialTableReader(): impl_(NULL) { }$/;"	f	class:kaldi::SequentialTableReader
SequentialTableReader	kaldi-table.h	/^class SequentialTableReader {$/;"	c	namespace:kaldi
SequentialTableReaderArchiveImpl	kaldi-table-inl.h	/^  SequentialTableReaderArchiveImpl(): state_(kUninitialized) { }$/;"	f	class:kaldi::SequentialTableReaderArchiveImpl
SequentialTableReaderArchiveImpl	kaldi-table-inl.h	/^template<class Holder>  class SequentialTableReaderArchiveImpl:$/;"	c	namespace:kaldi
SequentialTableReaderImplBase	kaldi-table-inl.h	/^template<class Holder> class SequentialTableReaderImplBase {$/;"	c	namespace:kaldi
SequentialTableReaderScriptImpl	kaldi-table-inl.h	/^  SequentialTableReaderScriptImpl(): state_(kUninitialized) { }$/;"	f	class:kaldi::SequentialTableReaderScriptImpl
SequentialTableReaderScriptImpl	kaldi-table-inl.h	/^template<class Holder>  class SequentialTableReaderScriptImpl:$/;"	c	namespace:kaldi
SequentialTokenReader	table-types.h	/^typedef SequentialTableReader<TokenHolder> SequentialTokenReader;$/;"	t	namespace:kaldi
SequentialTokenVectorReader	table-types.h	/^typedef SequentialTableReader<TokenVectorHolder> SequentialTokenVectorReader;$/;"	t	namespace:kaldi
SetOption	parse-options.cc	/^bool ParseOptions::SetOption(const std::string &key, const std::string &value) {$/;"	f	class:kaldi::ParseOptions
SetSize	hash-list-inl.h	/^template<class I, class T> void HashList<I, T>::SetSize(size_t size) {$/;"	f	class:kaldi::HashList
ShellType	parse-options.cc	/^enum ShellType { kBash = 0 };  \/\/ We currently do not support any$/;"	g	namespace:kaldi	file:
Size	hash-list.h	/^  inline size_t Size() { return hash_size_; }$/;"	f	class:kaldi::HashList
SortAndUniq	stl-utils.h	/^inline void SortAndUniq(std::vector<T> *vec) {$/;"	f	namespace:kaldi
SphinxMatrixHolder	kaldi-holder-inl.h	/^  SphinxMatrixHolder() {}$/;"	f	class:kaldi::SphinxMatrixHolder
SphinxMatrixHolder	kaldi-holder-inl.h	/^template<int kFeatDim=13> class SphinxMatrixHolder {$/;"	c	namespace:kaldi
SplitFilename	kaldi-io.cc	/^  static void SplitFilename(const std::string &rxfilename,$/;"	f	class:kaldi::OffsetFileInputImpl
SplitLongArg	parse-options.cc	/^void ParseOptions::SplitLongArg(std::string in, std::string *key,$/;"	f	class:kaldi::ParseOptions
SplitStringOnFirstSpace	text-utils.cc	/^void SplitStringOnFirstSpace(const std::string &str,$/;"	f	namespace:kaldi
SplitStringToFloats	text-utils.cc	/^bool SplitStringToFloats(const std::string &full,$/;"	f	namespace:kaldi
SplitStringToIntegers	text-utils.h	/^bool SplitStringToIntegers(const std::string &full,$/;"	f	namespace:kaldi
SplitStringToVector	text-utils.cc	/^void SplitStringToVector(const std::string &full, const char *delim,$/;"	f	namespace:kaldi
StandardInputImpl	kaldi-io.cc	/^  StandardInputImpl(): is_open_(false) { }$/;"	f	class:kaldi::StandardInputImpl
StandardInputImpl	kaldi-io.cc	/^class StandardInputImpl: public InputImplBase {$/;"	c	namespace:kaldi	file:
StandardOutputImpl	kaldi-io.cc	/^  StandardOutputImpl(): is_open_(false) { }$/;"	f	class:kaldi::StandardOutputImpl
StandardOutputImpl	kaldi-io.cc	/^class StandardOutputImpl: public OutputImplBase {$/;"	c	namespace:kaldi	file:
StateType	kaldi-table-inl.h	/^  enum StateType {$/;"	g	class:kaldi::SequentialTableReaderScriptImpl
Stream	kaldi-io.cc	/^  virtual std::istream &Stream() {$/;"	f	class:kaldi::FileInputImpl
Stream	kaldi-io.cc	/^  virtual std::istream &Stream() {$/;"	f	class:kaldi::OffsetFileInputImpl
Stream	kaldi-io.cc	/^  virtual std::istream &Stream() {$/;"	f	class:kaldi::PipeInputImpl
Stream	kaldi-io.cc	/^  virtual std::istream &Stream() {$/;"	f	class:kaldi::StandardInputImpl
Stream	kaldi-io.cc	/^  virtual std::ostream &Stream() {$/;"	f	class:kaldi::FileOutputImpl
Stream	kaldi-io.cc	/^  virtual std::ostream &Stream() {$/;"	f	class:kaldi::PipeOutputImpl
Stream	kaldi-io.cc	/^  virtual std::ostream &Stream() {$/;"	f	class:kaldi::StandardOutputImpl
Stream	kaldi-io.cc	/^std::istream &Input::Stream() {$/;"	f	class:kaldi::Input
Stream	kaldi-io.cc	/^std::ostream &Output::Stream() {  \/\/ will throw if not open; else returns stream.$/;"	f	class:kaldi::Output
StringHasher	stl-utils.h	/^struct StringHasher {  \/\/ hashing function for std::string$/;"	s	namespace:kaldi
T	kaldi-holder-inl.h	/^  typedef BasicType T;$/;"	t	class:kaldi::BasicHolder
T	kaldi-holder-inl.h	/^  typedef GauPost T;$/;"	t	class:kaldi::GauPostHolder
T	kaldi-holder-inl.h	/^  typedef KaldiType T;$/;"	t	class:kaldi::KaldiObjectHolder
T	kaldi-holder-inl.h	/^  typedef Matrix<BaseFloat> T;$/;"	t	class:kaldi::SphinxMatrixHolder
T	kaldi-holder-inl.h	/^  typedef Posterior T;$/;"	t	class:kaldi::PosteriorHolder
T	kaldi-holder-inl.h	/^  typedef std::pair<Matrix<BaseFloat>, HtkHeader> T;$/;"	t	class:kaldi::HtkMatrixHolder
T	kaldi-holder-inl.h	/^  typedef std::string T;$/;"	t	class:kaldi::TokenHolder
T	kaldi-holder-inl.h	/^  typedef std::vector<BasicType> T;$/;"	t	class:kaldi::BasicVectorHolder
T	kaldi-holder-inl.h	/^  typedef std::vector<std::pair<BasicType, BasicType> > T;$/;"	t	class:kaldi::BasicPairVectorHolder
T	kaldi-holder-inl.h	/^  typedef std::vector<std::string> T;$/;"	t	class:kaldi::TokenVectorHolder
T	kaldi-holder-inl.h	/^  typedef std::vector<std::vector<BasicType> > T;$/;"	t	class:kaldi::BasicVectorVectorHolder
T	kaldi-holder.h	/^  typedef SomeType T;$/;"	t	class:kaldi::GenericHolder
T	kaldi-table-inl.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::RandomAccessTableReaderArchiveImplBase
T	kaldi-table-inl.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::RandomAccessTableReaderDSortedArchiveImpl
T	kaldi-table-inl.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::RandomAccessTableReaderImplBase
T	kaldi-table-inl.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::RandomAccessTableReaderScriptImpl
T	kaldi-table-inl.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::RandomAccessTableReaderSortedArchiveImpl
T	kaldi-table-inl.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::RandomAccessTableReaderUnsortedArchiveImpl
T	kaldi-table-inl.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::SequentialTableReaderArchiveImpl
T	kaldi-table-inl.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::SequentialTableReaderImplBase
T	kaldi-table-inl.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::SequentialTableReaderScriptImpl
T	kaldi-table-inl.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::TableWriterArchiveImpl
T	kaldi-table-inl.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::TableWriterBothImpl
T	kaldi-table-inl.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::TableWriterImplBase
T	kaldi-table-inl.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::TableWriterScriptImpl
T	kaldi-table.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::RandomAccessTableReader
T	kaldi-table.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::SequentialTableReader
T	kaldi-table.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::TableWriter
TableWriter	kaldi-table-inl.h	/^TableWriter<Holder>::TableWriter(const std::string &wspecifier): impl_(NULL) {$/;"	f	class:kaldi::TableWriter
TableWriter	kaldi-table.h	/^  TableWriter(): impl_(NULL) { }$/;"	f	class:kaldi::TableWriter
TableWriter	kaldi-table.h	/^class TableWriter {$/;"	c	namespace:kaldi
TableWriterArchiveImpl	kaldi-table-inl.h	/^  TableWriterArchiveImpl(): state_(kUninitialized) {}$/;"	f	class:kaldi::TableWriterArchiveImpl
TableWriterArchiveImpl	kaldi-table-inl.h	/^class TableWriterArchiveImpl: public TableWriterImplBase<Holder> {$/;"	c	namespace:kaldi
TableWriterBothImpl	kaldi-table-inl.h	/^  TableWriterBothImpl(): state_(kUninitialized) {}$/;"	f	class:kaldi::TableWriterBothImpl
TableWriterBothImpl	kaldi-table-inl.h	/^class TableWriterBothImpl: public TableWriterImplBase<Holder> {$/;"	c	namespace:kaldi
TableWriterImplBase	kaldi-table-inl.h	/^template<class Holder> class TableWriterImplBase {$/;"	c	namespace:kaldi
TableWriterScriptImpl	kaldi-table-inl.h	/^  TableWriterScriptImpl(): last_found_(0), state_(kUninitialized) {}$/;"	f	class:kaldi::TableWriterScriptImpl
TableWriterScriptImpl	kaldi-table-inl.h	/^class TableWriterScriptImpl: public TableWriterImplBase<Holder> {$/;"	c	namespace:kaldi
TestContainsNullPointers	stl-utils-test.cc	/^void TestContainsNullPointers() {$/;"	f	namespace:kaldi
TestConvertStringToInteger	text-utils-test.cc	/^void TestConvertStringToInteger() {$/;"	f	namespace:kaldi
TestConvertStringToReal	text-utils-test.cc	/^void TestConvertStringToReal() {$/;"	f	namespace:kaldi
TestCopyMapKeysToSet	stl-utils-test.cc	/^void TestCopyMapKeysToSet() {$/;"	f	namespace:kaldi
TestCopyMapKeysToVector	stl-utils-test.cc	/^void TestCopyMapKeysToVector() {$/;"	f	namespace:kaldi
TestCopyMapToVector	stl-utils-test.cc	/^void TestCopyMapToVector() {$/;"	f	namespace:kaldi
TestCopyMapValuesToSet	stl-utils-test.cc	/^void TestCopyMapValuesToSet() {$/;"	f	namespace:kaldi
TestCopyMapValuesToVector	stl-utils-test.cc	/^void TestCopyMapValuesToVector() {$/;"	f	namespace:kaldi
TestCopySetToVector	stl-utils-test.cc	/^void TestCopySetToVector() {$/;"	f	namespace:kaldi
TestEditDistance	edit-distance-test.cc	/^void TestEditDistance() {$/;"	f	namespace:kaldi
TestEditDistance2	edit-distance-test.cc	/^void TestEditDistance2() {$/;"	f	namespace:kaldi
TestEditDistance2String	edit-distance-test.cc	/^void TestEditDistance2String() {$/;"	f	namespace:kaldi
TestEditDistanceString	edit-distance-test.cc	/^void TestEditDistanceString() {$/;"	f	namespace:kaldi
TestHashList	hash-list-test.cc	/^template<class Int, class T> void TestHashList() {$/;"	f	namespace:kaldi
TestIsLine	text-utils-test.cc	/^void TestIsLine() {$/;"	f	namespace:kaldi
TestIsSorted	stl-utils-test.cc	/^static void TestIsSorted() {$/;"	f	namespace:kaldi
TestIsSortedAndUniq	stl-utils-test.cc	/^static void TestIsSortedAndUniq() {$/;"	f	namespace:kaldi
TestIsToken	text-utils-test.cc	/^void TestIsToken() {$/;"	f	namespace:kaldi
TestLevenshteinAlignment	edit-distance-test.cc	/^void TestLevenshteinAlignment() {$/;"	f	namespace:kaldi
TestMergePairVectorSumming	stl-utils-test.cc	/^void TestMergePairVectorSumming() {$/;"	f	namespace:kaldi
TestReverseVector	stl-utils-test.cc	/^void TestReverseVector() {$/;"	f	namespace:kaldi
TestSetOfNumbers	const-integer-set-test.cc	/^template<class Int> void TestSetOfNumbers(bool binary) {$/;"	f	namespace:kaldi
TestSortAndUniq	stl-utils-test.cc	/^static void TestSortAndUniq() {$/;"	f	namespace:kaldi
TestSplitStringOnFirstSpace	text-utils-test.cc	/^void TestSplitStringOnFirstSpace() {$/;"	f	namespace:kaldi
TestSplitStringToFloats	text-utils-test.cc	/^void TestSplitStringToFloats() {$/;"	f	namespace:kaldi
TestSplitStringToIntegers	text-utils-test.cc	/^void TestSplitStringToIntegers() {$/;"	f	namespace:kaldi
TestSplitStringToVector	text-utils-test.cc	/^void TestSplitStringToVector() {$/;"	f	namespace:kaldi
TestTrim	text-utils-test.cc	/^void TestTrim() {$/;"	f	namespace:kaldi
TestUniq	stl-utils-test.cc	/^static void TestUniq() {$/;"	f	namespace:kaldi
ThisType	kaldi-pipebuf.h	/^  typedef basic_pipebuf<CharType, Traits>   ThisType;$/;"	t	class:kaldi::basic_pipebuf
Timer	timer.h	/^  Timer() { Reset(); }$/;"	f	class:kaldi::Timer
Timer	timer.h	/^class Timer {$/;"	c	namespace:kaldi
TimerTest	timer-test.cc	/^void TimerTest() {$/;"	f	namespace:kaldi
ToBool	parse-options.cc	/^bool ParseOptions::ToBool(std::string str) {$/;"	f	class:kaldi::ParseOptions
ToDouble	parse-options.cc	/^double ParseOptions::ToDouble(std::string str) {$/;"	f	class:kaldi::ParseOptions
ToFloat	parse-options.cc	/^float ParseOptions::ToFloat(std::string str) {$/;"	f	class:kaldi::ParseOptions
ToInt	parse-options.cc	/^int32 ParseOptions::ToInt(std::string str) {$/;"	f	class:kaldi::ParseOptions
ToUInt	parse-options.cc	/^uint32 ParseOptions::ToUInt(std::string str) {$/;"	f	class:kaldi::ParseOptions
TokenHolder	kaldi-holder-inl.h	/^  TokenHolder() {}$/;"	f	class:kaldi::TokenHolder
TokenHolder	kaldi-holder-inl.h	/^class TokenHolder {$/;"	c	namespace:kaldi
TokenVectorHolder	kaldi-holder-inl.h	/^  TokenVectorHolder() { }$/;"	f	class:kaldi::TokenVectorHolder
TokenVectorHolder	kaldi-holder-inl.h	/^class TokenVectorHolder {$/;"	c	namespace:kaldi
TokenVectorWriter	table-types.h	/^typedef TableWriter<TokenVectorHolder> TokenVectorWriter;$/;"	t	namespace:kaldi
TokenWriter	table-types.h	/^typedef TableWriter<TokenHolder> TokenWriter;$/;"	t	namespace:kaldi
Trim	text-utils.cc	/^void Trim(std::string *str) {$/;"	f	namespace:kaldi
TrimTmp	text-utils-test.cc	/^std::string TrimTmp(std::string s) {$/;"	f	namespace:kaldi
Uniq	stl-utils.h	/^inline void Uniq(std::vector<T> *vec) {  \/\/ must be already sorted.$/;"	f	namespace:kaldi
UnitTestClassifyRspecifier	kaldi-table-test.cc	/^void UnitTestClassifyRspecifier() {$/;"	f	namespace:kaldi
UnitTestClassifyRxfilename	kaldi-io-test.cc	/^void UnitTestClassifyRxfilename() {$/;"	f	namespace:kaldi
UnitTestClassifyWspecifier	kaldi-table-test.cc	/^void UnitTestClassifyWspecifier() {$/;"	f	namespace:kaldi
UnitTestClassifyWxfilename	kaldi-io-test.cc	/^void UnitTestClassifyWxfilename() {$/;"	f	namespace:kaldi
UnitTestIoNew	kaldi-io-test.cc	/^void UnitTestIoNew(bool binary) {$/;"	f	namespace:kaldi
UnitTestIoPipe	kaldi-io-test.cc	/^void UnitTestIoPipe(bool binary) {$/;"	f	namespace:kaldi
UnitTestIoStandard	kaldi-io-test.cc	/^void UnitTestIoStandard() {$/;"	f	namespace:kaldi
UnitTestParseOptions	parse-options-test.cc	/^void UnitTestParseOptions() {$/;"	f	namespace:kaldi
UnitTestReadScriptFile	kaldi-table-test.cc	/^void UnitTestReadScriptFile() {$/;"	f	namespace:kaldi
UnitTestTableRandomBothDouble	kaldi-table-test.cc	/^void UnitTestTableRandomBothDouble(bool binary, bool read_scp,$/;"	f	namespace:kaldi
UnitTestTableRandomBothDoubleMatrix	kaldi-table-test.cc	/^void UnitTestTableRandomBothDoubleMatrix(bool binary, bool read_scp,$/;"	f	namespace:kaldi
UnitTestTableSequentialBaseFloatVectorBoth	kaldi-table-test.cc	/^void UnitTestTableSequentialBaseFloatVectorBoth(bool binary, bool read_scp) {$/;"	f	namespace:kaldi
UnitTestTableSequentialBool	kaldi-table-test.cc	/^void UnitTestTableSequentialBool(bool binary) {$/;"	f	namespace:kaldi
UnitTestTableSequentialDouble	kaldi-table-test.cc	/^void UnitTestTableSequentialDouble(bool binary) {$/;"	f	namespace:kaldi
UnitTestTableSequentialDoubleBoth	kaldi-table-test.cc	/^void UnitTestTableSequentialDoubleBoth(bool binary, bool read_scp) {$/;"	f	namespace:kaldi
UnitTestTableSequentialDoubleMatrixBoth	kaldi-table-test.cc	/^void UnitTestTableSequentialDoubleMatrixBoth(bool binary, bool read_scp) {$/;"	f	namespace:kaldi
UnitTestTableSequentialInt32	kaldi-table-test.cc	/^void UnitTestTableSequentialInt32(bool binary) {$/;"	f	namespace:kaldi
UnitTestTableSequentialInt32PairVectorBoth	kaldi-table-test.cc	/^void UnitTestTableSequentialInt32PairVectorBoth(bool binary, bool read_scp) {$/;"	f	namespace:kaldi
UnitTestTableSequentialInt32Script	kaldi-table-test.cc	/^void UnitTestTableSequentialInt32Script(bool binary) {$/;"	f	namespace:kaldi
UnitTestTableSequentialInt32VectorBoth	kaldi-table-test.cc	/^void UnitTestTableSequentialInt32VectorBoth(bool binary, bool read_scp) {$/;"	f	namespace:kaldi
UnitTestTableSequentialInt32VectorVectorBoth	kaldi-table-test.cc	/^void UnitTestTableSequentialInt32VectorVectorBoth(bool binary, bool read_scp) {$/;"	f	namespace:kaldi
Value	kaldi-holder-inl.h	/^  const T &Value() const {  return t_; }$/;"	f	class:kaldi::BasicPairVectorHolder
Value	kaldi-holder-inl.h	/^  const T &Value() const {  return t_; }$/;"	f	class:kaldi::BasicVectorHolder
Value	kaldi-holder-inl.h	/^  const T &Value() const {  return t_; }$/;"	f	class:kaldi::BasicVectorVectorHolder
Value	kaldi-holder-inl.h	/^  const T &Value() const { return feats_; }$/;"	f	class:kaldi::SphinxMatrixHolder
Value	kaldi-holder-inl.h	/^  const T &Value() const { return t_; }$/;"	f	class:kaldi::HtkMatrixHolder
Value	kaldi-holder-inl.h	/^  const T &Value() const { return t_; }$/;"	f	class:kaldi::TokenHolder
Value	kaldi-holder-inl.h	/^  const T &Value() const { return t_; }$/;"	f	class:kaldi::TokenVectorHolder
Value	kaldi-holder-inl.h	/^  const T &Value() const {$/;"	f	class:kaldi::BasicHolder
Value	kaldi-holder-inl.h	/^  const T &Value() const {$/;"	f	class:kaldi::GauPostHolder
Value	kaldi-holder-inl.h	/^  const T &Value() const {$/;"	f	class:kaldi::KaldiObjectHolder
Value	kaldi-holder-inl.h	/^  const T &Value() const {$/;"	f	class:kaldi::PosteriorHolder
Value	kaldi-holder.h	/^  const T &Value() const { return t_; } \/\/ if t is a pointer, would return *t_;$/;"	f	class:kaldi::GenericHolder
Value	kaldi-table-inl.h	/^  const T &Value() {$/;"	f	class:kaldi::SequentialTableReaderArchiveImpl
Value	kaldi-table-inl.h	/^  const T &Value() {$/;"	f	class:kaldi::SequentialTableReaderScriptImpl
Value	kaldi-table-inl.h	/^  virtual const T & Value(const std::string &key) {$/;"	f	class:kaldi::RandomAccessTableReaderDSortedArchiveImpl
Value	kaldi-table-inl.h	/^  virtual const T & Value(const std::string &key) {$/;"	f	class:kaldi::RandomAccessTableReaderSortedArchiveImpl
Value	kaldi-table-inl.h	/^  virtual const T & Value(const std::string &key) {$/;"	f	class:kaldi::RandomAccessTableReaderUnsortedArchiveImpl
Value	kaldi-table-inl.h	/^  virtual const T&  Value(const std::string &key) {$/;"	f	class:kaldi::RandomAccessTableReaderScriptImpl
Value	kaldi-table-inl.h	/^RandomAccessTableReader<Holder>::Value(const std::string &key) {$/;"	f	class:kaldi::RandomAccessTableReader
Value	kaldi-table-inl.h	/^SequentialTableReader<Holder>::Value() {$/;"	f	class:kaldi::SequentialTableReader
VectorHasher	stl-utils.h	/^  VectorHasher() {  \/\/ Check we're instantiated with an integer type.$/;"	f	struct:kaldi::VectorHasher
VectorHasher	stl-utils.h	/^struct VectorHasher {  \/\/ hashing function for vector<Int>.$/;"	s	namespace:kaldi
Write	const-integer-set-inl.h	/^void ConstIntegerSet<I>::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::ConstIntegerSet
Write	kaldi-holder-inl.h	/^  static bool Write(std::ostream &os, bool binary, const T &m) {$/;"	f	class:kaldi::SphinxMatrixHolder
Write	kaldi-holder-inl.h	/^  static bool Write(std::ostream &os, bool binary, const T &t) {$/;"	f	class:kaldi::BasicHolder
Write	kaldi-holder-inl.h	/^  static bool Write(std::ostream &os, bool binary, const T &t) {$/;"	f	class:kaldi::BasicPairVectorHolder
Write	kaldi-holder-inl.h	/^  static bool Write(std::ostream &os, bool binary, const T &t) {$/;"	f	class:kaldi::BasicVectorHolder
Write	kaldi-holder-inl.h	/^  static bool Write(std::ostream &os, bool binary, const T &t) {$/;"	f	class:kaldi::BasicVectorVectorHolder
Write	kaldi-holder-inl.h	/^  static bool Write(std::ostream &os, bool binary, const T &t) {$/;"	f	class:kaldi::GauPostHolder
Write	kaldi-holder-inl.h	/^  static bool Write(std::ostream &os, bool binary, const T &t) {$/;"	f	class:kaldi::HtkMatrixHolder
Write	kaldi-holder-inl.h	/^  static bool Write(std::ostream &os, bool binary, const T &t) {$/;"	f	class:kaldi::KaldiObjectHolder
Write	kaldi-holder-inl.h	/^  static bool Write(std::ostream &os, bool binary, const T &t) {$/;"	f	class:kaldi::PosteriorHolder
Write	kaldi-holder-inl.h	/^  static bool Write(std::ostream &os, bool, const T &t) {  \/\/ ignore binary-mode.$/;"	f	class:kaldi::TokenHolder
Write	kaldi-holder-inl.h	/^  static bool Write(std::ostream &os, bool, const T &t) {  \/\/ ignore binary-mode.$/;"	f	class:kaldi::TokenVectorHolder
Write	kaldi-table-inl.h	/^  virtual bool Write(const std::string &key, const T &value) {$/;"	f	class:kaldi::TableWriterArchiveImpl
Write	kaldi-table-inl.h	/^  virtual bool Write(const std::string &key, const T &value) {$/;"	f	class:kaldi::TableWriterBothImpl
Write	kaldi-table-inl.h	/^  virtual bool Write(const std::string &key, const T &value) {$/;"	f	class:kaldi::TableWriterScriptImpl
Write	kaldi-table-inl.h	/^void TableWriter<Holder>::Write(const std::string &key,$/;"	f	class:kaldi::TableWriter
WriteIntegerVectorSimple	simple-io-funcs.cc	/^bool WriteIntegerVectorSimple(std::string wxfilename, const std::vector<int32> &list) {$/;"	f	namespace:kaldi
WriteIntegerVectorVectorSimple	simple-io-funcs.cc	/^bool WriteIntegerVectorVectorSimple(std::string wxfilename, const std::vector<std::vector<int32> > &list) {$/;"	f	namespace:kaldi
WriteKaldiObject	kaldi-io.h	/^template <class C> inline void WriteKaldiObject(const C &c,$/;"	f	namespace:kaldi
WriteScriptFile	kaldi-table.cc	/^bool WriteScriptFile(const std::string &wxfilename,$/;"	f	namespace:kaldi
WriteScriptFile	kaldi-table.cc	/^bool WriteScriptFile(std::ostream &os,$/;"	f	namespace:kaldi
WspecifierOptions	kaldi-table.h	/^  WspecifierOptions(): binary(true), flush(false) { }$/;"	f	struct:kaldi::WspecifierOptions
WspecifierOptions	kaldi-table.h	/^struct WspecifierOptions {$/;"	s	namespace:kaldi
WspecifierType	kaldi-table.h	/^enum WspecifierType  {$/;"	g	namespace:kaldi
allocate_block_size_	hash-list.h	/^  static const size_t allocate_block_size_ = 1024;  \/\/ Number of Elements to allocate in one block.  Must be$/;"	m	class:kaldi::HashList
allocated_	hash-list.h	/^  std::vector<Elem*> allocated_;  \/\/ list of allocated blocks.$/;"	m	class:kaldi::HashList
archive_output_	kaldi-table-inl.h	/^  Output archive_output_;$/;"	m	class:kaldi::TableWriterBothImpl
archive_rxfilename_	kaldi-table-inl.h	/^  std::string archive_rxfilename_;$/;"	m	class:kaldi::RandomAccessTableReaderArchiveImplBase
archive_rxfilename_	kaldi-table-inl.h	/^  std::string archive_rxfilename_;$/;"	m	class:kaldi::SequentialTableReaderArchiveImpl
archive_wxfilename_	kaldi-table-inl.h	/^  std::string archive_wxfilename_;$/;"	m	class:kaldi::TableWriterArchiveImpl
archive_wxfilename_	kaldi-table-inl.h	/^  std::string archive_wxfilename_;$/;"	m	class:kaldi::TableWriterBothImpl
argc_	parse-options.h	/^  int argc_;$/;"	m	class:kaldi::ParseOptions
argv_	parse-options.h	/^  const char*const *argv_;$/;"	m	class:kaldi::ParseOptions
basic_pipebuf	kaldi-pipebuf.h	/^  basic_pipebuf(FILE *fptr, std::ios_base::openmode mode)$/;"	f	class:kaldi::basic_pipebuf
basic_pipebuf	kaldi-pipebuf.h	/^class basic_pipebuf : public std::basic_filebuf<CharType, Traits>$/;"	c	namespace:kaldi
begin	const-integer-set.h	/^  iterator begin() const { return slow_set_.begin(); }$/;"	f	class:kaldi::ConstIntegerSet
binary	kaldi-table.h	/^  bool binary;$/;"	m	struct:kaldi::WspecifierOptions
binary_	kaldi-io.cc	/^  bool binary_;  \/\/ true if was opened in binary mode.$/;"	m	class:kaldi::OffsetFileInputImpl	file:
binary_	kaldi-table-inl.h	/^  bool binary_;  \/\/ Binary-mode archive.$/;"	m	class:kaldi::SequentialTableReaderScriptImpl
bool_map_	parse-options.h	/^  std::map<std::string, bool*> bool_map_;$/;"	m	class:kaldi::ParseOptions
bucket_list_tail_	hash-list.h	/^  size_t bucket_list_tail_;  \/\/ tail of list of active hash buckets.$/;"	m	class:kaldi::HashList
buckets_	hash-list.h	/^  std::vector<HashBucket> buckets_;$/;"	m	class:kaldi::HashList
called_sorted	kaldi-table.h	/^  bool called_sorted;  \/\/ we assert that the (HasKey(), Value() functions will$/;"	m	struct:kaldi::RspecifierOptions
config_	parse-options.h	/^  std::string config_;  \/\/\/< variable for the implicit --config parameter$/;"	m	class:kaldi::ParseOptions
contiguous_	const-integer-set.h	/^  bool contiguous_;$/;"	m	class:kaldi::ConstIntegerSet
count	const-integer-set-inl.h	/^int ConstIntegerSet<I>::count(I i) const {$/;"	f	class:kaldi::ConstIntegerSet
cur_key_	kaldi-table-inl.h	/^  std::string cur_key_;   \/\/ current key (if state == kHaveObject).$/;"	m	class:kaldi::RandomAccessTableReaderArchiveImplBase
current_key_	kaldi-table-inl.h	/^  std::string current_key_;  \/\/ Key of object in holder_$/;"	m	class:kaldi::RandomAccessTableReaderScriptImpl
data_input_	kaldi-table-inl.h	/^  Input data_input_;   \/\/ Input object for the entries in$/;"	m	class:kaldi::SequentialTableReaderScriptImpl
data_rxfilename_	kaldi-table-inl.h	/^  std::string data_rxfilename_;  \/\/ of the file we're reading.$/;"	m	class:kaldi::SequentialTableReaderScriptImpl
del_num	edit-distance-inl.h	/^  int32 del_num;$/;"	m	struct:kaldi::error_stats
doc_map_	parse-options.h	/^  DocMapType doc_map_;  \/\/\/< map for the documentation$/;"	m	class:kaldi::ParseOptions
double_map_	parse-options.h	/^  std::map<std::string, double*> double_map_;$/;"	m	class:kaldi::ParseOptions
empty	const-integer-set.h	/^  bool empty() const { return slow_set_.empty(); }$/;"	f	class:kaldi::ConstIntegerSet
end	const-integer-set.h	/^  iterator end() const { return slow_set_.end(); }$/;"	f	class:kaldi::ConstIntegerSet
error_stats	edit-distance-inl.h	/^struct error_stats{$/;"	s	namespace:kaldi
f_	kaldi-io.cc	/^  FILE *f_;$/;"	m	class:kaldi::PipeInputImpl	file:
f_	kaldi-io.cc	/^  FILE *f_;$/;"	m	class:kaldi::PipeOutputImpl	file:
fb_	kaldi-io.cc	/^  PipebufType *fb_;$/;"	m	class:kaldi::PipeInputImpl	file:
fb_	kaldi-io.cc	/^  PipebufType *fb_;$/;"	m	class:kaldi::PipeOutputImpl	file:
feats_	kaldi-holder-inl.h	/^  T feats_;$/;"	m	class:kaldi::SphinxMatrixHolder
filename_	kaldi-io.cc	/^  std::string filename_;  \/\/ the actual filename$/;"	m	class:kaldi::OffsetFileInputImpl	file:
filename_	kaldi-io.cc	/^  std::string filename_;$/;"	m	class:kaldi::FileOutputImpl	file:
filename_	kaldi-io.cc	/^  std::string filename_;$/;"	m	class:kaldi::PipeInputImpl	file:
filename_	kaldi-io.cc	/^  std::string filename_;$/;"	m	class:kaldi::PipeOutputImpl	file:
filename_	kaldi-io.h	/^  std::string filename_;$/;"	m	class:kaldi::Output
first_deleted_string_	kaldi-table-inl.h	/^  std::string first_deleted_string_;  \/\/ keep the first string we deleted$/;"	m	class:kaldi::RandomAccessTableReaderUnsortedArchiveImpl
float_map_	parse-options.h	/^  std::map<std::string, float*> float_map_;$/;"	m	class:kaldi::ParseOptions
flush	kaldi-table.h	/^  bool flush;$/;"	m	struct:kaldi::WspecifierOptions
freed_head_	hash-list.h	/^  Elem *freed_head_;  \/\/ head of list of currently freed elements. [ready for allocation]$/;"	m	class:kaldi::HashList
hash_size_	hash-list.h	/^  size_t hash_size_;  \/\/ number of hash buckets.$/;"	m	class:kaldi::HashList
help_	parse-options.h	/^  bool help_;           \/\/\/< variable for the implicit --help parameter$/;"	m	class:kaldi::ParseOptions
highest_member_	const-integer-set.h	/^  I highest_member_;$/;"	m	class:kaldi::ConstIntegerSet
holder_	kaldi-table-inl.h	/^  Holder *holder_;     \/\/ Holds the object we just read (if state == kHaveObject)$/;"	m	class:kaldi::RandomAccessTableReaderArchiveImplBase
holder_	kaldi-table-inl.h	/^  Holder holder_;     \/\/ Holds the object.$/;"	m	class:kaldi::SequentialTableReaderArchiveImpl
holder_	kaldi-table-inl.h	/^  Holder holder_;  \/\/ Holds the object.$/;"	m	class:kaldi::SequentialTableReaderScriptImpl
holder_	kaldi-table-inl.h	/^  Holder holder_;$/;"	m	class:kaldi::RandomAccessTableReaderScriptImpl
impl_	kaldi-io.h	/^  InputImplBase *impl_;$/;"	m	class:kaldi::Input
impl_	kaldi-io.h	/^  OutputImplBase *impl_;  \/\/ non-NULL if open.$/;"	m	class:kaldi::Output
impl_	kaldi-table.h	/^  RandomAccessTableReaderImplBase<Holder> *impl_;$/;"	m	class:kaldi::RandomAccessTableReader
impl_	kaldi-table.h	/^  SequentialTableReaderImplBase<Holder> *impl_;$/;"	m	class:kaldi::SequentialTableReader
impl_	kaldi-table.h	/^  TableWriterImplBase<Holder> *impl_;$/;"	m	class:kaldi::TableWriter
input_	kaldi-table-inl.h	/^  Input input_;       \/\/ Input object for the archive$/;"	m	class:kaldi::RandomAccessTableReaderArchiveImplBase
input_	kaldi-table-inl.h	/^  Input input_;  \/\/ Input object for the archive$/;"	m	class:kaldi::SequentialTableReaderArchiveImpl
input_	kaldi-table-inl.h	/^  Input input_;  \/\/ Use the same input_ object for reading each file, in case$/;"	m	class:kaldi::RandomAccessTableReaderScriptImpl
ins_num	edit-distance-inl.h	/^  int32 ins_num;$/;"	m	struct:kaldi::error_stats
int_map_	parse-options.h	/^  std::map<std::string, int32*> int_map_;$/;"	m	class:kaldi::ParseOptions
is_	kaldi-io.cc	/^  std::ifstream is_;$/;"	m	class:kaldi::FileInputImpl	file:
is_	kaldi-io.cc	/^  std::ifstream is_;$/;"	m	class:kaldi::OffsetFileInputImpl	file:
is_	kaldi-io.cc	/^  std::istream *is_;$/;"	m	class:kaldi::PipeInputImpl	file:
is_open_	kaldi-io.cc	/^  bool is_open_;$/;"	m	class:kaldi::StandardInputImpl	file:
is_open_	kaldi-io.cc	/^  bool is_open_;$/;"	m	class:kaldi::StandardOutputImpl	file:
is_standard_	parse-options.h	/^    bool is_standard_;$/;"	m	struct:kaldi::ParseOptions::DocInfo
iterator	const-integer-set.h	/^  typedef typename std::vector<I>::const_iterator iterator;$/;"	t	class:kaldi::ConstIntegerSet
kArchiveRspecifier	kaldi-table.h	/^  kArchiveRspecifier,$/;"	e	enum:kaldi::RspecifierType
kArchiveWspecifier	kaldi-table.h	/^  kArchiveWspecifier,$/;"	e	enum:kaldi::WspecifierType
kBash	parse-options.cc	/^enum ShellType { kBash = 0 };  \/\/ We currently do not support any$/;"	e	enum:kaldi::ShellType	file:
kBothWspecifier	kaldi-table.h	/^  kBothWspecifier$/;"	e	enum:kaldi::WspecifierType
kEof	kaldi-table-inl.h	/^    kEof,           \/\/ End of file                                 no         yes$/;"	e	enum:kaldi::RandomAccessTableReaderArchiveImplBase::__anon6
kEof	kaldi-table-inl.h	/^    kEof,     \/\/ We did Next() and found eof in archive            no         no$/;"	e	enum:kaldi::SequentialTableReaderArchiveImpl::__anon1
kEof	kaldi-table-inl.h	/^    kEof,     \/\/ We did Next() and found eof in script file.       no         no$/;"	e	enum:kaldi::SequentialTableReaderScriptImpl::StateType
kError	kaldi-table-inl.h	/^    kError,         \/\/ Some kind of error-state in the reading.    no         yes$/;"	e	enum:kaldi::RandomAccessTableReaderArchiveImplBase::__anon6
kError	kaldi-table-inl.h	/^    kError,   \/\/ Some other error                                  no         no$/;"	e	enum:kaldi::SequentialTableReaderArchiveImpl::__anon1
kError	kaldi-table-inl.h	/^    kError,   \/\/ Some other error                                  no         yes$/;"	e	enum:kaldi::SequentialTableReaderScriptImpl::StateType
kFileInput	kaldi-io.h	/^  kFileInput,$/;"	e	enum:kaldi::InputType
kFileOutput	kaldi-io.h	/^  kFileOutput,$/;"	e	enum:kaldi::OutputType
kFileStart	kaldi-table-inl.h	/^    kFileStart,        \/\/ [state we only use internally]           no         yes$/;"	e	enum:kaldi::SequentialTableReaderScriptImpl::StateType
kFileStart	kaldi-table-inl.h	/^    kFileStart,      \/\/ [state we use internally: just opened.]    no         yes$/;"	e	enum:kaldi::SequentialTableReaderArchiveImpl::__anon1
kFreedObject	kaldi-table-inl.h	/^    kFreedObject,  \/\/ The user called FreeCurrent().                no         yes$/;"	e	enum:kaldi::SequentialTableReaderArchiveImpl::__anon1
kGaveObject	kaldi-table-inl.h	/^    kGaveObject,   \/\/     yes                    yes$/;"	e	enum:kaldi::RandomAccessTableReaderScriptImpl::__anon5
kHaveObject	kaldi-table-inl.h	/^    kHaveObject,    \/\/ Have object in holder_                      yes        yes$/;"	e	enum:kaldi::RandomAccessTableReaderArchiveImplBase::__anon6
kHaveObject	kaldi-table-inl.h	/^    kHaveObject,   \/\/     yes                    yes$/;"	e	enum:kaldi::RandomAccessTableReaderScriptImpl::__anon5
kHaveObject	kaldi-table-inl.h	/^    kHaveObject,  \/\/ We read the key and the object after it.       yes        yes$/;"	e	enum:kaldi::SequentialTableReaderArchiveImpl::__anon1
kHaveScpLine	kaldi-table-inl.h	/^    kHaveScpLine,  \/\/ Just called Open() or Next() and have a       no         yes$/;"	e	enum:kaldi::SequentialTableReaderScriptImpl::StateType
kLoadFailed	kaldi-table-inl.h	/^    kLoadFailed,  \/\/ Called LoadCurrent() and it failed,           no         yes$/;"	e	enum:kaldi::SequentialTableReaderScriptImpl::StateType
kLoadSucceeded	kaldi-table-inl.h	/^    kLoadSucceeded,  \/\/ Called LoadCurrent() and it succeeded.     yes         yes$/;"	e	enum:kaldi::SequentialTableReaderScriptImpl::StateType
kNoInput	kaldi-io.h	/^  kNoInput,$/;"	e	enum:kaldi::InputType
kNoObject	kaldi-table-inl.h	/^    kNoObject,      \/\/ Do not have object in holder_               no         yes$/;"	e	enum:kaldi::RandomAccessTableReaderArchiveImplBase::__anon6
kNoOutput	kaldi-io.h	/^  kNoOutput,$/;"	e	enum:kaldi::OutputType
kNoRspecifier	kaldi-table.h	/^  kNoRspecifier,$/;"	e	enum:kaldi::RspecifierType
kNoWspecifier	kaldi-table.h	/^  kNoWspecifier,$/;"	e	enum:kaldi::WspecifierType
kNotHaveObject	kaldi-table-inl.h	/^    kNotHaveObject,  \/\/     yes                    no$/;"	e	enum:kaldi::RandomAccessTableReaderScriptImpl::__anon5
kNotReadScript	kaldi-table-inl.h	/^    kNotReadScript,  \/\/     no                     no$/;"	e	enum:kaldi::RandomAccessTableReaderScriptImpl::__anon5
kNotReadScript	kaldi-table-inl.h	/^    kNotReadScript,  \/\/ read of script failed.$/;"	e	enum:kaldi::TableWriterScriptImpl::__anon3
kOffsetFileInput	kaldi-io.h	/^  kOffsetFileInput,$/;"	e	enum:kaldi::InputType
kOpen	kaldi-table-inl.h	/^    kOpen,             \/\/ yes$/;"	e	enum:kaldi::TableWriterArchiveImpl::__anon2
kOpen	kaldi-table-inl.h	/^    kOpen,             \/\/ yes$/;"	e	enum:kaldi::TableWriterBothImpl::__anon4
kPipeInput	kaldi-io.h	/^  kPipeInput$/;"	e	enum:kaldi::InputType
kPipeOutput	kaldi-io.h	/^  kPipeOutput$/;"	e	enum:kaldi::OutputType
kPrime	stl-utils.h	/^  static const int kPrime = 7853;$/;"	m	struct:kaldi::PairHasher
kPrime	stl-utils.h	/^  static const int kPrime = 7853;$/;"	m	struct:kaldi::StringHasher
kPrime	stl-utils.h	/^  static const int kPrime = 7853;$/;"	m	struct:kaldi::VectorHasher
kReadScript	kaldi-table-inl.h	/^    kReadScript,$/;"	e	enum:kaldi::TableWriterScriptImpl::__anon3
kScriptRspecifier	kaldi-table.h	/^  kScriptRspecifier$/;"	e	enum:kaldi::RspecifierType
kScriptWspecifier	kaldi-table.h	/^  kScriptWspecifier,$/;"	e	enum:kaldi::WspecifierType
kShellType	parse-options.cc	/^static ShellType kShellType = kBash;  \/\/ This can be changed in the$/;"	m	namespace:kaldi	file:
kStandardInput	kaldi-io.h	/^  kStandardInput,$/;"	e	enum:kaldi::InputType
kStandardOutput	kaldi-io.h	/^  kStandardOutput,$/;"	e	enum:kaldi::OutputType
kUninitialized	kaldi-table-inl.h	/^    kUninitialized,    \/\/ no$/;"	e	enum:kaldi::TableWriterArchiveImpl::__anon2
kUninitialized	kaldi-table-inl.h	/^    kUninitialized,    \/\/ no$/;"	e	enum:kaldi::TableWriterBothImpl::__anon4
kUninitialized	kaldi-table-inl.h	/^    kUninitialized,  \/\/     no                     no$/;"	e	enum:kaldi::RandomAccessTableReaderScriptImpl::__anon5
kUninitialized	kaldi-table-inl.h	/^    kUninitialized,  \/\/ Uninitialized or closed                     no         no$/;"	e	enum:kaldi::RandomAccessTableReaderArchiveImplBase::__anon6
kUninitialized	kaldi-table-inl.h	/^    kUninitialized,  \/\/ Uninitialized or closed.                    no         no$/;"	e	enum:kaldi::SequentialTableReaderArchiveImpl::__anon1
kUninitialized	kaldi-table-inl.h	/^    kUninitialized,  \/\/ Uninitialized or closed.                    no         no$/;"	e	enum:kaldi::SequentialTableReaderScriptImpl::StateType
kUninitialized	kaldi-table-inl.h	/^    kUninitialized,$/;"	e	enum:kaldi::TableWriterScriptImpl::__anon3
kWriteError	kaldi-table-inl.h	/^    kWriteError,       \/\/ yes$/;"	e	enum:kaldi::TableWriterArchiveImpl::__anon2
kWriteError	kaldi-table-inl.h	/^    kWriteError,       \/\/ yes$/;"	e	enum:kaldi::TableWriterBothImpl::__anon4
kaldi	const-integer-set-inl.h	/^namespace kaldi {$/;"	n
kaldi	const-integer-set-test.cc	/^namespace kaldi {$/;"	n	file:
kaldi	const-integer-set.h	/^namespace kaldi {$/;"	n
kaldi	edit-distance-inl.h	/^namespace kaldi {$/;"	n
kaldi	edit-distance-test.cc	/^namespace kaldi {$/;"	n	file:
kaldi	edit-distance.h	/^namespace kaldi {$/;"	n
kaldi	hash-list-inl.h	/^namespace kaldi {$/;"	n
kaldi	hash-list-test.cc	/^namespace kaldi {$/;"	n	file:
kaldi	hash-list.h	/^namespace kaldi {$/;"	n
kaldi	kaldi-holder-inl.h	/^namespace kaldi {$/;"	n
kaldi	kaldi-holder.h	/^namespace kaldi {$/;"	n
kaldi	kaldi-io-inl.h	/^namespace kaldi {$/;"	n
kaldi	kaldi-io-test.cc	/^namespace kaldi {$/;"	n	file:
kaldi	kaldi-io.cc	/^namespace kaldi {$/;"	n	file:
kaldi	kaldi-io.h	/^namespace kaldi {$/;"	n
kaldi	kaldi-pipebuf.h	/^namespace kaldi$/;"	n
kaldi	kaldi-table-inl.h	/^namespace kaldi {$/;"	n
kaldi	kaldi-table-test.cc	/^namespace kaldi {$/;"	n	file:
kaldi	kaldi-table.cc	/^namespace kaldi {$/;"	n	file:
kaldi	kaldi-table.h	/^namespace kaldi {$/;"	n
kaldi	parse-options-test.cc	/^namespace kaldi {$/;"	n	file:
kaldi	parse-options.cc	/^namespace kaldi {$/;"	n	file:
kaldi	parse-options.h	/^namespace kaldi {$/;"	n
kaldi	simple-io-funcs.cc	/^namespace kaldi {$/;"	n	file:
kaldi	simple-io-funcs.h	/^namespace kaldi {$/;"	n
kaldi	stl-utils-test.cc	/^namespace kaldi {$/;"	n	file:
kaldi	stl-utils.h	/^namespace kaldi {$/;"	n
kaldi	table-types.h	/^namespace kaldi {$/;"	n
kaldi	text-utils-test.cc	/^namespace kaldi {$/;"	n	file:
kaldi	text-utils.cc	/^namespace kaldi {$/;"	n	file:
kaldi	text-utils.h	/^namespace kaldi {$/;"	n
kaldi	timer-test.cc	/^namespace kaldi {$/;"	n	file:
kaldi	timer.h	/^namespace kaldi$/;"	n
kaldi::BaseFloatMatrixWriter	table-types.h	/^typedef TableWriter<KaldiObjectHolder<Matrix<BaseFloat> > >  BaseFloatMatrixWriter;$/;"	t	namespace:kaldi
kaldi::BaseFloatPairVectorWriter	table-types.h	/^typedef TableWriter<BasicPairVectorHolder<BaseFloat> >  BaseFloatPairVectorWriter;$/;"	t	namespace:kaldi
kaldi::BaseFloatVectorWriter	table-types.h	/^typedef TableWriter<KaldiObjectHolder<Vector<BaseFloat> > >  BaseFloatVectorWriter;$/;"	t	namespace:kaldi
kaldi::BaseFloatWriter	table-types.h	/^typedef TableWriter<BasicHolder<BaseFloat> >  BaseFloatWriter;$/;"	t	namespace:kaldi
kaldi::BasicHolder	kaldi-holder-inl.h	/^template<class BasicType> class BasicHolder {$/;"	c	namespace:kaldi
kaldi::BasicHolder::BasicHolder	kaldi-holder-inl.h	/^  BasicHolder(): t_(static_cast<T>(-1)) { }$/;"	f	class:kaldi::BasicHolder
kaldi::BasicHolder::Clear	kaldi-holder-inl.h	/^  void Clear() { }$/;"	f	class:kaldi::BasicHolder
kaldi::BasicHolder::IsReadInBinary	kaldi-holder-inl.h	/^  static bool IsReadInBinary() { return true; }$/;"	f	class:kaldi::BasicHolder
kaldi::BasicHolder::Read	kaldi-holder-inl.h	/^  bool Read(std::istream &is) {$/;"	f	class:kaldi::BasicHolder
kaldi::BasicHolder::T	kaldi-holder-inl.h	/^  typedef BasicType T;$/;"	t	class:kaldi::BasicHolder
kaldi::BasicHolder::Value	kaldi-holder-inl.h	/^  const T &Value() const {$/;"	f	class:kaldi::BasicHolder
kaldi::BasicHolder::Write	kaldi-holder-inl.h	/^  static bool Write(std::ostream &os, bool binary, const T &t) {$/;"	f	class:kaldi::BasicHolder
kaldi::BasicHolder::t_	kaldi-holder-inl.h	/^  T t_;$/;"	m	class:kaldi::BasicHolder
kaldi::BasicHolder::~BasicHolder	kaldi-holder-inl.h	/^  ~BasicHolder() { }$/;"	f	class:kaldi::BasicHolder
kaldi::BasicPairVectorHolder	kaldi-holder-inl.h	/^template<class BasicType> class BasicPairVectorHolder {$/;"	c	namespace:kaldi
kaldi::BasicPairVectorHolder::BasicPairVectorHolder	kaldi-holder-inl.h	/^  BasicPairVectorHolder() { }$/;"	f	class:kaldi::BasicPairVectorHolder
kaldi::BasicPairVectorHolder::Clear	kaldi-holder-inl.h	/^  void Clear() { t_.clear(); }$/;"	f	class:kaldi::BasicPairVectorHolder
kaldi::BasicPairVectorHolder::IsReadInBinary	kaldi-holder-inl.h	/^  static bool IsReadInBinary() { return true; }$/;"	f	class:kaldi::BasicPairVectorHolder
kaldi::BasicPairVectorHolder::Read	kaldi-holder-inl.h	/^  bool Read(std::istream &is) {$/;"	f	class:kaldi::BasicPairVectorHolder
kaldi::BasicPairVectorHolder::T	kaldi-holder-inl.h	/^  typedef std::vector<std::pair<BasicType, BasicType> > T;$/;"	t	class:kaldi::BasicPairVectorHolder
kaldi::BasicPairVectorHolder::Value	kaldi-holder-inl.h	/^  const T &Value() const {  return t_; }$/;"	f	class:kaldi::BasicPairVectorHolder
kaldi::BasicPairVectorHolder::Write	kaldi-holder-inl.h	/^  static bool Write(std::ostream &os, bool binary, const T &t) {$/;"	f	class:kaldi::BasicPairVectorHolder
kaldi::BasicPairVectorHolder::t_	kaldi-holder-inl.h	/^  T t_;$/;"	m	class:kaldi::BasicPairVectorHolder
kaldi::BasicPairVectorHolder::~BasicPairVectorHolder	kaldi-holder-inl.h	/^  ~BasicPairVectorHolder() { }$/;"	f	class:kaldi::BasicPairVectorHolder
kaldi::BasicVectorHolder	kaldi-holder-inl.h	/^template<class BasicType> class BasicVectorHolder {$/;"	c	namespace:kaldi
kaldi::BasicVectorHolder::BasicVectorHolder	kaldi-holder-inl.h	/^  BasicVectorHolder() { }$/;"	f	class:kaldi::BasicVectorHolder
kaldi::BasicVectorHolder::Clear	kaldi-holder-inl.h	/^  void Clear() { t_.clear(); }$/;"	f	class:kaldi::BasicVectorHolder
kaldi::BasicVectorHolder::IsReadInBinary	kaldi-holder-inl.h	/^  static bool IsReadInBinary() { return true; }$/;"	f	class:kaldi::BasicVectorHolder
kaldi::BasicVectorHolder::Read	kaldi-holder-inl.h	/^  bool Read(std::istream &is) {$/;"	f	class:kaldi::BasicVectorHolder
kaldi::BasicVectorHolder::T	kaldi-holder-inl.h	/^  typedef std::vector<BasicType> T;$/;"	t	class:kaldi::BasicVectorHolder
kaldi::BasicVectorHolder::Value	kaldi-holder-inl.h	/^  const T &Value() const {  return t_; }$/;"	f	class:kaldi::BasicVectorHolder
kaldi::BasicVectorHolder::Write	kaldi-holder-inl.h	/^  static bool Write(std::ostream &os, bool binary, const T &t) {$/;"	f	class:kaldi::BasicVectorHolder
kaldi::BasicVectorHolder::t_	kaldi-holder-inl.h	/^  T t_;$/;"	m	class:kaldi::BasicVectorHolder
kaldi::BasicVectorHolder::~BasicVectorHolder	kaldi-holder-inl.h	/^  ~BasicVectorHolder() { }$/;"	f	class:kaldi::BasicVectorHolder
kaldi::BasicVectorVectorHolder	kaldi-holder-inl.h	/^template<class BasicType> class BasicVectorVectorHolder {$/;"	c	namespace:kaldi
kaldi::BasicVectorVectorHolder::BasicVectorVectorHolder	kaldi-holder-inl.h	/^  BasicVectorVectorHolder() { }$/;"	f	class:kaldi::BasicVectorVectorHolder
kaldi::BasicVectorVectorHolder::Clear	kaldi-holder-inl.h	/^  void Clear() { t_.clear(); }$/;"	f	class:kaldi::BasicVectorVectorHolder
kaldi::BasicVectorVectorHolder::IsReadInBinary	kaldi-holder-inl.h	/^  static bool IsReadInBinary() { return true; }$/;"	f	class:kaldi::BasicVectorVectorHolder
kaldi::BasicVectorVectorHolder::Read	kaldi-holder-inl.h	/^  bool Read(std::istream &is) {$/;"	f	class:kaldi::BasicVectorVectorHolder
kaldi::BasicVectorVectorHolder::T	kaldi-holder-inl.h	/^  typedef std::vector<std::vector<BasicType> > T;$/;"	t	class:kaldi::BasicVectorVectorHolder
kaldi::BasicVectorVectorHolder::Value	kaldi-holder-inl.h	/^  const T &Value() const {  return t_; }$/;"	f	class:kaldi::BasicVectorVectorHolder
kaldi::BasicVectorVectorHolder::Write	kaldi-holder-inl.h	/^  static bool Write(std::ostream &os, bool binary, const T &t) {$/;"	f	class:kaldi::BasicVectorVectorHolder
kaldi::BasicVectorVectorHolder::t_	kaldi-holder-inl.h	/^  T t_;$/;"	m	class:kaldi::BasicVectorVectorHolder
kaldi::BasicVectorVectorHolder::~BasicVectorVectorHolder	kaldi-holder-inl.h	/^  ~BasicVectorVectorHolder() { }$/;"	f	class:kaldi::BasicVectorVectorHolder
kaldi::BoolWriter	table-types.h	/^typedef TableWriter<BasicHolder<bool> >  BoolWriter;$/;"	t	namespace:kaldi
kaldi::ClassifyRspecifier	kaldi-table.cc	/^RspecifierType ClassifyRspecifier(const std::string &rspecifier,$/;"	f	namespace:kaldi
kaldi::ClassifyRxfilename	kaldi-io.cc	/^InputType ClassifyRxfilename(const std::string &filename) {$/;"	f	namespace:kaldi
kaldi::ClassifyWspecifier	kaldi-table.cc	/^WspecifierType ClassifyWspecifier(const std::string &wspecifier,$/;"	f	namespace:kaldi
kaldi::ClassifyWxfilename	kaldi-io.cc	/^OutputType ClassifyWxfilename(const std::string &filename) {$/;"	f	namespace:kaldi
kaldi::CompareFirstMemberOfPair	stl-utils.h	/^struct CompareFirstMemberOfPair {$/;"	s	namespace:kaldi
kaldi::CompareFirstMemberOfPair::operator ()	stl-utils.h	/^  inline bool operator() (const std::pair<A, B> &p1,$/;"	f	struct:kaldi::CompareFirstMemberOfPair
kaldi::ConstIntegerSet	const-integer-set.h	/^template<class I> class ConstIntegerSet {$/;"	c	namespace:kaldi
kaldi::ConstIntegerSet::ConstIntegerSet	const-integer-set.h	/^  ConstIntegerSet(): lowest_member_(1), highest_member_(0) { }$/;"	f	class:kaldi::ConstIntegerSet
kaldi::ConstIntegerSet::ConstIntegerSet	const-integer-set.h	/^  explicit ConstIntegerSet(const ConstIntegerSet<I> &other): slow_set_(other.slow_set_) {$/;"	f	class:kaldi::ConstIntegerSet
kaldi::ConstIntegerSet::ConstIntegerSet	const-integer-set.h	/^  explicit ConstIntegerSet(const std::set<I> &input) {$/;"	f	class:kaldi::ConstIntegerSet
kaldi::ConstIntegerSet::ConstIntegerSet	const-integer-set.h	/^  explicit ConstIntegerSet(const std::vector<I> &input): slow_set_(input) {$/;"	f	class:kaldi::ConstIntegerSet
kaldi::ConstIntegerSet::Init	const-integer-set.h	/^  void Init(const std::set<I> &input) {$/;"	f	class:kaldi::ConstIntegerSet
kaldi::ConstIntegerSet::Init	const-integer-set.h	/^  void Init(const std::vector<I> &input) {$/;"	f	class:kaldi::ConstIntegerSet
kaldi::ConstIntegerSet::InitInternal	const-integer-set-inl.h	/^void ConstIntegerSet<I>::InitInternal() {$/;"	f	class:kaldi::ConstIntegerSet
kaldi::ConstIntegerSet::Read	const-integer-set-inl.h	/^void ConstIntegerSet<I>::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::ConstIntegerSet
kaldi::ConstIntegerSet::Write	const-integer-set-inl.h	/^void ConstIntegerSet<I>::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::ConstIntegerSet
kaldi::ConstIntegerSet::begin	const-integer-set.h	/^  iterator begin() const { return slow_set_.begin(); }$/;"	f	class:kaldi::ConstIntegerSet
kaldi::ConstIntegerSet::contiguous_	const-integer-set.h	/^  bool contiguous_;$/;"	m	class:kaldi::ConstIntegerSet
kaldi::ConstIntegerSet::count	const-integer-set-inl.h	/^int ConstIntegerSet<I>::count(I i) const {$/;"	f	class:kaldi::ConstIntegerSet
kaldi::ConstIntegerSet::empty	const-integer-set.h	/^  bool empty() const { return slow_set_.empty(); }$/;"	f	class:kaldi::ConstIntegerSet
kaldi::ConstIntegerSet::end	const-integer-set.h	/^  iterator end() const { return slow_set_.end(); }$/;"	f	class:kaldi::ConstIntegerSet
kaldi::ConstIntegerSet::highest_member_	const-integer-set.h	/^  I highest_member_;$/;"	m	class:kaldi::ConstIntegerSet
kaldi::ConstIntegerSet::iterator	const-integer-set.h	/^  typedef typename std::vector<I>::const_iterator iterator;$/;"	t	class:kaldi::ConstIntegerSet
kaldi::ConstIntegerSet::lowest_member_	const-integer-set.h	/^  I lowest_member_;$/;"	m	class:kaldi::ConstIntegerSet
kaldi::ConstIntegerSet::quick_	const-integer-set.h	/^  bool quick_;$/;"	m	class:kaldi::ConstIntegerSet
kaldi::ConstIntegerSet::quick_set_	const-integer-set.h	/^  std::vector<bool> quick_set_;$/;"	m	class:kaldi::ConstIntegerSet
kaldi::ConstIntegerSet::size	const-integer-set.h	/^  size_t size() const { return slow_set_.size(); }$/;"	f	class:kaldi::ConstIntegerSet
kaldi::ConstIntegerSet::slow_set_	const-integer-set.h	/^  std::vector<I> slow_set_;$/;"	m	class:kaldi::ConstIntegerSet
kaldi::ContainsNullPointers	stl-utils.h	/^bool ContainsNullPointers(const std::vector<A*> &v) {$/;"	f	namespace:kaldi
kaldi::ConvertStringToInteger	text-utils.h	/^bool ConvertStringToInteger(const std::string &str,$/;"	f	namespace:kaldi
kaldi::ConvertStringToReal	text-utils.cc	/^bool ConvertStringToReal(const std::string &str,$/;"	f	namespace:kaldi
kaldi::CopyMapKeysToSet	stl-utils.h	/^void CopyMapKeysToSet(const std::map<A, B> &m, std::set<A> *s) {$/;"	f	namespace:kaldi
kaldi::CopyMapKeysToVector	stl-utils.h	/^void CopyMapKeysToVector(const std::map<A, B> &m, std::vector<A> *v) {$/;"	f	namespace:kaldi
kaldi::CopyMapToVector	stl-utils.h	/^void CopyMapToVector(const std::map<A, B> &m,$/;"	f	namespace:kaldi
kaldi::CopyMapValuesToSet	stl-utils.h	/^void CopyMapValuesToSet(const std::map<A, B> &m, std::set<B> *s) {$/;"	f	namespace:kaldi
kaldi::CopyMapValuesToVector	stl-utils.h	/^void CopyMapValuesToVector(const std::map<A, B> &m, std::vector<B> *v) {$/;"	f	namespace:kaldi
kaldi::CopySetToVector	stl-utils.h	/^void CopySetToVector(const std::set<T> &s, std::vector<T> *v) {$/;"	f	namespace:kaldi
kaldi::CopyVectorToSet	stl-utils.h	/^void CopyVectorToSet(const std::vector<A> &v, std::set<A> *s) {$/;"	f	namespace:kaldi
kaldi::CopyVectorToVector	stl-utils.h	/^void CopyVectorToVector(const std::vector<A> &vec_in, std::vector<B> *vec_out) {$/;"	f	namespace:kaldi
kaldi::DeletePointers	stl-utils.h	/^void DeletePointers(std::vector<A*> *v) {$/;"	f	namespace:kaldi
kaldi::DoubleMatrixWriter	table-types.h	/^typedef TableWriter<KaldiObjectHolder<Matrix<double> > >  DoubleMatrixWriter;$/;"	t	namespace:kaldi
kaldi::DoubleVectorWriter	table-types.h	/^typedef TableWriter<KaldiObjectHolder<Vector<double> > >  DoubleVectorWriter;$/;"	t	namespace:kaldi
kaldi::DoubleWriter	table-types.h	/^typedef TableWriter<BasicHolder<double> >  DoubleWriter;$/;"	t	namespace:kaldi
kaldi::FileInputImpl	kaldi-io.cc	/^class FileInputImpl: public InputImplBase {$/;"	c	namespace:kaldi	file:
kaldi::FileInputImpl::Close	kaldi-io.cc	/^  virtual void Close() {$/;"	f	class:kaldi::FileInputImpl
kaldi::FileInputImpl::MyType	kaldi-io.cc	/^  virtual InputType MyType() { return kFileInput; }$/;"	f	class:kaldi::FileInputImpl
kaldi::FileInputImpl::Open	kaldi-io.cc	/^  virtual bool Open(const std::string &filename, bool binary) {$/;"	f	class:kaldi::FileInputImpl
kaldi::FileInputImpl::Stream	kaldi-io.cc	/^  virtual std::istream &Stream() {$/;"	f	class:kaldi::FileInputImpl
kaldi::FileInputImpl::is_	kaldi-io.cc	/^  std::ifstream is_;$/;"	m	class:kaldi::FileInputImpl	file:
kaldi::FileInputImpl::~FileInputImpl	kaldi-io.cc	/^  virtual ~FileInputImpl() {$/;"	f	class:kaldi::FileInputImpl
kaldi::FileOutputImpl	kaldi-io.cc	/^class FileOutputImpl: public OutputImplBase {$/;"	c	namespace:kaldi	file:
kaldi::FileOutputImpl::Close	kaldi-io.cc	/^  virtual bool Close() {$/;"	f	class:kaldi::FileOutputImpl
kaldi::FileOutputImpl::Open	kaldi-io.cc	/^  virtual bool Open(const std::string &filename, bool binary) {$/;"	f	class:kaldi::FileOutputImpl
kaldi::FileOutputImpl::Stream	kaldi-io.cc	/^  virtual std::ostream &Stream() {$/;"	f	class:kaldi::FileOutputImpl
kaldi::FileOutputImpl::filename_	kaldi-io.cc	/^  std::string filename_;$/;"	m	class:kaldi::FileOutputImpl	file:
kaldi::FileOutputImpl::os_	kaldi-io.cc	/^  std::ofstream os_;$/;"	m	class:kaldi::FileOutputImpl	file:
kaldi::FileOutputImpl::~FileOutputImpl	kaldi-io.cc	/^  virtual ~FileOutputImpl() {$/;"	f	class:kaldi::FileOutputImpl
kaldi::GauPost	kaldi-holder.h	/^typedef std::vector<std::vector<std::pair<int32, Vector<BaseFloat> > > > GauPost;$/;"	t	namespace:kaldi
kaldi::GauPostHolder	kaldi-holder-inl.h	/^class GauPostHolder {$/;"	c	namespace:kaldi
kaldi::GauPostHolder::Clear	kaldi-holder-inl.h	/^  void Clear() {  \/\/ free up memory and clear t_.$/;"	f	class:kaldi::GauPostHolder
kaldi::GauPostHolder::GauPostHolder	kaldi-holder-inl.h	/^  GauPostHolder() { }$/;"	f	class:kaldi::GauPostHolder
kaldi::GauPostHolder::IsReadInBinary	kaldi-holder-inl.h	/^  static bool IsReadInBinary() { return true; }$/;"	f	class:kaldi::GauPostHolder
kaldi::GauPostHolder::Read	kaldi-holder-inl.h	/^  bool Read(std::istream &is) {$/;"	f	class:kaldi::GauPostHolder
kaldi::GauPostHolder::T	kaldi-holder-inl.h	/^  typedef GauPost T;$/;"	t	class:kaldi::GauPostHolder
kaldi::GauPostHolder::Value	kaldi-holder-inl.h	/^  const T &Value() const {$/;"	f	class:kaldi::GauPostHolder
kaldi::GauPostHolder::Write	kaldi-holder-inl.h	/^  static bool Write(std::ostream &os, bool binary, const T &t) {$/;"	f	class:kaldi::GauPostHolder
kaldi::GauPostHolder::t_	kaldi-holder-inl.h	/^  T t_;$/;"	m	class:kaldi::GauPostHolder
kaldi::GauPostWriter	table-types.h	/^typedef TableWriter<GauPostHolder> GauPostWriter;$/;"	t	namespace:kaldi
kaldi::GenericHolder	kaldi-holder.h	/^template<class SomeType> class GenericHolder {$/;"	c	namespace:kaldi
kaldi::GenericHolder::Clear	kaldi-holder.h	/^  void Clear() { }$/;"	f	class:kaldi::GenericHolder
kaldi::GenericHolder::GenericHolder	kaldi-holder.h	/^  GenericHolder() { }$/;"	f	class:kaldi::GenericHolder
kaldi::GenericHolder::IsReadInBinary	kaldi-holder.h	/^  static bool IsReadInBinary() { return true; }$/;"	f	class:kaldi::GenericHolder
kaldi::GenericHolder::T	kaldi-holder.h	/^  typedef SomeType T;$/;"	t	class:kaldi::GenericHolder
kaldi::GenericHolder::Value	kaldi-holder.h	/^  const T &Value() const { return t_; } \/\/ if t is a pointer, would return *t_;$/;"	f	class:kaldi::GenericHolder
kaldi::GenericHolder::t_	kaldi-holder.h	/^  T t_;  \/\/ t_ may alternatively be of type T*.$/;"	m	class:kaldi::GenericHolder
kaldi::GenericHolder::~GenericHolder	kaldi-holder.h	/^  ~GenericHolder() { }$/;"	f	class:kaldi::GenericHolder
kaldi::GetRandChar	text-utils-test.cc	/^char GetRandChar() {$/;"	f	namespace:kaldi
kaldi::GetRandDelim	text-utils-test.cc	/^char GetRandDelim() {$/;"	f	namespace:kaldi
kaldi::HashList	hash-list.h	/^template<class I, class T> class HashList {$/;"	c	namespace:kaldi
kaldi::HashList::Clear	hash-list-inl.h	/^typename HashList<I, T>::Elem* HashList<I, T>::Clear() {$/;"	f	class:kaldi::HashList
kaldi::HashList::Delete	hash-list-inl.h	/^inline void HashList<I, T>::Delete(Elem *e) {$/;"	f	class:kaldi::HashList
kaldi::HashList::Elem	hash-list.h	/^  struct Elem {$/;"	s	class:kaldi::HashList
kaldi::HashList::Elem::key	hash-list.h	/^    I key;$/;"	m	struct:kaldi::HashList::Elem
kaldi::HashList::Elem::tail	hash-list.h	/^    Elem *tail;$/;"	m	struct:kaldi::HashList::Elem
kaldi::HashList::Elem::val	hash-list.h	/^    T val;$/;"	m	struct:kaldi::HashList::Elem
kaldi::HashList::Find	hash-list-inl.h	/^inline typename HashList<I, T>::Elem* HashList<I, T>::Find(I key) {$/;"	f	class:kaldi::HashList
kaldi::HashList::GetList	hash-list-inl.h	/^typename HashList<I, T>::Elem* HashList<I, T>::GetList() {$/;"	f	class:kaldi::HashList
kaldi::HashList::HashBucket	hash-list.h	/^  struct HashBucket {$/;"	s	class:kaldi::HashList
kaldi::HashList::HashBucket::HashBucket	hash-list.h	/^    inline HashBucket(size_t i, Elem *e): prev_bucket(i), last_elem(e) {}$/;"	f	struct:kaldi::HashList::HashBucket
kaldi::HashList::HashBucket::last_elem	hash-list.h	/^    Elem *last_elem;  \/\/ pointer to last element in this bucket (NULL if empty)$/;"	m	struct:kaldi::HashList::HashBucket
kaldi::HashList::HashBucket::prev_bucket	hash-list.h	/^    size_t prev_bucket;  \/\/ index to next bucket (-1 if list tail).  Note: list of buckets$/;"	m	struct:kaldi::HashList::HashBucket
kaldi::HashList::HashList	hash-list-inl.h	/^template<class I, class T> HashList<I, T>::HashList() {$/;"	f	class:kaldi::HashList
kaldi::HashList::Insert	hash-list-inl.h	/^void HashList<I, T>::Insert(I key, T val) {$/;"	f	class:kaldi::HashList
kaldi::HashList::InsertMore	hash-list-inl.h	/^void HashList<I, T>::InsertMore(I key, T val) {$/;"	f	class:kaldi::HashList
kaldi::HashList::New	hash-list-inl.h	/^inline typename HashList<I, T>::Elem* HashList<I, T>::New() {$/;"	f	class:kaldi::HashList
kaldi::HashList::SetSize	hash-list-inl.h	/^template<class I, class T> void HashList<I, T>::SetSize(size_t size) {$/;"	f	class:kaldi::HashList
kaldi::HashList::Size	hash-list.h	/^  inline size_t Size() { return hash_size_; }$/;"	f	class:kaldi::HashList
kaldi::HashList::allocate_block_size_	hash-list.h	/^  static const size_t allocate_block_size_ = 1024;  \/\/ Number of Elements to allocate in one block.  Must be$/;"	m	class:kaldi::HashList
kaldi::HashList::allocated_	hash-list.h	/^  std::vector<Elem*> allocated_;  \/\/ list of allocated blocks.$/;"	m	class:kaldi::HashList
kaldi::HashList::bucket_list_tail_	hash-list.h	/^  size_t bucket_list_tail_;  \/\/ tail of list of active hash buckets.$/;"	m	class:kaldi::HashList
kaldi::HashList::buckets_	hash-list.h	/^  std::vector<HashBucket> buckets_;$/;"	m	class:kaldi::HashList
kaldi::HashList::freed_head_	hash-list.h	/^  Elem *freed_head_;  \/\/ head of list of currently freed elements. [ready for allocation]$/;"	m	class:kaldi::HashList
kaldi::HashList::hash_size_	hash-list.h	/^  size_t hash_size_;  \/\/ number of hash buckets.$/;"	m	class:kaldi::HashList
kaldi::HashList::list_head_	hash-list.h	/^  Elem *list_head_;  \/\/ head of currently stored list.$/;"	m	class:kaldi::HashList
kaldi::HashList::~HashList	hash-list-inl.h	/^HashList<I, T>::~HashList() {$/;"	f	class:kaldi::HashList
kaldi::HtkMatrixHolder	kaldi-holder-inl.h	/^class HtkMatrixHolder {$/;"	c	namespace:kaldi
kaldi::HtkMatrixHolder::Clear	kaldi-holder-inl.h	/^  void Clear() { t_.first.Resize(0, 0); }$/;"	f	class:kaldi::HtkMatrixHolder
kaldi::HtkMatrixHolder::HtkMatrixHolder	kaldi-holder-inl.h	/^  HtkMatrixHolder() {}$/;"	f	class:kaldi::HtkMatrixHolder
kaldi::HtkMatrixHolder::IsReadInBinary	kaldi-holder-inl.h	/^  static bool IsReadInBinary() { return true; }$/;"	f	class:kaldi::HtkMatrixHolder
kaldi::HtkMatrixHolder::Read	kaldi-holder-inl.h	/^  bool Read(std::istream &is) {$/;"	f	class:kaldi::HtkMatrixHolder
kaldi::HtkMatrixHolder::T	kaldi-holder-inl.h	/^  typedef std::pair<Matrix<BaseFloat>, HtkHeader> T;$/;"	t	class:kaldi::HtkMatrixHolder
kaldi::HtkMatrixHolder::Value	kaldi-holder-inl.h	/^  const T &Value() const { return t_; }$/;"	f	class:kaldi::HtkMatrixHolder
kaldi::HtkMatrixHolder::Write	kaldi-holder-inl.h	/^  static bool Write(std::ostream &os, bool binary, const T &t) {$/;"	f	class:kaldi::HtkMatrixHolder
kaldi::HtkMatrixHolder::t_	kaldi-holder-inl.h	/^  T t_;$/;"	m	class:kaldi::HtkMatrixHolder
kaldi::Input	kaldi-io.h	/^class Input {$/;"	c	namespace:kaldi
kaldi::Input::Close	kaldi-io.cc	/^void Input::Close() {$/;"	f	class:kaldi::Input
kaldi::Input::Input	kaldi-io.cc	/^Input::Input(const std::string &rxfilename, bool *binary): impl_(NULL) {$/;"	f	class:kaldi::Input
kaldi::Input::Input	kaldi-io.h	/^  Input(): impl_(NULL) {}$/;"	f	class:kaldi::Input
kaldi::Input::IsOpen	kaldi-io-inl.h	/^bool Input::IsOpen() {$/;"	f	class:kaldi::Input
kaldi::Input::Open	kaldi-io-inl.h	/^bool Input::Open(const std::string &rxfilename, bool *binary) {$/;"	f	class:kaldi::Input
kaldi::Input::OpenInternal	kaldi-io.cc	/^bool Input::OpenInternal(const std::string &rxfilename,$/;"	f	class:kaldi::Input
kaldi::Input::OpenTextMode	kaldi-io-inl.h	/^bool Input::OpenTextMode(const std::string &rxfilename) {$/;"	f	class:kaldi::Input
kaldi::Input::Stream	kaldi-io.cc	/^std::istream &Input::Stream() {$/;"	f	class:kaldi::Input
kaldi::Input::impl_	kaldi-io.h	/^  InputImplBase *impl_;$/;"	m	class:kaldi::Input
kaldi::Input::~Input	kaldi-io.cc	/^Input::~Input() { if (impl_) Close(); }$/;"	f	class:kaldi::Input
kaldi::InputImplBase	kaldi-io.cc	/^class InputImplBase {$/;"	c	namespace:kaldi	file:
kaldi::InputImplBase::~InputImplBase	kaldi-io.cc	/^  virtual ~InputImplBase() { }$/;"	f	class:kaldi::InputImplBase
kaldi::InputType	kaldi-io.h	/^enum InputType {$/;"	g	namespace:kaldi
kaldi::Int32PairVectorWriter	table-types.h	/^typedef TableWriter<BasicPairVectorHolder<int32> >  Int32PairVectorWriter;$/;"	t	namespace:kaldi
kaldi::Int32VectorVectorWriter	table-types.h	/^typedef TableWriter<BasicVectorVectorHolder<int32> >  Int32VectorVectorWriter;$/;"	t	namespace:kaldi
kaldi::Int32VectorWriter	table-types.h	/^typedef TableWriter<BasicVectorHolder<int32> >  Int32VectorWriter;$/;"	t	namespace:kaldi
kaldi::Int32Writer	table-types.h	/^typedef TableWriter<BasicHolder<int32> >  Int32Writer;$/;"	t	namespace:kaldi
kaldi::IsLine	text-utils.cc	/^bool IsLine(const std::string &line) {$/;"	f	namespace:kaldi
kaldi::IsSorted	stl-utils.h	/^inline bool IsSorted(const std::vector<T> &vec) {$/;"	f	namespace:kaldi
kaldi::IsSortedAndUniq	stl-utils.h	/^inline bool IsSortedAndUniq(const std::vector<T> &vec) {$/;"	f	namespace:kaldi
kaldi::IsToken	text-utils.cc	/^bool IsToken(const std::string &token) {$/;"	f	namespace:kaldi
kaldi::KaldiObjectHolder	kaldi-holder-inl.h	/^template<class KaldiType> class KaldiObjectHolder {$/;"	c	namespace:kaldi
kaldi::KaldiObjectHolder::Clear	kaldi-holder-inl.h	/^  void Clear() {$/;"	f	class:kaldi::KaldiObjectHolder
kaldi::KaldiObjectHolder::IsReadInBinary	kaldi-holder-inl.h	/^  static bool IsReadInBinary() { return true; }$/;"	f	class:kaldi::KaldiObjectHolder
kaldi::KaldiObjectHolder::KaldiObjectHolder	kaldi-holder-inl.h	/^  KaldiObjectHolder(): t_(NULL) { }$/;"	f	class:kaldi::KaldiObjectHolder
kaldi::KaldiObjectHolder::Read	kaldi-holder-inl.h	/^  bool Read(std::istream &is) {$/;"	f	class:kaldi::KaldiObjectHolder
kaldi::KaldiObjectHolder::T	kaldi-holder-inl.h	/^  typedef KaldiType T;$/;"	t	class:kaldi::KaldiObjectHolder
kaldi::KaldiObjectHolder::Value	kaldi-holder-inl.h	/^  const T &Value() const {$/;"	f	class:kaldi::KaldiObjectHolder
kaldi::KaldiObjectHolder::Write	kaldi-holder-inl.h	/^  static bool Write(std::ostream &os, bool binary, const T &t) {$/;"	f	class:kaldi::KaldiObjectHolder
kaldi::KaldiObjectHolder::t_	kaldi-holder-inl.h	/^  T *t_;$/;"	m	class:kaldi::KaldiObjectHolder
kaldi::KaldiObjectHolder::~KaldiObjectHolder	kaldi-holder-inl.h	/^  ~KaldiObjectHolder() { if (t_) delete t_; }$/;"	f	class:kaldi::KaldiObjectHolder
kaldi::KeyList	kaldi-table.h	/^typedef std::vector<std::string> KeyList;$/;"	t	namespace:kaldi
kaldi::LevenshteinAlignment	edit-distance-inl.h	/^int32 LevenshteinAlignment(const std::vector<T> &a,$/;"	f	namespace:kaldi
kaldi::LevenshteinEditDistance	edit-distance-inl.h	/^int32 LevenshteinEditDistance(const std::vector<T> &a,$/;"	f	namespace:kaldi
kaldi::LevenshteinEditDistance	edit-distance-inl.h	/^int32 LevenshteinEditDistance(const std::vector<T> &ref,$/;"	f	namespace:kaldi
kaldi::MergePairVectorSumming	stl-utils.h	/^inline void MergePairVectorSumming(std::vector<std::pair<I, F> > *vec) {$/;"	f	namespace:kaldi
kaldi::MustBeQuoted	parse-options.cc	/^static bool MustBeQuoted(const std::string &str, ShellType st) {$/;"	f	namespace:kaldi
kaldi::OffsetFileInputImpl	kaldi-io.cc	/^class OffsetFileInputImpl: public InputImplBase {$/;"	c	namespace:kaldi	file:
kaldi::OffsetFileInputImpl::Close	kaldi-io.cc	/^  virtual void Close() {$/;"	f	class:kaldi::OffsetFileInputImpl
kaldi::OffsetFileInputImpl::MyType	kaldi-io.cc	/^  virtual InputType MyType() { return kOffsetFileInput; }$/;"	f	class:kaldi::OffsetFileInputImpl
kaldi::OffsetFileInputImpl::Open	kaldi-io.cc	/^  virtual bool Open(const std::string &rxfilename, bool binary) {$/;"	f	class:kaldi::OffsetFileInputImpl
kaldi::OffsetFileInputImpl::Seek	kaldi-io.cc	/^  bool Seek(size_t offset) {$/;"	f	class:kaldi::OffsetFileInputImpl
kaldi::OffsetFileInputImpl::SplitFilename	kaldi-io.cc	/^  static void SplitFilename(const std::string &rxfilename,$/;"	f	class:kaldi::OffsetFileInputImpl
kaldi::OffsetFileInputImpl::Stream	kaldi-io.cc	/^  virtual std::istream &Stream() {$/;"	f	class:kaldi::OffsetFileInputImpl
kaldi::OffsetFileInputImpl::binary_	kaldi-io.cc	/^  bool binary_;  \/\/ true if was opened in binary mode.$/;"	m	class:kaldi::OffsetFileInputImpl	file:
kaldi::OffsetFileInputImpl::filename_	kaldi-io.cc	/^  std::string filename_;  \/\/ the actual filename$/;"	m	class:kaldi::OffsetFileInputImpl	file:
kaldi::OffsetFileInputImpl::is_	kaldi-io.cc	/^  std::ifstream is_;$/;"	m	class:kaldi::OffsetFileInputImpl	file:
kaldi::OffsetFileInputImpl::~OffsetFileInputImpl	kaldi-io.cc	/^  virtual ~OffsetFileInputImpl() {$/;"	f	class:kaldi::OffsetFileInputImpl
kaldi::Output	kaldi-io.h	/^class Output {$/;"	c	namespace:kaldi
kaldi::Output::Close	kaldi-io.cc	/^bool Output::Close() {$/;"	f	class:kaldi::Output
kaldi::Output::IsOpen	kaldi-io-inl.h	/^bool Output::IsOpen() {$/;"	f	class:kaldi::Output
kaldi::Output::Open	kaldi-io.cc	/^bool Output::Open(const std::string &wxfn, bool binary, bool header) {$/;"	f	class:kaldi::Output
kaldi::Output::Output	kaldi-io.cc	/^Output::Output(const std::string &rxfilename, bool binary, bool write_header): impl_(NULL) {$/;"	f	class:kaldi::Output
kaldi::Output::Output	kaldi-io.h	/^  Output(): impl_(NULL) {};$/;"	f	class:kaldi::Output
kaldi::Output::Stream	kaldi-io.cc	/^std::ostream &Output::Stream() {  \/\/ will throw if not open; else returns stream.$/;"	f	class:kaldi::Output
kaldi::Output::filename_	kaldi-io.h	/^  std::string filename_;$/;"	m	class:kaldi::Output
kaldi::Output::impl_	kaldi-io.h	/^  OutputImplBase *impl_;  \/\/ non-NULL if open.$/;"	m	class:kaldi::Output
kaldi::Output::~Output	kaldi-io.cc	/^Output::~Output() {$/;"	f	class:kaldi::Output
kaldi::OutputImplBase	kaldi-io.cc	/^class OutputImplBase {$/;"	c	namespace:kaldi	file:
kaldi::OutputImplBase::~OutputImplBase	kaldi-io.cc	/^  virtual ~OutputImplBase() { }$/;"	f	class:kaldi::OutputImplBase
kaldi::OutputType	kaldi-io.h	/^enum OutputType {$/;"	g	namespace:kaldi
kaldi::PairHasher	stl-utils.h	/^struct PairHasher { \/\/ hashing function for pair<int>$/;"	s	namespace:kaldi
kaldi::PairHasher::PairHasher	stl-utils.h	/^  PairHasher() {  \/\/ Check we're instantiated with an integer type.$/;"	f	struct:kaldi::PairHasher
kaldi::PairHasher::kPrime	stl-utils.h	/^  static const int kPrime = 7853;$/;"	m	struct:kaldi::PairHasher
kaldi::PairHasher::operator ()	stl-utils.h	/^  size_t operator()(const std::pair<Int,Int> &x) const {$/;"	f	struct:kaldi::PairHasher
kaldi::ParseOptions	parse-options.h	/^class ParseOptions {$/;"	c	namespace:kaldi
kaldi::ParseOptions::DocInfo	parse-options.h	/^  struct DocInfo {$/;"	s	class:kaldi::ParseOptions
kaldi::ParseOptions::DocInfo::DocInfo	parse-options.h	/^    DocInfo() {}$/;"	f	struct:kaldi::ParseOptions::DocInfo
kaldi::ParseOptions::DocInfo::DocInfo	parse-options.h	/^    DocInfo(const std::string &name, const std::string &usemsg)$/;"	f	struct:kaldi::ParseOptions::DocInfo
kaldi::ParseOptions::DocInfo::DocInfo	parse-options.h	/^    DocInfo(const std::string &name, const std::string &usemsg,$/;"	f	struct:kaldi::ParseOptions::DocInfo
kaldi::ParseOptions::DocInfo::is_standard_	parse-options.h	/^    bool is_standard_;$/;"	m	struct:kaldi::ParseOptions::DocInfo
kaldi::ParseOptions::DocInfo::name_	parse-options.h	/^    std::string name_;$/;"	m	struct:kaldi::ParseOptions::DocInfo
kaldi::ParseOptions::DocInfo::use_msg_	parse-options.h	/^    std::string use_msg_;$/;"	m	struct:kaldi::ParseOptions::DocInfo
kaldi::ParseOptions::DocMapType	parse-options.h	/^  typedef std::map<std::string, DocInfo> DocMapType;$/;"	t	class:kaldi::ParseOptions
kaldi::ParseOptions::Escape	parse-options.cc	/^std::string ParseOptions::Escape(const std::string &str) {$/;"	f	class:kaldi::ParseOptions
kaldi::ParseOptions::GetArg	parse-options.cc	/^std::string ParseOptions::GetArg(int i) {$/;"	f	class:kaldi::ParseOptions
kaldi::ParseOptions::GetOptArg	parse-options.h	/^  std::string GetOptArg(int param) {$/;"	f	class:kaldi::ParseOptions
kaldi::ParseOptions::NormalizeArgName	parse-options.cc	/^void ParseOptions::NormalizeArgName(std::string *str) {$/;"	f	class:kaldi::ParseOptions
kaldi::ParseOptions::NumArgs	parse-options.cc	/^int ParseOptions::NumArgs() {$/;"	f	class:kaldi::ParseOptions
kaldi::ParseOptions::ParseOptions	parse-options.h	/^  explicit ParseOptions(const char *usage):$/;"	f	class:kaldi::ParseOptions
kaldi::ParseOptions::PrintConfig	parse-options.cc	/^void ParseOptions::PrintConfig(std::ostream &os) {$/;"	f	class:kaldi::ParseOptions
kaldi::ParseOptions::PrintUsage	parse-options.cc	/^void ParseOptions::PrintUsage(bool print_command_line) {$/;"	f	class:kaldi::ParseOptions
kaldi::ParseOptions::Read	parse-options.cc	/^int ParseOptions::Read(int argc, const char *const argv[]) {$/;"	f	class:kaldi::ParseOptions
kaldi::ParseOptions::ReadConfigFile	parse-options.cc	/^void ParseOptions::ReadConfigFile(const std::string &filename) {$/;"	f	class:kaldi::ParseOptions
kaldi::ParseOptions::Register	parse-options.cc	/^void ParseOptions::Register(const std::string &name, T *ptr,$/;"	f	class:kaldi::ParseOptions
kaldi::ParseOptions::RegisterCommon	parse-options.cc	/^void ParseOptions::RegisterCommon(const std::string &name, T *ptr,$/;"	f	class:kaldi::ParseOptions
kaldi::ParseOptions::RegisterSpecific	parse-options.cc	/^void ParseOptions::RegisterSpecific(const std::string &name,$/;"	f	class:kaldi::ParseOptions
kaldi::ParseOptions::RegisterStandard	parse-options.cc	/^void ParseOptions::RegisterStandard(const std::string &name, T *ptr,$/;"	f	class:kaldi::ParseOptions
kaldi::ParseOptions::SetOption	parse-options.cc	/^bool ParseOptions::SetOption(const std::string &key, const std::string &value) {$/;"	f	class:kaldi::ParseOptions
kaldi::ParseOptions::SplitLongArg	parse-options.cc	/^void ParseOptions::SplitLongArg(std::string in, std::string *key,$/;"	f	class:kaldi::ParseOptions
kaldi::ParseOptions::ToBool	parse-options.cc	/^bool ParseOptions::ToBool(std::string str) {$/;"	f	class:kaldi::ParseOptions
kaldi::ParseOptions::ToDouble	parse-options.cc	/^double ParseOptions::ToDouble(std::string str) {$/;"	f	class:kaldi::ParseOptions
kaldi::ParseOptions::ToFloat	parse-options.cc	/^float ParseOptions::ToFloat(std::string str) {$/;"	f	class:kaldi::ParseOptions
kaldi::ParseOptions::ToInt	parse-options.cc	/^int32 ParseOptions::ToInt(std::string str) {$/;"	f	class:kaldi::ParseOptions
kaldi::ParseOptions::ToUInt	parse-options.cc	/^uint32 ParseOptions::ToUInt(std::string str) {$/;"	f	class:kaldi::ParseOptions
kaldi::ParseOptions::argc_	parse-options.h	/^  int argc_;$/;"	m	class:kaldi::ParseOptions
kaldi::ParseOptions::argv_	parse-options.h	/^  const char*const *argv_;$/;"	m	class:kaldi::ParseOptions
kaldi::ParseOptions::bool_map_	parse-options.h	/^  std::map<std::string, bool*> bool_map_;$/;"	m	class:kaldi::ParseOptions
kaldi::ParseOptions::config_	parse-options.h	/^  std::string config_;  \/\/\/< variable for the implicit --config parameter$/;"	m	class:kaldi::ParseOptions
kaldi::ParseOptions::doc_map_	parse-options.h	/^  DocMapType doc_map_;  \/\/\/< map for the documentation$/;"	m	class:kaldi::ParseOptions
kaldi::ParseOptions::double_map_	parse-options.h	/^  std::map<std::string, double*> double_map_;$/;"	m	class:kaldi::ParseOptions
kaldi::ParseOptions::float_map_	parse-options.h	/^  std::map<std::string, float*> float_map_;$/;"	m	class:kaldi::ParseOptions
kaldi::ParseOptions::help_	parse-options.h	/^  bool help_;           \/\/\/< variable for the implicit --help parameter$/;"	m	class:kaldi::ParseOptions
kaldi::ParseOptions::int_map_	parse-options.h	/^  std::map<std::string, int32*> int_map_;$/;"	m	class:kaldi::ParseOptions
kaldi::ParseOptions::positional_args_	parse-options.h	/^  std::vector<std::string> positional_args_;$/;"	m	class:kaldi::ParseOptions
kaldi::ParseOptions::print_args_	parse-options.h	/^  bool print_args_;     \/\/\/< variable for the implicit --print-args parameter$/;"	m	class:kaldi::ParseOptions
kaldi::ParseOptions::string_map_	parse-options.h	/^  std::map<std::string, std::string*> string_map_;$/;"	m	class:kaldi::ParseOptions
kaldi::ParseOptions::uint_map_	parse-options.h	/^  std::map<std::string, uint32*> uint_map_;$/;"	m	class:kaldi::ParseOptions
kaldi::ParseOptions::usage_	parse-options.h	/^  const char *usage_;$/;"	m	class:kaldi::ParseOptions
kaldi::ParseOptions::~ParseOptions	parse-options.h	/^  ~ParseOptions() {}$/;"	f	class:kaldi::ParseOptions
kaldi::PipeInputImpl	kaldi-io.cc	/^class PipeInputImpl: public InputImplBase {$/;"	c	namespace:kaldi	file:
kaldi::PipeInputImpl::Close	kaldi-io.cc	/^  virtual void Close() {$/;"	f	class:kaldi::PipeInputImpl
kaldi::PipeInputImpl::MyType	kaldi-io.cc	/^  virtual InputType MyType() { return kPipeInput; }$/;"	f	class:kaldi::PipeInputImpl
kaldi::PipeInputImpl::Open	kaldi-io.cc	/^  virtual bool Open(const std::string &rxfilename, bool binary) {$/;"	f	class:kaldi::PipeInputImpl
kaldi::PipeInputImpl::PipeInputImpl	kaldi-io.cc	/^  PipeInputImpl(): f_ (NULL), is_(NULL) { }$/;"	f	class:kaldi::PipeInputImpl
kaldi::PipeInputImpl::Stream	kaldi-io.cc	/^  virtual std::istream &Stream() {$/;"	f	class:kaldi::PipeInputImpl
kaldi::PipeInputImpl::f_	kaldi-io.cc	/^  FILE *f_;$/;"	m	class:kaldi::PipeInputImpl	file:
kaldi::PipeInputImpl::fb_	kaldi-io.cc	/^  PipebufType *fb_;$/;"	m	class:kaldi::PipeInputImpl	file:
kaldi::PipeInputImpl::filename_	kaldi-io.cc	/^  std::string filename_;$/;"	m	class:kaldi::PipeInputImpl	file:
kaldi::PipeInputImpl::is_	kaldi-io.cc	/^  std::istream *is_;$/;"	m	class:kaldi::PipeInputImpl	file:
kaldi::PipeInputImpl::~PipeInputImpl	kaldi-io.cc	/^  virtual ~PipeInputImpl() {$/;"	f	class:kaldi::PipeInputImpl
kaldi::PipeOutputImpl	kaldi-io.cc	/^class PipeOutputImpl: public OutputImplBase {$/;"	c	namespace:kaldi	file:
kaldi::PipeOutputImpl::Close	kaldi-io.cc	/^  virtual bool Close() {$/;"	f	class:kaldi::PipeOutputImpl
kaldi::PipeOutputImpl::Open	kaldi-io.cc	/^  virtual bool Open(const std::string &wxfilename, bool binary) {$/;"	f	class:kaldi::PipeOutputImpl
kaldi::PipeOutputImpl::PipeOutputImpl	kaldi-io.cc	/^  PipeOutputImpl(): f_ (NULL), os_(NULL) { }$/;"	f	class:kaldi::PipeOutputImpl
kaldi::PipeOutputImpl::Stream	kaldi-io.cc	/^  virtual std::ostream &Stream() {$/;"	f	class:kaldi::PipeOutputImpl
kaldi::PipeOutputImpl::f_	kaldi-io.cc	/^  FILE *f_;$/;"	m	class:kaldi::PipeOutputImpl	file:
kaldi::PipeOutputImpl::fb_	kaldi-io.cc	/^  PipebufType *fb_;$/;"	m	class:kaldi::PipeOutputImpl	file:
kaldi::PipeOutputImpl::filename_	kaldi-io.cc	/^  std::string filename_;$/;"	m	class:kaldi::PipeOutputImpl	file:
kaldi::PipeOutputImpl::os_	kaldi-io.cc	/^  std::ostream *os_;$/;"	m	class:kaldi::PipeOutputImpl	file:
kaldi::PipeOutputImpl::~PipeOutputImpl	kaldi-io.cc	/^  virtual ~PipeOutputImpl() {$/;"	f	class:kaldi::PipeOutputImpl
kaldi::PipebufType	kaldi-io.cc	/^typedef basic_pipebuf<char> PipebufType;$/;"	t	namespace:kaldi	file:
kaldi::Posterior	kaldi-holder.h	/^typedef std::vector<std::vector<std::pair<int32, BaseFloat> > > Posterior;$/;"	t	namespace:kaldi
kaldi::PosteriorHolder	kaldi-holder-inl.h	/^class PosteriorHolder {$/;"	c	namespace:kaldi
kaldi::PosteriorHolder::Clear	kaldi-holder-inl.h	/^  void Clear() {  \/\/ free up memory and clear t_.$/;"	f	class:kaldi::PosteriorHolder
kaldi::PosteriorHolder::IsReadInBinary	kaldi-holder-inl.h	/^  static bool IsReadInBinary() { return true; }$/;"	f	class:kaldi::PosteriorHolder
kaldi::PosteriorHolder::PosteriorHolder	kaldi-holder-inl.h	/^  PosteriorHolder() { }$/;"	f	class:kaldi::PosteriorHolder
kaldi::PosteriorHolder::Read	kaldi-holder-inl.h	/^  bool Read(std::istream &is) {$/;"	f	class:kaldi::PosteriorHolder
kaldi::PosteriorHolder::T	kaldi-holder-inl.h	/^  typedef Posterior T;$/;"	t	class:kaldi::PosteriorHolder
kaldi::PosteriorHolder::Value	kaldi-holder-inl.h	/^  const T &Value() const {$/;"	f	class:kaldi::PosteriorHolder
kaldi::PosteriorHolder::Write	kaldi-holder-inl.h	/^  static bool Write(std::ostream &os, bool binary, const T &t) {$/;"	f	class:kaldi::PosteriorHolder
kaldi::PosteriorHolder::t_	kaldi-holder-inl.h	/^  T t_;$/;"	m	class:kaldi::PosteriorHolder
kaldi::PosteriorWriter	table-types.h	/^typedef TableWriter<PosteriorHolder> PosteriorWriter;$/;"	t	namespace:kaldi
kaldi::PrintableRxfilename	kaldi-io.cc	/^std::string PrintableRxfilename(std::string rxfilename) {$/;"	f	namespace:kaldi
kaldi::PrintableWxfilename	kaldi-io.cc	/^std::string PrintableWxfilename(std::string wxfilename) {$/;"	f	namespace:kaldi
kaldi::QuoteAndEscape	parse-options.cc	/^static std::string QuoteAndEscape(const std::string &str, ShellType st) {$/;"	f	namespace:kaldi
kaldi::RandomAccessBaseFloatMatrixReader	table-types.h	/^typedef RandomAccessTableReader<KaldiObjectHolder<Matrix<BaseFloat> > >  RandomAccessBaseFloatMatrixReader;$/;"	t	namespace:kaldi
kaldi::RandomAccessBaseFloatPairVectorReader	table-types.h	/^typedef RandomAccessTableReader<BasicPairVectorHolder<BaseFloat> >  RandomAccessBaseFloatPairVectorReader;$/;"	t	namespace:kaldi
kaldi::RandomAccessBaseFloatReader	table-types.h	/^typedef RandomAccessTableReader<BasicHolder<BaseFloat> >  RandomAccessBaseFloatReader;$/;"	t	namespace:kaldi
kaldi::RandomAccessBaseFloatVectorReader	table-types.h	/^typedef RandomAccessTableReader<KaldiObjectHolder<Vector<BaseFloat> > >  RandomAccessBaseFloatVectorReader;$/;"	t	namespace:kaldi
kaldi::RandomAccessBoolReader	table-types.h	/^typedef RandomAccessTableReader<BasicHolder<bool> >  RandomAccessBoolReader;$/;"	t	namespace:kaldi
kaldi::RandomAccessDoubleMatrixReader	table-types.h	/^typedef RandomAccessTableReader<KaldiObjectHolder<Matrix<double> > >  RandomAccessDoubleMatrixReader;$/;"	t	namespace:kaldi
kaldi::RandomAccessDoubleReader	table-types.h	/^typedef RandomAccessTableReader<BasicHolder<double> >  RandomAccessDoubleReader;$/;"	t	namespace:kaldi
kaldi::RandomAccessDoubleVectorReader	table-types.h	/^typedef RandomAccessTableReader<KaldiObjectHolder<Vector<double> > >  RandomAccessDoubleVectorReader;$/;"	t	namespace:kaldi
kaldi::RandomAccessGauPostReader	table-types.h	/^typedef RandomAccessTableReader<GauPostHolder> RandomAccessGauPostReader;$/;"	t	namespace:kaldi
kaldi::RandomAccessInt32PairVectorReader	table-types.h	/^typedef RandomAccessTableReader<BasicPairVectorHolder<int32> >  RandomAccessInt32PairVectorReader;$/;"	t	namespace:kaldi
kaldi::RandomAccessInt32Reader	table-types.h	/^typedef RandomAccessTableReader<BasicHolder<int32> >  RandomAccessInt32Reader;$/;"	t	namespace:kaldi
kaldi::RandomAccessInt32VectorReader	table-types.h	/^typedef RandomAccessTableReader<BasicVectorHolder<int32> >  RandomAccessInt32VectorReader;$/;"	t	namespace:kaldi
kaldi::RandomAccessInt32VectorVectorReader	table-types.h	/^typedef RandomAccessTableReader<BasicVectorVectorHolder<int32> >  RandomAccessInt32VectorVectorReader;$/;"	t	namespace:kaldi
kaldi::RandomAccessPosteriorReader	table-types.h	/^typedef RandomAccessTableReader<PosteriorHolder> RandomAccessPosteriorReader;$/;"	t	namespace:kaldi
kaldi::RandomAccessTableReader	kaldi-table.h	/^class RandomAccessTableReader {$/;"	c	namespace:kaldi
kaldi::RandomAccessTableReader::CheckImpl	kaldi-table-inl.h	/^void RandomAccessTableReader<Holder>::CheckImpl() const {$/;"	f	class:kaldi::RandomAccessTableReader
kaldi::RandomAccessTableReader::Close	kaldi-table-inl.h	/^bool RandomAccessTableReader<Holder>::Close() {$/;"	f	class:kaldi::RandomAccessTableReader
kaldi::RandomAccessTableReader::HasKey	kaldi-table-inl.h	/^bool RandomAccessTableReader<Holder>::HasKey(const std::string &key) {$/;"	f	class:kaldi::RandomAccessTableReader
kaldi::RandomAccessTableReader::IsOpen	kaldi-table.h	/^  bool IsOpen() const { return (impl_ != NULL); }$/;"	f	class:kaldi::RandomAccessTableReader
kaldi::RandomAccessTableReader::Open	kaldi-table-inl.h	/^bool RandomAccessTableReader<Holder>::Open(const std::string &rspecifier) {$/;"	f	class:kaldi::RandomAccessTableReader
kaldi::RandomAccessTableReader::RandomAccessTableReader	kaldi-table-inl.h	/^RandomAccessTableReader<Holder>::RandomAccessTableReader(const std::string &rspecifier):$/;"	f	class:kaldi::RandomAccessTableReader
kaldi::RandomAccessTableReader::RandomAccessTableReader	kaldi-table.h	/^  RandomAccessTableReader(): impl_(NULL) { }$/;"	f	class:kaldi::RandomAccessTableReader
kaldi::RandomAccessTableReader::T	kaldi-table.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::RandomAccessTableReader
kaldi::RandomAccessTableReader::Value	kaldi-table-inl.h	/^RandomAccessTableReader<Holder>::Value(const std::string &key) {$/;"	f	class:kaldi::RandomAccessTableReader
kaldi::RandomAccessTableReader::impl_	kaldi-table.h	/^  RandomAccessTableReaderImplBase<Holder> *impl_;$/;"	m	class:kaldi::RandomAccessTableReader
kaldi::RandomAccessTableReader::~RandomAccessTableReader	kaldi-table-inl.h	/^RandomAccessTableReader<Holder>::~RandomAccessTableReader() {$/;"	f	class:kaldi::RandomAccessTableReader
kaldi::RandomAccessTableReaderArchiveImplBase	kaldi-table-inl.h	/^template<class Holder>  class RandomAccessTableReaderArchiveImplBase:$/;"	c	namespace:kaldi
kaldi::RandomAccessTableReaderArchiveImplBase::CloseInternal	kaldi-table-inl.h	/^  bool CloseInternal() {$/;"	f	class:kaldi::RandomAccessTableReaderArchiveImplBase
kaldi::RandomAccessTableReaderArchiveImplBase::IsOpen	kaldi-table-inl.h	/^  virtual bool IsOpen() const {$/;"	f	class:kaldi::RandomAccessTableReaderArchiveImplBase
kaldi::RandomAccessTableReaderArchiveImplBase::Open	kaldi-table-inl.h	/^  virtual bool Open(const std::string &rspecifier) {$/;"	f	class:kaldi::RandomAccessTableReaderArchiveImplBase
kaldi::RandomAccessTableReaderArchiveImplBase::RandomAccessTableReaderArchiveImplBase	kaldi-table-inl.h	/^  RandomAccessTableReaderArchiveImplBase(): holder_(NULL), state_(kUninitialized) { }$/;"	f	class:kaldi::RandomAccessTableReaderArchiveImplBase
kaldi::RandomAccessTableReaderArchiveImplBase::ReadNextObject	kaldi-table-inl.h	/^  void ReadNextObject() {$/;"	f	class:kaldi::RandomAccessTableReaderArchiveImplBase
kaldi::RandomAccessTableReaderArchiveImplBase::T	kaldi-table-inl.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::RandomAccessTableReaderArchiveImplBase
kaldi::RandomAccessTableReaderArchiveImplBase::archive_rxfilename_	kaldi-table-inl.h	/^  std::string archive_rxfilename_;$/;"	m	class:kaldi::RandomAccessTableReaderArchiveImplBase
kaldi::RandomAccessTableReaderArchiveImplBase::cur_key_	kaldi-table-inl.h	/^  std::string cur_key_;   \/\/ current key (if state == kHaveObject).$/;"	m	class:kaldi::RandomAccessTableReaderArchiveImplBase
kaldi::RandomAccessTableReaderArchiveImplBase::holder_	kaldi-table-inl.h	/^  Holder *holder_;     \/\/ Holds the object we just read (if state == kHaveObject)$/;"	m	class:kaldi::RandomAccessTableReaderArchiveImplBase
kaldi::RandomAccessTableReaderArchiveImplBase::input_	kaldi-table-inl.h	/^  Input input_;       \/\/ Input object for the archive$/;"	m	class:kaldi::RandomAccessTableReaderArchiveImplBase
kaldi::RandomAccessTableReaderArchiveImplBase::kEof	kaldi-table-inl.h	/^    kEof,           \/\/ End of file                                 no         yes$/;"	e	enum:kaldi::RandomAccessTableReaderArchiveImplBase::__anon6
kaldi::RandomAccessTableReaderArchiveImplBase::kError	kaldi-table-inl.h	/^    kError,         \/\/ Some kind of error-state in the reading.    no         yes$/;"	e	enum:kaldi::RandomAccessTableReaderArchiveImplBase::__anon6
kaldi::RandomAccessTableReaderArchiveImplBase::kHaveObject	kaldi-table-inl.h	/^    kHaveObject,    \/\/ Have object in holder_                      yes        yes$/;"	e	enum:kaldi::RandomAccessTableReaderArchiveImplBase::__anon6
kaldi::RandomAccessTableReaderArchiveImplBase::kNoObject	kaldi-table-inl.h	/^    kNoObject,      \/\/ Do not have object in holder_               no         yes$/;"	e	enum:kaldi::RandomAccessTableReaderArchiveImplBase::__anon6
kaldi::RandomAccessTableReaderArchiveImplBase::kUninitialized	kaldi-table-inl.h	/^    kUninitialized,  \/\/ Uninitialized or closed                     no         no$/;"	e	enum:kaldi::RandomAccessTableReaderArchiveImplBase::__anon6
kaldi::RandomAccessTableReaderArchiveImplBase::opts_	kaldi-table-inl.h	/^  RspecifierOptions opts_;$/;"	m	class:kaldi::RandomAccessTableReaderArchiveImplBase
kaldi::RandomAccessTableReaderArchiveImplBase::state_	kaldi-table-inl.h	/^  } state_;$/;"	m	class:kaldi::RandomAccessTableReaderArchiveImplBase	typeref:enum:kaldi::RandomAccessTableReaderArchiveImplBase::__anon6
kaldi::RandomAccessTableReaderArchiveImplBase::~RandomAccessTableReaderArchiveImplBase	kaldi-table-inl.h	/^  ~RandomAccessTableReaderArchiveImplBase() {$/;"	f	class:kaldi::RandomAccessTableReaderArchiveImplBase
kaldi::RandomAccessTableReaderDSortedArchiveImpl	kaldi-table-inl.h	/^template<class Holder>  class RandomAccessTableReaderDSortedArchiveImpl:$/;"	c	namespace:kaldi
kaldi::RandomAccessTableReaderDSortedArchiveImpl::Close	kaldi-table-inl.h	/^  virtual bool Close() {$/;"	f	class:kaldi::RandomAccessTableReaderDSortedArchiveImpl
kaldi::RandomAccessTableReaderDSortedArchiveImpl::FindKeyInternal	kaldi-table-inl.h	/^  bool FindKeyInternal(const std::string &key) {$/;"	f	class:kaldi::RandomAccessTableReaderDSortedArchiveImpl
kaldi::RandomAccessTableReaderDSortedArchiveImpl::HasKey	kaldi-table-inl.h	/^  virtual bool HasKey(const std::string &key) {$/;"	f	class:kaldi::RandomAccessTableReaderDSortedArchiveImpl
kaldi::RandomAccessTableReaderDSortedArchiveImpl::RandomAccessTableReaderDSortedArchiveImpl	kaldi-table-inl.h	/^  RandomAccessTableReaderDSortedArchiveImpl() { }$/;"	f	class:kaldi::RandomAccessTableReaderDSortedArchiveImpl
kaldi::RandomAccessTableReaderDSortedArchiveImpl::T	kaldi-table-inl.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::RandomAccessTableReaderDSortedArchiveImpl
kaldi::RandomAccessTableReaderDSortedArchiveImpl::Value	kaldi-table-inl.h	/^  virtual const T & Value(const std::string &key) {$/;"	f	class:kaldi::RandomAccessTableReaderDSortedArchiveImpl
kaldi::RandomAccessTableReaderDSortedArchiveImpl::last_requested_key_	kaldi-table-inl.h	/^  std::string last_requested_key_;$/;"	m	class:kaldi::RandomAccessTableReaderDSortedArchiveImpl
kaldi::RandomAccessTableReaderDSortedArchiveImpl::~RandomAccessTableReaderDSortedArchiveImpl	kaldi-table-inl.h	/^  virtual ~RandomAccessTableReaderDSortedArchiveImpl() {$/;"	f	class:kaldi::RandomAccessTableReaderDSortedArchiveImpl
kaldi::RandomAccessTableReaderImplBase	kaldi-table-inl.h	/^template<class Holder> class RandomAccessTableReaderImplBase {$/;"	c	namespace:kaldi
kaldi::RandomAccessTableReaderImplBase::T	kaldi-table-inl.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::RandomAccessTableReaderImplBase
kaldi::RandomAccessTableReaderImplBase::~RandomAccessTableReaderImplBase	kaldi-table-inl.h	/^  virtual ~RandomAccessTableReaderImplBase() {}$/;"	f	class:kaldi::RandomAccessTableReaderImplBase
kaldi::RandomAccessTableReaderScriptImpl	kaldi-table-inl.h	/^class RandomAccessTableReaderScriptImpl:$/;"	c	namespace:kaldi
kaldi::RandomAccessTableReaderScriptImpl::Close	kaldi-table-inl.h	/^  virtual bool Close() {$/;"	f	class:kaldi::RandomAccessTableReaderScriptImpl
kaldi::RandomAccessTableReaderScriptImpl::HasKey	kaldi-table-inl.h	/^  virtual bool HasKey(const std::string &key) {$/;"	f	class:kaldi::RandomAccessTableReaderScriptImpl
kaldi::RandomAccessTableReaderScriptImpl::HasKeyInternal	kaldi-table-inl.h	/^  virtual bool HasKeyInternal(const std::string &key, bool preload) {$/;"	f	class:kaldi::RandomAccessTableReaderScriptImpl
kaldi::RandomAccessTableReaderScriptImpl::IsOpen	kaldi-table-inl.h	/^  virtual bool IsOpen() const {$/;"	f	class:kaldi::RandomAccessTableReaderScriptImpl
kaldi::RandomAccessTableReaderScriptImpl::LookupKey	kaldi-table-inl.h	/^  bool LookupKey(const std::string &key, size_t *script_offset) {$/;"	f	class:kaldi::RandomAccessTableReaderScriptImpl
kaldi::RandomAccessTableReaderScriptImpl::MakeTombstone	kaldi-table-inl.h	/^  void MakeTombstone(const std::string &key) {$/;"	f	class:kaldi::RandomAccessTableReaderScriptImpl
kaldi::RandomAccessTableReaderScriptImpl::Open	kaldi-table-inl.h	/^  virtual bool Open(const std::string &rspecifier) {$/;"	f	class:kaldi::RandomAccessTableReaderScriptImpl
kaldi::RandomAccessTableReaderScriptImpl::RandomAccessTableReaderScriptImpl	kaldi-table-inl.h	/^  RandomAccessTableReaderScriptImpl(): last_found_(0), state_(kUninitialized) {}$/;"	f	class:kaldi::RandomAccessTableReaderScriptImpl
kaldi::RandomAccessTableReaderScriptImpl::T	kaldi-table-inl.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::RandomAccessTableReaderScriptImpl
kaldi::RandomAccessTableReaderScriptImpl::Value	kaldi-table-inl.h	/^  virtual const T&  Value(const std::string &key) {$/;"	f	class:kaldi::RandomAccessTableReaderScriptImpl
kaldi::RandomAccessTableReaderScriptImpl::current_key_	kaldi-table-inl.h	/^  std::string current_key_;  \/\/ Key of object in holder_$/;"	m	class:kaldi::RandomAccessTableReaderScriptImpl
kaldi::RandomAccessTableReaderScriptImpl::holder_	kaldi-table-inl.h	/^  Holder holder_;$/;"	m	class:kaldi::RandomAccessTableReaderScriptImpl
kaldi::RandomAccessTableReaderScriptImpl::input_	kaldi-table-inl.h	/^  Input input_;  \/\/ Use the same input_ object for reading each file, in case$/;"	m	class:kaldi::RandomAccessTableReaderScriptImpl
kaldi::RandomAccessTableReaderScriptImpl::kGaveObject	kaldi-table-inl.h	/^    kGaveObject,   \/\/     yes                    yes$/;"	e	enum:kaldi::RandomAccessTableReaderScriptImpl::__anon5
kaldi::RandomAccessTableReaderScriptImpl::kHaveObject	kaldi-table-inl.h	/^    kHaveObject,   \/\/     yes                    yes$/;"	e	enum:kaldi::RandomAccessTableReaderScriptImpl::__anon5
kaldi::RandomAccessTableReaderScriptImpl::kNotHaveObject	kaldi-table-inl.h	/^    kNotHaveObject,  \/\/     yes                    no$/;"	e	enum:kaldi::RandomAccessTableReaderScriptImpl::__anon5
kaldi::RandomAccessTableReaderScriptImpl::kNotReadScript	kaldi-table-inl.h	/^    kNotReadScript,  \/\/     no                     no$/;"	e	enum:kaldi::RandomAccessTableReaderScriptImpl::__anon5
kaldi::RandomAccessTableReaderScriptImpl::kUninitialized	kaldi-table-inl.h	/^    kUninitialized,  \/\/     no                     no$/;"	e	enum:kaldi::RandomAccessTableReaderScriptImpl::__anon5
kaldi::RandomAccessTableReaderScriptImpl::last_found_	kaldi-table-inl.h	/^  size_t last_found_;  \/\/ This is for an optimization used in FindFilename.$/;"	m	class:kaldi::RandomAccessTableReaderScriptImpl
kaldi::RandomAccessTableReaderScriptImpl::opts_	kaldi-table-inl.h	/^  RspecifierOptions opts_;$/;"	m	class:kaldi::RandomAccessTableReaderScriptImpl
kaldi::RandomAccessTableReaderScriptImpl::rspecifier_	kaldi-table-inl.h	/^  std::string rspecifier_;  \/\/ rspecifier used to open it; used in debug messages$/;"	m	class:kaldi::RandomAccessTableReaderScriptImpl
kaldi::RandomAccessTableReaderScriptImpl::script_	kaldi-table-inl.h	/^  std::vector<std::pair<std::string, std::string> > script_;$/;"	m	class:kaldi::RandomAccessTableReaderScriptImpl
kaldi::RandomAccessTableReaderScriptImpl::script_rxfilename_	kaldi-table-inl.h	/^  std::string script_rxfilename_;  \/\/ filename of script.$/;"	m	class:kaldi::RandomAccessTableReaderScriptImpl
kaldi::RandomAccessTableReaderScriptImpl::state_	kaldi-table-inl.h	/^  } state_;$/;"	m	class:kaldi::RandomAccessTableReaderScriptImpl	typeref:enum:kaldi::RandomAccessTableReaderScriptImpl::__anon5
kaldi::RandomAccessTableReaderScriptImpl::~RandomAccessTableReaderScriptImpl	kaldi-table-inl.h	/^  virtual ~RandomAccessTableReaderScriptImpl() {$/;"	f	class:kaldi::RandomAccessTableReaderScriptImpl
kaldi::RandomAccessTableReaderSortedArchiveImpl	kaldi-table-inl.h	/^template<class Holder>  class RandomAccessTableReaderSortedArchiveImpl:$/;"	c	namespace:kaldi
kaldi::RandomAccessTableReaderSortedArchiveImpl::Close	kaldi-table-inl.h	/^  virtual bool Close() {$/;"	f	class:kaldi::RandomAccessTableReaderSortedArchiveImpl
kaldi::RandomAccessTableReaderSortedArchiveImpl::FindKeyInternal	kaldi-table-inl.h	/^  bool FindKeyInternal(const std::string &key, size_t *index) {$/;"	f	class:kaldi::RandomAccessTableReaderSortedArchiveImpl
kaldi::RandomAccessTableReaderSortedArchiveImpl::HandlePendingDelete	kaldi-table-inl.h	/^  void HandlePendingDelete() {$/;"	f	class:kaldi::RandomAccessTableReaderSortedArchiveImpl
kaldi::RandomAccessTableReaderSortedArchiveImpl::HasKey	kaldi-table-inl.h	/^  virtual bool HasKey(const std::string &key) {$/;"	f	class:kaldi::RandomAccessTableReaderSortedArchiveImpl
kaldi::RandomAccessTableReaderSortedArchiveImpl::PairCompare	kaldi-table-inl.h	/^  struct PairCompare {$/;"	s	class:kaldi::RandomAccessTableReaderSortedArchiveImpl
kaldi::RandomAccessTableReaderSortedArchiveImpl::PairCompare::operator ()	kaldi-table-inl.h	/^    inline bool operator() (const std::pair<std::string, Holder*> &pr1,$/;"	f	struct:kaldi::RandomAccessTableReaderSortedArchiveImpl::PairCompare
kaldi::RandomAccessTableReaderSortedArchiveImpl::RandomAccessTableReaderSortedArchiveImpl	kaldi-table-inl.h	/^  RandomAccessTableReaderSortedArchiveImpl():$/;"	f	class:kaldi::RandomAccessTableReaderSortedArchiveImpl
kaldi::RandomAccessTableReaderSortedArchiveImpl::T	kaldi-table-inl.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::RandomAccessTableReaderSortedArchiveImpl
kaldi::RandomAccessTableReaderSortedArchiveImpl::Value	kaldi-table-inl.h	/^  virtual const T & Value(const std::string &key) {$/;"	f	class:kaldi::RandomAccessTableReaderSortedArchiveImpl
kaldi::RandomAccessTableReaderSortedArchiveImpl::last_found_index_	kaldi-table-inl.h	/^  size_t last_found_index_;  \/\/ An optimization s.t. if FindKeyInternal called twice with$/;"	m	class:kaldi::RandomAccessTableReaderSortedArchiveImpl
kaldi::RandomAccessTableReaderSortedArchiveImpl::pending_delete_	kaldi-table-inl.h	/^  size_t pending_delete_;  \/\/ If opts_.once == true, this is the index of$/;"	m	class:kaldi::RandomAccessTableReaderSortedArchiveImpl
kaldi::RandomAccessTableReaderSortedArchiveImpl::seen_pairs_	kaldi-table-inl.h	/^  std::vector<std::pair<std::string, Holder*> > seen_pairs_;$/;"	m	class:kaldi::RandomAccessTableReaderSortedArchiveImpl
kaldi::RandomAccessTableReaderSortedArchiveImpl::~RandomAccessTableReaderSortedArchiveImpl	kaldi-table-inl.h	/^  virtual ~RandomAccessTableReaderSortedArchiveImpl() {$/;"	f	class:kaldi::RandomAccessTableReaderSortedArchiveImpl
kaldi::RandomAccessTableReaderUnsortedArchiveImpl	kaldi-table-inl.h	/^template<class Holder>  class RandomAccessTableReaderUnsortedArchiveImpl:$/;"	c	namespace:kaldi
kaldi::RandomAccessTableReaderUnsortedArchiveImpl::Close	kaldi-table-inl.h	/^  virtual bool Close() {$/;"	f	class:kaldi::RandomAccessTableReaderUnsortedArchiveImpl
kaldi::RandomAccessTableReaderUnsortedArchiveImpl::FindKeyInternal	kaldi-table-inl.h	/^  bool FindKeyInternal(const std::string &key, const T **value_ptr = NULL) {$/;"	f	class:kaldi::RandomAccessTableReaderUnsortedArchiveImpl
kaldi::RandomAccessTableReaderUnsortedArchiveImpl::HandlePendingDelete	kaldi-table-inl.h	/^  void HandlePendingDelete() {$/;"	f	class:kaldi::RandomAccessTableReaderUnsortedArchiveImpl
kaldi::RandomAccessTableReaderUnsortedArchiveImpl::HasKey	kaldi-table-inl.h	/^  virtual bool HasKey(const std::string &key) {$/;"	f	class:kaldi::RandomAccessTableReaderUnsortedArchiveImpl
kaldi::RandomAccessTableReaderUnsortedArchiveImpl::MapType	kaldi-table-inl.h	/^  typedef unordered_map<std::string, Holder*, StringHasher>  MapType;$/;"	t	class:kaldi::RandomAccessTableReaderUnsortedArchiveImpl
kaldi::RandomAccessTableReaderUnsortedArchiveImpl::RandomAccessTableReaderUnsortedArchiveImpl	kaldi-table-inl.h	/^  RandomAccessTableReaderUnsortedArchiveImpl(): to_delete_iter_(map_.end()),$/;"	f	class:kaldi::RandomAccessTableReaderUnsortedArchiveImpl
kaldi::RandomAccessTableReaderUnsortedArchiveImpl::T	kaldi-table-inl.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::RandomAccessTableReaderUnsortedArchiveImpl
kaldi::RandomAccessTableReaderUnsortedArchiveImpl::Value	kaldi-table-inl.h	/^  virtual const T & Value(const std::string &key) {$/;"	f	class:kaldi::RandomAccessTableReaderUnsortedArchiveImpl
kaldi::RandomAccessTableReaderUnsortedArchiveImpl::first_deleted_string_	kaldi-table-inl.h	/^  std::string first_deleted_string_;  \/\/ keep the first string we deleted$/;"	m	class:kaldi::RandomAccessTableReaderUnsortedArchiveImpl
kaldi::RandomAccessTableReaderUnsortedArchiveImpl::map_	kaldi-table-inl.h	/^  MapType map_;$/;"	m	class:kaldi::RandomAccessTableReaderUnsortedArchiveImpl
kaldi::RandomAccessTableReaderUnsortedArchiveImpl::to_delete_iter_	kaldi-table-inl.h	/^  typename MapType::iterator to_delete_iter_;$/;"	m	class:kaldi::RandomAccessTableReaderUnsortedArchiveImpl
kaldi::RandomAccessTableReaderUnsortedArchiveImpl::to_delete_iter_valid_	kaldi-table-inl.h	/^  bool to_delete_iter_valid_;$/;"	m	class:kaldi::RandomAccessTableReaderUnsortedArchiveImpl
kaldi::RandomAccessTableReaderUnsortedArchiveImpl::~RandomAccessTableReaderUnsortedArchiveImpl	kaldi-table-inl.h	/^  virtual ~RandomAccessTableReaderUnsortedArchiveImpl() {$/;"	f	class:kaldi::RandomAccessTableReaderUnsortedArchiveImpl
kaldi::RandomAccessTokenReader	table-types.h	/^typedef RandomAccessTableReader<TokenHolder> RandomAccessTokenReader;$/;"	t	namespace:kaldi
kaldi::RandomAccessTokenVectorReader	table-types.h	/^typedef RandomAccessTableReader<TokenVectorHolder> RandomAccessTokenVectorReader;$/;"	t	namespace:kaldi
kaldi::RandomizeVector	kaldi-table-test.cc	/^template<class T> void RandomizeVector(std::vector<T> *v) {$/;"	f	namespace:kaldi
kaldi::ReadIntegerVectorSimple	simple-io-funcs.cc	/^bool ReadIntegerVectorSimple(std::string rxfilename, std::vector<int32> *list) {$/;"	f	namespace:kaldi
kaldi::ReadIntegerVectorVectorSimple	simple-io-funcs.cc	/^bool ReadIntegerVectorVectorSimple(std::string rxfilename, std::vector<std::vector<int32> > *list) {$/;"	f	namespace:kaldi
kaldi::ReadKaldiObject	kaldi-io.h	/^template <class C> inline void ReadKaldiObject(const std::string &filename,$/;"	f	namespace:kaldi
kaldi::ReadScriptFile	kaldi-table.cc	/^bool ReadScriptFile(const std::string &rxfilename,$/;"	f	namespace:kaldi
kaldi::ReadScriptFile	kaldi-table.cc	/^bool ReadScriptFile(std::istream &is,$/;"	f	namespace:kaldi
kaldi::ReverseVector	stl-utils.h	/^inline void ReverseVector(std::vector<T> *vec) {$/;"	f	namespace:kaldi
kaldi::RspecifierOptions	kaldi-table.h	/^struct  RspecifierOptions {$/;"	s	namespace:kaldi
kaldi::RspecifierOptions::RspecifierOptions	kaldi-table.h	/^  RspecifierOptions(): once(false), sorted(false),$/;"	f	struct:kaldi::RspecifierOptions
kaldi::RspecifierOptions::called_sorted	kaldi-table.h	/^  bool called_sorted;  \/\/ we assert that the (HasKey(), Value() functions will$/;"	m	struct:kaldi::RspecifierOptions
kaldi::RspecifierOptions::once	kaldi-table.h	/^  bool once;   \/\/ we assert that the program will only ask for each key once.$/;"	m	struct:kaldi::RspecifierOptions
kaldi::RspecifierOptions::permissive	kaldi-table.h	/^  bool permissive;  \/\/ If "permissive", when reading from scp files it treats$/;"	m	struct:kaldi::RspecifierOptions
kaldi::RspecifierOptions::sorted	kaldi-table.h	/^  bool sorted;  \/\/ we assert that the keys are sorted.$/;"	m	struct:kaldi::RspecifierOptions
kaldi::RspecifierType	kaldi-table.h	/^enum RspecifierType  {$/;"	g	namespace:kaldi
kaldi::SequentialBaseFloatMatrixReader	table-types.h	/^typedef SequentialTableReader<KaldiObjectHolder<Matrix<BaseFloat> > >  SequentialBaseFloatMatrixReader;$/;"	t	namespace:kaldi
kaldi::SequentialBaseFloatPairVectorReader	table-types.h	/^typedef SequentialTableReader<BasicPairVectorHolder<BaseFloat> >  SequentialBaseFloatPairVectorReader;$/;"	t	namespace:kaldi
kaldi::SequentialBaseFloatReader	table-types.h	/^typedef SequentialTableReader<BasicHolder<BaseFloat> >  SequentialBaseFloatReader;$/;"	t	namespace:kaldi
kaldi::SequentialBaseFloatVectorReader	table-types.h	/^typedef SequentialTableReader<KaldiObjectHolder<Vector<BaseFloat> > >  SequentialBaseFloatVectorReader;$/;"	t	namespace:kaldi
kaldi::SequentialBoolReader	table-types.h	/^typedef SequentialTableReader<BasicHolder<bool> >  SequentialBoolReader;$/;"	t	namespace:kaldi
kaldi::SequentialDoubleMatrixReader	table-types.h	/^typedef SequentialTableReader<KaldiObjectHolder<Matrix<double> > >  SequentialDoubleMatrixReader;$/;"	t	namespace:kaldi
kaldi::SequentialDoubleReader	table-types.h	/^typedef SequentialTableReader<BasicHolder<double> >  SequentialDoubleReader;$/;"	t	namespace:kaldi
kaldi::SequentialDoubleVectorReader	table-types.h	/^typedef SequentialTableReader<KaldiObjectHolder<Vector<double> > >  SequentialDoubleVectorReader;$/;"	t	namespace:kaldi
kaldi::SequentialGauPostReader	table-types.h	/^typedef SequentialTableReader<GauPostHolder> SequentialGauPostReader;$/;"	t	namespace:kaldi
kaldi::SequentialInt32PairVectorReader	table-types.h	/^typedef SequentialTableReader<BasicPairVectorHolder<int32> >  SequentialInt32PairVectorReader;$/;"	t	namespace:kaldi
kaldi::SequentialInt32Reader	table-types.h	/^typedef SequentialTableReader<BasicHolder<int32> >  SequentialInt32Reader;$/;"	t	namespace:kaldi
kaldi::SequentialInt32VectorReader	table-types.h	/^typedef SequentialTableReader<BasicVectorHolder<int32> >  SequentialInt32VectorReader;$/;"	t	namespace:kaldi
kaldi::SequentialInt32VectorVectorReader	table-types.h	/^typedef SequentialTableReader<BasicVectorVectorHolder<int32> >  SequentialInt32VectorVectorReader;$/;"	t	namespace:kaldi
kaldi::SequentialPosteriorReader	table-types.h	/^typedef SequentialTableReader<PosteriorHolder> SequentialPosteriorReader;$/;"	t	namespace:kaldi
kaldi::SequentialTableReader	kaldi-table.h	/^class SequentialTableReader {$/;"	c	namespace:kaldi
kaldi::SequentialTableReader::CheckImpl	kaldi-table-inl.h	/^void SequentialTableReader<Holder>::CheckImpl() const {$/;"	f	class:kaldi::SequentialTableReader
kaldi::SequentialTableReader::Close	kaldi-table-inl.h	/^bool SequentialTableReader<Holder>::Close() {$/;"	f	class:kaldi::SequentialTableReader
kaldi::SequentialTableReader::Done	kaldi-table-inl.h	/^bool SequentialTableReader<Holder>::Done() {$/;"	f	class:kaldi::SequentialTableReader
kaldi::SequentialTableReader::FreeCurrent	kaldi-table-inl.h	/^void SequentialTableReader<Holder>::FreeCurrent() {$/;"	f	class:kaldi::SequentialTableReader
kaldi::SequentialTableReader::IsOpen	kaldi-table-inl.h	/^bool SequentialTableReader<Holder>::IsOpen() const {$/;"	f	class:kaldi::SequentialTableReader
kaldi::SequentialTableReader::Key	kaldi-table-inl.h	/^std::string SequentialTableReader<Holder>::Key() {$/;"	f	class:kaldi::SequentialTableReader
kaldi::SequentialTableReader::Next	kaldi-table-inl.h	/^void SequentialTableReader<Holder>::Next() {$/;"	f	class:kaldi::SequentialTableReader
kaldi::SequentialTableReader::Open	kaldi-table-inl.h	/^bool SequentialTableReader<Holder>::Open(const std::string &rspecifier) {$/;"	f	class:kaldi::SequentialTableReader
kaldi::SequentialTableReader::SequentialTableReader	kaldi-table-inl.h	/^SequentialTableReader<Holder>::SequentialTableReader(const std::string &rspecifier): impl_(NULL) {$/;"	f	class:kaldi::SequentialTableReader
kaldi::SequentialTableReader::SequentialTableReader	kaldi-table.h	/^  SequentialTableReader(): impl_(NULL) { }$/;"	f	class:kaldi::SequentialTableReader
kaldi::SequentialTableReader::T	kaldi-table.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::SequentialTableReader
kaldi::SequentialTableReader::Value	kaldi-table-inl.h	/^SequentialTableReader<Holder>::Value() {$/;"	f	class:kaldi::SequentialTableReader
kaldi::SequentialTableReader::impl_	kaldi-table.h	/^  SequentialTableReaderImplBase<Holder> *impl_;$/;"	m	class:kaldi::SequentialTableReader
kaldi::SequentialTableReader::~SequentialTableReader	kaldi-table-inl.h	/^SequentialTableReader<Holder>::~SequentialTableReader() {$/;"	f	class:kaldi::SequentialTableReader
kaldi::SequentialTableReaderArchiveImpl	kaldi-table-inl.h	/^template<class Holder>  class SequentialTableReaderArchiveImpl:$/;"	c	namespace:kaldi
kaldi::SequentialTableReaderArchiveImpl::Close	kaldi-table-inl.h	/^  virtual bool Close() {$/;"	f	class:kaldi::SequentialTableReaderArchiveImpl
kaldi::SequentialTableReaderArchiveImpl::Done	kaldi-table-inl.h	/^  virtual bool Done() const {$/;"	f	class:kaldi::SequentialTableReaderArchiveImpl
kaldi::SequentialTableReaderArchiveImpl::FreeCurrent	kaldi-table-inl.h	/^  virtual void FreeCurrent() {$/;"	f	class:kaldi::SequentialTableReaderArchiveImpl
kaldi::SequentialTableReaderArchiveImpl::IsOpen	kaldi-table-inl.h	/^  virtual bool IsOpen() const {$/;"	f	class:kaldi::SequentialTableReaderArchiveImpl
kaldi::SequentialTableReaderArchiveImpl::Key	kaldi-table-inl.h	/^  virtual std::string Key() {$/;"	f	class:kaldi::SequentialTableReaderArchiveImpl
kaldi::SequentialTableReaderArchiveImpl::Next	kaldi-table-inl.h	/^  virtual void Next() {$/;"	f	class:kaldi::SequentialTableReaderArchiveImpl
kaldi::SequentialTableReaderArchiveImpl::Open	kaldi-table-inl.h	/^  virtual bool Open(const std::string &rspecifier) {$/;"	f	class:kaldi::SequentialTableReaderArchiveImpl
kaldi::SequentialTableReaderArchiveImpl::SequentialTableReaderArchiveImpl	kaldi-table-inl.h	/^  SequentialTableReaderArchiveImpl(): state_(kUninitialized) { }$/;"	f	class:kaldi::SequentialTableReaderArchiveImpl
kaldi::SequentialTableReaderArchiveImpl::T	kaldi-table-inl.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::SequentialTableReaderArchiveImpl
kaldi::SequentialTableReaderArchiveImpl::Value	kaldi-table-inl.h	/^  const T &Value() {$/;"	f	class:kaldi::SequentialTableReaderArchiveImpl
kaldi::SequentialTableReaderArchiveImpl::archive_rxfilename_	kaldi-table-inl.h	/^  std::string archive_rxfilename_;$/;"	m	class:kaldi::SequentialTableReaderArchiveImpl
kaldi::SequentialTableReaderArchiveImpl::holder_	kaldi-table-inl.h	/^  Holder holder_;     \/\/ Holds the object.$/;"	m	class:kaldi::SequentialTableReaderArchiveImpl
kaldi::SequentialTableReaderArchiveImpl::input_	kaldi-table-inl.h	/^  Input input_;  \/\/ Input object for the archive$/;"	m	class:kaldi::SequentialTableReaderArchiveImpl
kaldi::SequentialTableReaderArchiveImpl::kEof	kaldi-table-inl.h	/^    kEof,     \/\/ We did Next() and found eof in archive            no         no$/;"	e	enum:kaldi::SequentialTableReaderArchiveImpl::__anon1
kaldi::SequentialTableReaderArchiveImpl::kError	kaldi-table-inl.h	/^    kError,   \/\/ Some other error                                  no         no$/;"	e	enum:kaldi::SequentialTableReaderArchiveImpl::__anon1
kaldi::SequentialTableReaderArchiveImpl::kFileStart	kaldi-table-inl.h	/^    kFileStart,      \/\/ [state we use internally: just opened.]    no         yes$/;"	e	enum:kaldi::SequentialTableReaderArchiveImpl::__anon1
kaldi::SequentialTableReaderArchiveImpl::kFreedObject	kaldi-table-inl.h	/^    kFreedObject,  \/\/ The user called FreeCurrent().                no         yes$/;"	e	enum:kaldi::SequentialTableReaderArchiveImpl::__anon1
kaldi::SequentialTableReaderArchiveImpl::kHaveObject	kaldi-table-inl.h	/^    kHaveObject,  \/\/ We read the key and the object after it.       yes        yes$/;"	e	enum:kaldi::SequentialTableReaderArchiveImpl::__anon1
kaldi::SequentialTableReaderArchiveImpl::kUninitialized	kaldi-table-inl.h	/^    kUninitialized,  \/\/ Uninitialized or closed.                    no         no$/;"	e	enum:kaldi::SequentialTableReaderArchiveImpl::__anon1
kaldi::SequentialTableReaderArchiveImpl::key_	kaldi-table-inl.h	/^  std::string key_;$/;"	m	class:kaldi::SequentialTableReaderArchiveImpl
kaldi::SequentialTableReaderArchiveImpl::opts_	kaldi-table-inl.h	/^  RspecifierOptions opts_;$/;"	m	class:kaldi::SequentialTableReaderArchiveImpl
kaldi::SequentialTableReaderArchiveImpl::state_	kaldi-table-inl.h	/^  } state_;$/;"	m	class:kaldi::SequentialTableReaderArchiveImpl	typeref:enum:kaldi::SequentialTableReaderArchiveImpl::__anon1
kaldi::SequentialTableReaderArchiveImpl::~SequentialTableReaderArchiveImpl	kaldi-table-inl.h	/^  virtual ~SequentialTableReaderArchiveImpl() {$/;"	f	class:kaldi::SequentialTableReaderArchiveImpl
kaldi::SequentialTableReaderImplBase	kaldi-table-inl.h	/^template<class Holder> class SequentialTableReaderImplBase {$/;"	c	namespace:kaldi
kaldi::SequentialTableReaderImplBase::T	kaldi-table-inl.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::SequentialTableReaderImplBase
kaldi::SequentialTableReaderImplBase::~SequentialTableReaderImplBase	kaldi-table-inl.h	/^  virtual ~SequentialTableReaderImplBase() { }$/;"	f	class:kaldi::SequentialTableReaderImplBase
kaldi::SequentialTableReaderScriptImpl	kaldi-table-inl.h	/^template<class Holder>  class SequentialTableReaderScriptImpl:$/;"	c	namespace:kaldi
kaldi::SequentialTableReaderScriptImpl::Close	kaldi-table-inl.h	/^  virtual bool Close() {$/;"	f	class:kaldi::SequentialTableReaderScriptImpl
kaldi::SequentialTableReaderScriptImpl::Done	kaldi-table-inl.h	/^  virtual bool Done() const {$/;"	f	class:kaldi::SequentialTableReaderScriptImpl
kaldi::SequentialTableReaderScriptImpl::FreeCurrent	kaldi-table-inl.h	/^  void FreeCurrent() {$/;"	f	class:kaldi::SequentialTableReaderScriptImpl
kaldi::SequentialTableReaderScriptImpl::IsOpen	kaldi-table-inl.h	/^  virtual bool IsOpen() const {$/;"	f	class:kaldi::SequentialTableReaderScriptImpl
kaldi::SequentialTableReaderScriptImpl::Key	kaldi-table-inl.h	/^  virtual std::string Key() {$/;"	f	class:kaldi::SequentialTableReaderScriptImpl
kaldi::SequentialTableReaderScriptImpl::LoadCurrent	kaldi-table-inl.h	/^  bool LoadCurrent() {$/;"	f	class:kaldi::SequentialTableReaderScriptImpl
kaldi::SequentialTableReaderScriptImpl::Next	kaldi-table-inl.h	/^  void Next() {$/;"	f	class:kaldi::SequentialTableReaderScriptImpl
kaldi::SequentialTableReaderScriptImpl::NextScpLine	kaldi-table-inl.h	/^  void NextScpLine() {$/;"	f	class:kaldi::SequentialTableReaderScriptImpl
kaldi::SequentialTableReaderScriptImpl::Open	kaldi-table-inl.h	/^  virtual bool Open(const std::string &rspecifier) {$/;"	f	class:kaldi::SequentialTableReaderScriptImpl
kaldi::SequentialTableReaderScriptImpl::SequentialTableReaderScriptImpl	kaldi-table-inl.h	/^  SequentialTableReaderScriptImpl(): state_(kUninitialized) { }$/;"	f	class:kaldi::SequentialTableReaderScriptImpl
kaldi::SequentialTableReaderScriptImpl::StateType	kaldi-table-inl.h	/^  enum StateType {$/;"	g	class:kaldi::SequentialTableReaderScriptImpl
kaldi::SequentialTableReaderScriptImpl::T	kaldi-table-inl.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::SequentialTableReaderScriptImpl
kaldi::SequentialTableReaderScriptImpl::Value	kaldi-table-inl.h	/^  const T &Value() {$/;"	f	class:kaldi::SequentialTableReaderScriptImpl
kaldi::SequentialTableReaderScriptImpl::binary_	kaldi-table-inl.h	/^  bool binary_;  \/\/ Binary-mode archive.$/;"	m	class:kaldi::SequentialTableReaderScriptImpl
kaldi::SequentialTableReaderScriptImpl::data_input_	kaldi-table-inl.h	/^  Input data_input_;   \/\/ Input object for the entries in$/;"	m	class:kaldi::SequentialTableReaderScriptImpl
kaldi::SequentialTableReaderScriptImpl::data_rxfilename_	kaldi-table-inl.h	/^  std::string data_rxfilename_;  \/\/ of the file we're reading.$/;"	m	class:kaldi::SequentialTableReaderScriptImpl
kaldi::SequentialTableReaderScriptImpl::holder_	kaldi-table-inl.h	/^  Holder holder_;  \/\/ Holds the object.$/;"	m	class:kaldi::SequentialTableReaderScriptImpl
kaldi::SequentialTableReaderScriptImpl::kEof	kaldi-table-inl.h	/^    kEof,     \/\/ We did Next() and found eof in script file.       no         no$/;"	e	enum:kaldi::SequentialTableReaderScriptImpl::StateType
kaldi::SequentialTableReaderScriptImpl::kError	kaldi-table-inl.h	/^    kError,   \/\/ Some other error                                  no         yes$/;"	e	enum:kaldi::SequentialTableReaderScriptImpl::StateType
kaldi::SequentialTableReaderScriptImpl::kFileStart	kaldi-table-inl.h	/^    kFileStart,        \/\/ [state we only use internally]           no         yes$/;"	e	enum:kaldi::SequentialTableReaderScriptImpl::StateType
kaldi::SequentialTableReaderScriptImpl::kHaveScpLine	kaldi-table-inl.h	/^    kHaveScpLine,  \/\/ Just called Open() or Next() and have a       no         yes$/;"	e	enum:kaldi::SequentialTableReaderScriptImpl::StateType
kaldi::SequentialTableReaderScriptImpl::kLoadFailed	kaldi-table-inl.h	/^    kLoadFailed,  \/\/ Called LoadCurrent() and it failed,           no         yes$/;"	e	enum:kaldi::SequentialTableReaderScriptImpl::StateType
kaldi::SequentialTableReaderScriptImpl::kLoadSucceeded	kaldi-table-inl.h	/^    kLoadSucceeded,  \/\/ Called LoadCurrent() and it succeeded.     yes         yes$/;"	e	enum:kaldi::SequentialTableReaderScriptImpl::StateType
kaldi::SequentialTableReaderScriptImpl::kUninitialized	kaldi-table-inl.h	/^    kUninitialized,  \/\/ Uninitialized or closed.                    no         no$/;"	e	enum:kaldi::SequentialTableReaderScriptImpl::StateType
kaldi::SequentialTableReaderScriptImpl::key_	kaldi-table-inl.h	/^  std::string key_;$/;"	m	class:kaldi::SequentialTableReaderScriptImpl
kaldi::SequentialTableReaderScriptImpl::opts_	kaldi-table-inl.h	/^  RspecifierOptions opts_;  \/\/ options.$/;"	m	class:kaldi::SequentialTableReaderScriptImpl
kaldi::SequentialTableReaderScriptImpl::script_input_	kaldi-table-inl.h	/^  Input script_input_;  \/\/ Input object for the .scp file$/;"	m	class:kaldi::SequentialTableReaderScriptImpl
kaldi::SequentialTableReaderScriptImpl::script_rxfilename_	kaldi-table-inl.h	/^  std::string script_rxfilename_;  \/\/ of the script file.$/;"	m	class:kaldi::SequentialTableReaderScriptImpl
kaldi::SequentialTableReaderScriptImpl::state_	kaldi-table-inl.h	/^  } state_;$/;"	m	class:kaldi::SequentialTableReaderScriptImpl	typeref:enum:kaldi::SequentialTableReaderScriptImpl::StateType
kaldi::SequentialTableReaderScriptImpl::~SequentialTableReaderScriptImpl	kaldi-table-inl.h	/^  virtual ~SequentialTableReaderScriptImpl() {$/;"	f	class:kaldi::SequentialTableReaderScriptImpl
kaldi::SequentialTokenReader	table-types.h	/^typedef SequentialTableReader<TokenHolder> SequentialTokenReader;$/;"	t	namespace:kaldi
kaldi::SequentialTokenVectorReader	table-types.h	/^typedef SequentialTableReader<TokenVectorHolder> SequentialTokenVectorReader;$/;"	t	namespace:kaldi
kaldi::ShellType	parse-options.cc	/^enum ShellType { kBash = 0 };  \/\/ We currently do not support any$/;"	g	namespace:kaldi	file:
kaldi::SortAndUniq	stl-utils.h	/^inline void SortAndUniq(std::vector<T> *vec) {$/;"	f	namespace:kaldi
kaldi::SphinxMatrixHolder	kaldi-holder-inl.h	/^template<int kFeatDim=13> class SphinxMatrixHolder {$/;"	c	namespace:kaldi
kaldi::SphinxMatrixHolder::Clear	kaldi-holder-inl.h	/^  void Clear() { feats_.Resize(0, 0); }$/;"	f	class:kaldi::SphinxMatrixHolder
kaldi::SphinxMatrixHolder::IsReadInBinary	kaldi-holder-inl.h	/^  static bool IsReadInBinary() { return true; }$/;"	f	class:kaldi::SphinxMatrixHolder
kaldi::SphinxMatrixHolder::Read	kaldi-holder-inl.h	/^  bool Read(std::istream &is) {$/;"	f	class:kaldi::SphinxMatrixHolder
kaldi::SphinxMatrixHolder::SphinxMatrixHolder	kaldi-holder-inl.h	/^  SphinxMatrixHolder() {}$/;"	f	class:kaldi::SphinxMatrixHolder
kaldi::SphinxMatrixHolder::T	kaldi-holder-inl.h	/^  typedef Matrix<BaseFloat> T;$/;"	t	class:kaldi::SphinxMatrixHolder
kaldi::SphinxMatrixHolder::Value	kaldi-holder-inl.h	/^  const T &Value() const { return feats_; }$/;"	f	class:kaldi::SphinxMatrixHolder
kaldi::SphinxMatrixHolder::Write	kaldi-holder-inl.h	/^  static bool Write(std::ostream &os, bool binary, const T &m) {$/;"	f	class:kaldi::SphinxMatrixHolder
kaldi::SphinxMatrixHolder::feats_	kaldi-holder-inl.h	/^  T feats_;$/;"	m	class:kaldi::SphinxMatrixHolder
kaldi::SplitStringOnFirstSpace	text-utils.cc	/^void SplitStringOnFirstSpace(const std::string &str,$/;"	f	namespace:kaldi
kaldi::SplitStringToFloats	text-utils.cc	/^bool SplitStringToFloats(const std::string &full,$/;"	f	namespace:kaldi
kaldi::SplitStringToIntegers	text-utils.h	/^bool SplitStringToIntegers(const std::string &full,$/;"	f	namespace:kaldi
kaldi::SplitStringToVector	text-utils.cc	/^void SplitStringToVector(const std::string &full, const char *delim,$/;"	f	namespace:kaldi
kaldi::StandardInputImpl	kaldi-io.cc	/^class StandardInputImpl: public InputImplBase {$/;"	c	namespace:kaldi	file:
kaldi::StandardInputImpl::Close	kaldi-io.cc	/^  virtual void Close() {$/;"	f	class:kaldi::StandardInputImpl
kaldi::StandardInputImpl::MyType	kaldi-io.cc	/^  virtual InputType MyType() { return kStandardInput; }$/;"	f	class:kaldi::StandardInputImpl
kaldi::StandardInputImpl::Open	kaldi-io.cc	/^  virtual bool Open(const std::string &filename, bool binary) {$/;"	f	class:kaldi::StandardInputImpl
kaldi::StandardInputImpl::StandardInputImpl	kaldi-io.cc	/^  StandardInputImpl(): is_open_(false) { }$/;"	f	class:kaldi::StandardInputImpl
kaldi::StandardInputImpl::Stream	kaldi-io.cc	/^  virtual std::istream &Stream() {$/;"	f	class:kaldi::StandardInputImpl
kaldi::StandardInputImpl::is_open_	kaldi-io.cc	/^  bool is_open_;$/;"	m	class:kaldi::StandardInputImpl	file:
kaldi::StandardInputImpl::~StandardInputImpl	kaldi-io.cc	/^  virtual ~StandardInputImpl() { }$/;"	f	class:kaldi::StandardInputImpl
kaldi::StandardOutputImpl	kaldi-io.cc	/^class StandardOutputImpl: public OutputImplBase {$/;"	c	namespace:kaldi	file:
kaldi::StandardOutputImpl::Close	kaldi-io.cc	/^  virtual bool Close() {$/;"	f	class:kaldi::StandardOutputImpl
kaldi::StandardOutputImpl::Open	kaldi-io.cc	/^  virtual bool Open(const std::string &filename, bool binary) {$/;"	f	class:kaldi::StandardOutputImpl
kaldi::StandardOutputImpl::StandardOutputImpl	kaldi-io.cc	/^  StandardOutputImpl(): is_open_(false) { }$/;"	f	class:kaldi::StandardOutputImpl
kaldi::StandardOutputImpl::Stream	kaldi-io.cc	/^  virtual std::ostream &Stream() {$/;"	f	class:kaldi::StandardOutputImpl
kaldi::StandardOutputImpl::is_open_	kaldi-io.cc	/^  bool is_open_;$/;"	m	class:kaldi::StandardOutputImpl	file:
kaldi::StandardOutputImpl::~StandardOutputImpl	kaldi-io.cc	/^  virtual ~StandardOutputImpl() {$/;"	f	class:kaldi::StandardOutputImpl
kaldi::StringHasher	stl-utils.h	/^struct StringHasher {  \/\/ hashing function for std::string$/;"	s	namespace:kaldi
kaldi::StringHasher::kPrime	stl-utils.h	/^  static const int kPrime = 7853;$/;"	m	struct:kaldi::StringHasher
kaldi::StringHasher::operator ()	stl-utils.h	/^  size_t operator()(const std::string &str) const {$/;"	f	struct:kaldi::StringHasher
kaldi::TableWriter	kaldi-table.h	/^class TableWriter {$/;"	c	namespace:kaldi
kaldi::TableWriter::CheckImpl	kaldi-table-inl.h	/^void TableWriter<Holder>::CheckImpl() const {$/;"	f	class:kaldi::TableWriter
kaldi::TableWriter::Close	kaldi-table-inl.h	/^bool TableWriter<Holder>::Close() {$/;"	f	class:kaldi::TableWriter
kaldi::TableWriter::Flush	kaldi-table-inl.h	/^void TableWriter<Holder>::Flush() {$/;"	f	class:kaldi::TableWriter
kaldi::TableWriter::IsOpen	kaldi-table-inl.h	/^bool TableWriter<Holder>::IsOpen() const {$/;"	f	class:kaldi::TableWriter
kaldi::TableWriter::Open	kaldi-table-inl.h	/^bool TableWriter<Holder>::Open(const std::string &wspecifier) {$/;"	f	class:kaldi::TableWriter
kaldi::TableWriter::T	kaldi-table.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::TableWriter
kaldi::TableWriter::TableWriter	kaldi-table-inl.h	/^TableWriter<Holder>::TableWriter(const std::string &wspecifier): impl_(NULL) {$/;"	f	class:kaldi::TableWriter
kaldi::TableWriter::TableWriter	kaldi-table.h	/^  TableWriter(): impl_(NULL) { }$/;"	f	class:kaldi::TableWriter
kaldi::TableWriter::Write	kaldi-table-inl.h	/^void TableWriter<Holder>::Write(const std::string &key,$/;"	f	class:kaldi::TableWriter
kaldi::TableWriter::impl_	kaldi-table.h	/^  TableWriterImplBase<Holder> *impl_;$/;"	m	class:kaldi::TableWriter
kaldi::TableWriter::~TableWriter	kaldi-table-inl.h	/^TableWriter<Holder>::~TableWriter() {$/;"	f	class:kaldi::TableWriter
kaldi::TableWriterArchiveImpl	kaldi-table-inl.h	/^class TableWriterArchiveImpl: public TableWriterImplBase<Holder> {$/;"	c	namespace:kaldi
kaldi::TableWriterArchiveImpl::Close	kaldi-table-inl.h	/^  virtual bool Close() {$/;"	f	class:kaldi::TableWriterArchiveImpl
kaldi::TableWriterArchiveImpl::Flush	kaldi-table-inl.h	/^  virtual void Flush() {$/;"	f	class:kaldi::TableWriterArchiveImpl
kaldi::TableWriterArchiveImpl::IsOpen	kaldi-table-inl.h	/^  virtual bool IsOpen() const {$/;"	f	class:kaldi::TableWriterArchiveImpl
kaldi::TableWriterArchiveImpl::Open	kaldi-table-inl.h	/^  virtual bool Open(const std::string &wspecifier) {$/;"	f	class:kaldi::TableWriterArchiveImpl
kaldi::TableWriterArchiveImpl::T	kaldi-table-inl.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::TableWriterArchiveImpl
kaldi::TableWriterArchiveImpl::TableWriterArchiveImpl	kaldi-table-inl.h	/^  TableWriterArchiveImpl(): state_(kUninitialized) {}$/;"	f	class:kaldi::TableWriterArchiveImpl
kaldi::TableWriterArchiveImpl::Write	kaldi-table-inl.h	/^  virtual bool Write(const std::string &key, const T &value) {$/;"	f	class:kaldi::TableWriterArchiveImpl
kaldi::TableWriterArchiveImpl::archive_wxfilename_	kaldi-table-inl.h	/^  std::string archive_wxfilename_;$/;"	m	class:kaldi::TableWriterArchiveImpl
kaldi::TableWriterArchiveImpl::kOpen	kaldi-table-inl.h	/^    kOpen,             \/\/ yes$/;"	e	enum:kaldi::TableWriterArchiveImpl::__anon2
kaldi::TableWriterArchiveImpl::kUninitialized	kaldi-table-inl.h	/^    kUninitialized,    \/\/ no$/;"	e	enum:kaldi::TableWriterArchiveImpl::__anon2
kaldi::TableWriterArchiveImpl::kWriteError	kaldi-table-inl.h	/^    kWriteError,       \/\/ yes$/;"	e	enum:kaldi::TableWriterArchiveImpl::__anon2
kaldi::TableWriterArchiveImpl::opts_	kaldi-table-inl.h	/^  WspecifierOptions opts_;$/;"	m	class:kaldi::TableWriterArchiveImpl
kaldi::TableWriterArchiveImpl::output_	kaldi-table-inl.h	/^  Output output_;$/;"	m	class:kaldi::TableWriterArchiveImpl
kaldi::TableWriterArchiveImpl::state_	kaldi-table-inl.h	/^  } state_;$/;"	m	class:kaldi::TableWriterArchiveImpl	typeref:enum:kaldi::TableWriterArchiveImpl::__anon2
kaldi::TableWriterArchiveImpl::~TableWriterArchiveImpl	kaldi-table-inl.h	/^  virtual ~TableWriterArchiveImpl() {$/;"	f	class:kaldi::TableWriterArchiveImpl
kaldi::TableWriterBothImpl	kaldi-table-inl.h	/^class TableWriterBothImpl: public TableWriterImplBase<Holder> {$/;"	c	namespace:kaldi
kaldi::TableWriterBothImpl::Close	kaldi-table-inl.h	/^  virtual bool Close() {$/;"	f	class:kaldi::TableWriterBothImpl
kaldi::TableWriterBothImpl::Flush	kaldi-table-inl.h	/^  virtual void Flush() {$/;"	f	class:kaldi::TableWriterBothImpl
kaldi::TableWriterBothImpl::IsOpen	kaldi-table-inl.h	/^  virtual bool IsOpen() const {$/;"	f	class:kaldi::TableWriterBothImpl
kaldi::TableWriterBothImpl::MakeFilename	kaldi-table-inl.h	/^  void MakeFilename(typename std::ostream::pos_type streampos, std::string *output) const {$/;"	f	class:kaldi::TableWriterBothImpl
kaldi::TableWriterBothImpl::Open	kaldi-table-inl.h	/^  virtual bool Open(const std::string &wspecifier) {$/;"	f	class:kaldi::TableWriterBothImpl
kaldi::TableWriterBothImpl::T	kaldi-table-inl.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::TableWriterBothImpl
kaldi::TableWriterBothImpl::TableWriterBothImpl	kaldi-table-inl.h	/^  TableWriterBothImpl(): state_(kUninitialized) {}$/;"	f	class:kaldi::TableWriterBothImpl
kaldi::TableWriterBothImpl::Write	kaldi-table-inl.h	/^  virtual bool Write(const std::string &key, const T &value) {$/;"	f	class:kaldi::TableWriterBothImpl
kaldi::TableWriterBothImpl::archive_output_	kaldi-table-inl.h	/^  Output archive_output_;$/;"	m	class:kaldi::TableWriterBothImpl
kaldi::TableWriterBothImpl::archive_wxfilename_	kaldi-table-inl.h	/^  std::string archive_wxfilename_;$/;"	m	class:kaldi::TableWriterBothImpl
kaldi::TableWriterBothImpl::kOpen	kaldi-table-inl.h	/^    kOpen,             \/\/ yes$/;"	e	enum:kaldi::TableWriterBothImpl::__anon4
kaldi::TableWriterBothImpl::kUninitialized	kaldi-table-inl.h	/^    kUninitialized,    \/\/ no$/;"	e	enum:kaldi::TableWriterBothImpl::__anon4
kaldi::TableWriterBothImpl::kWriteError	kaldi-table-inl.h	/^    kWriteError,       \/\/ yes$/;"	e	enum:kaldi::TableWriterBothImpl::__anon4
kaldi::TableWriterBothImpl::opts_	kaldi-table-inl.h	/^  WspecifierOptions opts_;$/;"	m	class:kaldi::TableWriterBothImpl
kaldi::TableWriterBothImpl::script_output_	kaldi-table-inl.h	/^  Output script_output_;$/;"	m	class:kaldi::TableWriterBothImpl
kaldi::TableWriterBothImpl::script_wxfilename_	kaldi-table-inl.h	/^  std::string script_wxfilename_;$/;"	m	class:kaldi::TableWriterBothImpl
kaldi::TableWriterBothImpl::state_	kaldi-table-inl.h	/^  } state_;$/;"	m	class:kaldi::TableWriterBothImpl	typeref:enum:kaldi::TableWriterBothImpl::__anon4
kaldi::TableWriterBothImpl::wspecifier_	kaldi-table-inl.h	/^  std::string wspecifier_;$/;"	m	class:kaldi::TableWriterBothImpl
kaldi::TableWriterBothImpl::~TableWriterBothImpl	kaldi-table-inl.h	/^  virtual ~TableWriterBothImpl() {$/;"	f	class:kaldi::TableWriterBothImpl
kaldi::TableWriterImplBase	kaldi-table-inl.h	/^template<class Holder> class TableWriterImplBase {$/;"	c	namespace:kaldi
kaldi::TableWriterImplBase::T	kaldi-table-inl.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::TableWriterImplBase
kaldi::TableWriterImplBase::~TableWriterImplBase	kaldi-table-inl.h	/^  virtual ~TableWriterImplBase() { }$/;"	f	class:kaldi::TableWriterImplBase
kaldi::TableWriterScriptImpl	kaldi-table-inl.h	/^class TableWriterScriptImpl: public TableWriterImplBase<Holder> {$/;"	c	namespace:kaldi
kaldi::TableWriterScriptImpl::Close	kaldi-table-inl.h	/^  virtual bool Close() {$/;"	f	class:kaldi::TableWriterScriptImpl
kaldi::TableWriterScriptImpl::Flush	kaldi-table-inl.h	/^  virtual void Flush() { }$/;"	f	class:kaldi::TableWriterScriptImpl
kaldi::TableWriterScriptImpl::IsOpen	kaldi-table-inl.h	/^  virtual bool IsOpen() const {  return (state_ == kReadScript);  }$/;"	f	class:kaldi::TableWriterScriptImpl
kaldi::TableWriterScriptImpl::LookupFilename	kaldi-table-inl.h	/^  bool LookupFilename(const std::string &key, std::string *wxfilename) {$/;"	f	class:kaldi::TableWriterScriptImpl
kaldi::TableWriterScriptImpl::Open	kaldi-table-inl.h	/^  virtual bool Open(const std::string &wspecifier) {$/;"	f	class:kaldi::TableWriterScriptImpl
kaldi::TableWriterScriptImpl::T	kaldi-table-inl.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::TableWriterScriptImpl
kaldi::TableWriterScriptImpl::TableWriterScriptImpl	kaldi-table-inl.h	/^  TableWriterScriptImpl(): last_found_(0), state_(kUninitialized) {}$/;"	f	class:kaldi::TableWriterScriptImpl
kaldi::TableWriterScriptImpl::Write	kaldi-table-inl.h	/^  virtual bool Write(const std::string &key, const T &value) {$/;"	f	class:kaldi::TableWriterScriptImpl
kaldi::TableWriterScriptImpl::kNotReadScript	kaldi-table-inl.h	/^    kNotReadScript,  \/\/ read of script failed.$/;"	e	enum:kaldi::TableWriterScriptImpl::__anon3
kaldi::TableWriterScriptImpl::kReadScript	kaldi-table-inl.h	/^    kReadScript,$/;"	e	enum:kaldi::TableWriterScriptImpl::__anon3
kaldi::TableWriterScriptImpl::kUninitialized	kaldi-table-inl.h	/^    kUninitialized,$/;"	e	enum:kaldi::TableWriterScriptImpl::__anon3
kaldi::TableWriterScriptImpl::last_found_	kaldi-table-inl.h	/^  size_t last_found_;  \/\/ This is for an optimization used in LookupFilename.$/;"	m	class:kaldi::TableWriterScriptImpl
kaldi::TableWriterScriptImpl::opts_	kaldi-table-inl.h	/^  WspecifierOptions opts_;$/;"	m	class:kaldi::TableWriterScriptImpl
kaldi::TableWriterScriptImpl::script_	kaldi-table-inl.h	/^  std::vector<std::pair<std::string, std::string> > script_;$/;"	m	class:kaldi::TableWriterScriptImpl
kaldi::TableWriterScriptImpl::script_rxfilename_	kaldi-table-inl.h	/^  std::string script_rxfilename_;$/;"	m	class:kaldi::TableWriterScriptImpl
kaldi::TableWriterScriptImpl::state_	kaldi-table-inl.h	/^  } state_;$/;"	m	class:kaldi::TableWriterScriptImpl	typeref:enum:kaldi::TableWriterScriptImpl::__anon3
kaldi::TableWriterScriptImpl::~TableWriterScriptImpl	kaldi-table-inl.h	/^  virtual ~TableWriterScriptImpl() {$/;"	f	class:kaldi::TableWriterScriptImpl
kaldi::TestContainsNullPointers	stl-utils-test.cc	/^void TestContainsNullPointers() {$/;"	f	namespace:kaldi
kaldi::TestConvertStringToInteger	text-utils-test.cc	/^void TestConvertStringToInteger() {$/;"	f	namespace:kaldi
kaldi::TestConvertStringToReal	text-utils-test.cc	/^void TestConvertStringToReal() {$/;"	f	namespace:kaldi
kaldi::TestCopyMapKeysToSet	stl-utils-test.cc	/^void TestCopyMapKeysToSet() {$/;"	f	namespace:kaldi
kaldi::TestCopyMapKeysToVector	stl-utils-test.cc	/^void TestCopyMapKeysToVector() {$/;"	f	namespace:kaldi
kaldi::TestCopyMapToVector	stl-utils-test.cc	/^void TestCopyMapToVector() {$/;"	f	namespace:kaldi
kaldi::TestCopyMapValuesToSet	stl-utils-test.cc	/^void TestCopyMapValuesToSet() {$/;"	f	namespace:kaldi
kaldi::TestCopyMapValuesToVector	stl-utils-test.cc	/^void TestCopyMapValuesToVector() {$/;"	f	namespace:kaldi
kaldi::TestCopySetToVector	stl-utils-test.cc	/^void TestCopySetToVector() {$/;"	f	namespace:kaldi
kaldi::TestEditDistance	edit-distance-test.cc	/^void TestEditDistance() {$/;"	f	namespace:kaldi
kaldi::TestEditDistance2	edit-distance-test.cc	/^void TestEditDistance2() {$/;"	f	namespace:kaldi
kaldi::TestEditDistance2String	edit-distance-test.cc	/^void TestEditDistance2String() {$/;"	f	namespace:kaldi
kaldi::TestEditDistanceString	edit-distance-test.cc	/^void TestEditDistanceString() {$/;"	f	namespace:kaldi
kaldi::TestHashList	hash-list-test.cc	/^template<class Int, class T> void TestHashList() {$/;"	f	namespace:kaldi
kaldi::TestIsLine	text-utils-test.cc	/^void TestIsLine() {$/;"	f	namespace:kaldi
kaldi::TestIsSorted	stl-utils-test.cc	/^static void TestIsSorted() {$/;"	f	namespace:kaldi
kaldi::TestIsSortedAndUniq	stl-utils-test.cc	/^static void TestIsSortedAndUniq() {$/;"	f	namespace:kaldi
kaldi::TestIsToken	text-utils-test.cc	/^void TestIsToken() {$/;"	f	namespace:kaldi
kaldi::TestLevenshteinAlignment	edit-distance-test.cc	/^void TestLevenshteinAlignment() {$/;"	f	namespace:kaldi
kaldi::TestMergePairVectorSumming	stl-utils-test.cc	/^void TestMergePairVectorSumming() {$/;"	f	namespace:kaldi
kaldi::TestReverseVector	stl-utils-test.cc	/^void TestReverseVector() {$/;"	f	namespace:kaldi
kaldi::TestSetOfNumbers	const-integer-set-test.cc	/^template<class Int> void TestSetOfNumbers(bool binary) {$/;"	f	namespace:kaldi
kaldi::TestSortAndUniq	stl-utils-test.cc	/^static void TestSortAndUniq() {$/;"	f	namespace:kaldi
kaldi::TestSplitStringOnFirstSpace	text-utils-test.cc	/^void TestSplitStringOnFirstSpace() {$/;"	f	namespace:kaldi
kaldi::TestSplitStringToFloats	text-utils-test.cc	/^void TestSplitStringToFloats() {$/;"	f	namespace:kaldi
kaldi::TestSplitStringToIntegers	text-utils-test.cc	/^void TestSplitStringToIntegers() {$/;"	f	namespace:kaldi
kaldi::TestSplitStringToVector	text-utils-test.cc	/^void TestSplitStringToVector() {$/;"	f	namespace:kaldi
kaldi::TestTrim	text-utils-test.cc	/^void TestTrim() {$/;"	f	namespace:kaldi
kaldi::TestUniq	stl-utils-test.cc	/^static void TestUniq() {$/;"	f	namespace:kaldi
kaldi::Timer	timer.h	/^class Timer {$/;"	c	namespace:kaldi
kaldi::Timer::Elapsed	timer.h	/^  double Elapsed() {$/;"	f	class:kaldi::Timer
kaldi::Timer::Reset	timer.h	/^  void Reset() {$/;"	f	class:kaldi::Timer
kaldi::Timer::Timer	timer.h	/^  Timer() { Reset(); }$/;"	f	class:kaldi::Timer
kaldi::Timer::time_start_	timer.h	/^  LARGE_INTEGER time_start_;$/;"	m	class:kaldi::Timer
kaldi::TimerTest	timer-test.cc	/^void TimerTest() {$/;"	f	namespace:kaldi
kaldi::TokenHolder	kaldi-holder-inl.h	/^class TokenHolder {$/;"	c	namespace:kaldi
kaldi::TokenHolder::Clear	kaldi-holder-inl.h	/^  void Clear() { t_.clear(); }$/;"	f	class:kaldi::TokenHolder
kaldi::TokenHolder::IsReadInBinary	kaldi-holder-inl.h	/^  static bool IsReadInBinary() { return false; }$/;"	f	class:kaldi::TokenHolder
kaldi::TokenHolder::Read	kaldi-holder-inl.h	/^  bool Read(std::istream &is) {$/;"	f	class:kaldi::TokenHolder
kaldi::TokenHolder::T	kaldi-holder-inl.h	/^  typedef std::string T;$/;"	t	class:kaldi::TokenHolder
kaldi::TokenHolder::TokenHolder	kaldi-holder-inl.h	/^  TokenHolder() {}$/;"	f	class:kaldi::TokenHolder
kaldi::TokenHolder::Value	kaldi-holder-inl.h	/^  const T &Value() const { return t_; }$/;"	f	class:kaldi::TokenHolder
kaldi::TokenHolder::Write	kaldi-holder-inl.h	/^  static bool Write(std::ostream &os, bool, const T &t) {  \/\/ ignore binary-mode.$/;"	f	class:kaldi::TokenHolder
kaldi::TokenHolder::t_	kaldi-holder-inl.h	/^  T t_;$/;"	m	class:kaldi::TokenHolder
kaldi::TokenHolder::~TokenHolder	kaldi-holder-inl.h	/^  ~TokenHolder() { }$/;"	f	class:kaldi::TokenHolder
kaldi::TokenVectorHolder	kaldi-holder-inl.h	/^class TokenVectorHolder {$/;"	c	namespace:kaldi
kaldi::TokenVectorHolder::Clear	kaldi-holder-inl.h	/^  void Clear() { t_.clear(); }$/;"	f	class:kaldi::TokenVectorHolder
kaldi::TokenVectorHolder::IsReadInBinary	kaldi-holder-inl.h	/^  static bool IsReadInBinary() { return false; }$/;"	f	class:kaldi::TokenVectorHolder
kaldi::TokenVectorHolder::Read	kaldi-holder-inl.h	/^  bool Read(std::istream &is) {$/;"	f	class:kaldi::TokenVectorHolder
kaldi::TokenVectorHolder::T	kaldi-holder-inl.h	/^  typedef std::vector<std::string> T;$/;"	t	class:kaldi::TokenVectorHolder
kaldi::TokenVectorHolder::TokenVectorHolder	kaldi-holder-inl.h	/^  TokenVectorHolder() { }$/;"	f	class:kaldi::TokenVectorHolder
kaldi::TokenVectorHolder::Value	kaldi-holder-inl.h	/^  const T &Value() const { return t_; }$/;"	f	class:kaldi::TokenVectorHolder
kaldi::TokenVectorHolder::Write	kaldi-holder-inl.h	/^  static bool Write(std::ostream &os, bool, const T &t) {  \/\/ ignore binary-mode.$/;"	f	class:kaldi::TokenVectorHolder
kaldi::TokenVectorHolder::t_	kaldi-holder-inl.h	/^  T t_;$/;"	m	class:kaldi::TokenVectorHolder
kaldi::TokenVectorWriter	table-types.h	/^typedef TableWriter<TokenVectorHolder> TokenVectorWriter;$/;"	t	namespace:kaldi
kaldi::TokenWriter	table-types.h	/^typedef TableWriter<TokenHolder> TokenWriter;$/;"	t	namespace:kaldi
kaldi::Trim	text-utils.cc	/^void Trim(std::string *str) {$/;"	f	namespace:kaldi
kaldi::TrimTmp	text-utils-test.cc	/^std::string TrimTmp(std::string s) {$/;"	f	namespace:kaldi
kaldi::Uniq	stl-utils.h	/^inline void Uniq(std::vector<T> *vec) {  \/\/ must be already sorted.$/;"	f	namespace:kaldi
kaldi::UnitTestClassifyRspecifier	kaldi-table-test.cc	/^void UnitTestClassifyRspecifier() {$/;"	f	namespace:kaldi
kaldi::UnitTestClassifyRxfilename	kaldi-io-test.cc	/^void UnitTestClassifyRxfilename() {$/;"	f	namespace:kaldi
kaldi::UnitTestClassifyWspecifier	kaldi-table-test.cc	/^void UnitTestClassifyWspecifier() {$/;"	f	namespace:kaldi
kaldi::UnitTestClassifyWxfilename	kaldi-io-test.cc	/^void UnitTestClassifyWxfilename() {$/;"	f	namespace:kaldi
kaldi::UnitTestIoNew	kaldi-io-test.cc	/^void UnitTestIoNew(bool binary) {$/;"	f	namespace:kaldi
kaldi::UnitTestIoPipe	kaldi-io-test.cc	/^void UnitTestIoPipe(bool binary) {$/;"	f	namespace:kaldi
kaldi::UnitTestIoStandard	kaldi-io-test.cc	/^void UnitTestIoStandard() {$/;"	f	namespace:kaldi
kaldi::UnitTestParseOptions	parse-options-test.cc	/^void UnitTestParseOptions() {$/;"	f	namespace:kaldi
kaldi::UnitTestReadScriptFile	kaldi-table-test.cc	/^void UnitTestReadScriptFile() {$/;"	f	namespace:kaldi
kaldi::UnitTestTableRandomBothDouble	kaldi-table-test.cc	/^void UnitTestTableRandomBothDouble(bool binary, bool read_scp,$/;"	f	namespace:kaldi
kaldi::UnitTestTableRandomBothDoubleMatrix	kaldi-table-test.cc	/^void UnitTestTableRandomBothDoubleMatrix(bool binary, bool read_scp,$/;"	f	namespace:kaldi
kaldi::UnitTestTableSequentialBaseFloatVectorBoth	kaldi-table-test.cc	/^void UnitTestTableSequentialBaseFloatVectorBoth(bool binary, bool read_scp) {$/;"	f	namespace:kaldi
kaldi::UnitTestTableSequentialBool	kaldi-table-test.cc	/^void UnitTestTableSequentialBool(bool binary) {$/;"	f	namespace:kaldi
kaldi::UnitTestTableSequentialDouble	kaldi-table-test.cc	/^void UnitTestTableSequentialDouble(bool binary) {$/;"	f	namespace:kaldi
kaldi::UnitTestTableSequentialDoubleBoth	kaldi-table-test.cc	/^void UnitTestTableSequentialDoubleBoth(bool binary, bool read_scp) {$/;"	f	namespace:kaldi
kaldi::UnitTestTableSequentialDoubleMatrixBoth	kaldi-table-test.cc	/^void UnitTestTableSequentialDoubleMatrixBoth(bool binary, bool read_scp) {$/;"	f	namespace:kaldi
kaldi::UnitTestTableSequentialInt32	kaldi-table-test.cc	/^void UnitTestTableSequentialInt32(bool binary) {$/;"	f	namespace:kaldi
kaldi::UnitTestTableSequentialInt32PairVectorBoth	kaldi-table-test.cc	/^void UnitTestTableSequentialInt32PairVectorBoth(bool binary, bool read_scp) {$/;"	f	namespace:kaldi
kaldi::UnitTestTableSequentialInt32Script	kaldi-table-test.cc	/^void UnitTestTableSequentialInt32Script(bool binary) {$/;"	f	namespace:kaldi
kaldi::UnitTestTableSequentialInt32VectorBoth	kaldi-table-test.cc	/^void UnitTestTableSequentialInt32VectorBoth(bool binary, bool read_scp) {$/;"	f	namespace:kaldi
kaldi::UnitTestTableSequentialInt32VectorVectorBoth	kaldi-table-test.cc	/^void UnitTestTableSequentialInt32VectorVectorBoth(bool binary, bool read_scp) {$/;"	f	namespace:kaldi
kaldi::VectorHasher	stl-utils.h	/^struct VectorHasher {  \/\/ hashing function for vector<Int>.$/;"	s	namespace:kaldi
kaldi::VectorHasher::VectorHasher	stl-utils.h	/^  VectorHasher() {  \/\/ Check we're instantiated with an integer type.$/;"	f	struct:kaldi::VectorHasher
kaldi::VectorHasher::kPrime	stl-utils.h	/^  static const int kPrime = 7853;$/;"	m	struct:kaldi::VectorHasher
kaldi::VectorHasher::operator ()	stl-utils.h	/^  size_t operator()(const std::vector<Int> &x) const {$/;"	f	struct:kaldi::VectorHasher
kaldi::WriteIntegerVectorSimple	simple-io-funcs.cc	/^bool WriteIntegerVectorSimple(std::string wxfilename, const std::vector<int32> &list) {$/;"	f	namespace:kaldi
kaldi::WriteIntegerVectorVectorSimple	simple-io-funcs.cc	/^bool WriteIntegerVectorVectorSimple(std::string wxfilename, const std::vector<std::vector<int32> > &list) {$/;"	f	namespace:kaldi
kaldi::WriteKaldiObject	kaldi-io.h	/^template <class C> inline void WriteKaldiObject(const C &c,$/;"	f	namespace:kaldi
kaldi::WriteScriptFile	kaldi-table.cc	/^bool WriteScriptFile(const std::string &wxfilename,$/;"	f	namespace:kaldi
kaldi::WriteScriptFile	kaldi-table.cc	/^bool WriteScriptFile(std::ostream &os,$/;"	f	namespace:kaldi
kaldi::WspecifierOptions	kaldi-table.h	/^struct WspecifierOptions {$/;"	s	namespace:kaldi
kaldi::WspecifierOptions::WspecifierOptions	kaldi-table.h	/^  WspecifierOptions(): binary(true), flush(false) { }$/;"	f	struct:kaldi::WspecifierOptions
kaldi::WspecifierOptions::binary	kaldi-table.h	/^  bool binary;$/;"	m	struct:kaldi::WspecifierOptions
kaldi::WspecifierOptions::flush	kaldi-table.h	/^  bool flush;$/;"	m	struct:kaldi::WspecifierOptions
kaldi::WspecifierType	kaldi-table.h	/^enum WspecifierType  {$/;"	g	namespace:kaldi
kaldi::basic_pipebuf	kaldi-pipebuf.h	/^class basic_pipebuf : public std::basic_filebuf<CharType, Traits>$/;"	c	namespace:kaldi
kaldi::basic_pipebuf::ThisType	kaldi-pipebuf.h	/^  typedef basic_pipebuf<CharType, Traits>   ThisType;$/;"	t	class:kaldi::basic_pipebuf
kaldi::basic_pipebuf::basic_pipebuf	kaldi-pipebuf.h	/^  basic_pipebuf(FILE *fptr, std::ios_base::openmode mode)$/;"	f	class:kaldi::basic_pipebuf
kaldi::error_stats	edit-distance-inl.h	/^struct error_stats{$/;"	s	namespace:kaldi
kaldi::error_stats::del_num	edit-distance-inl.h	/^  int32 del_num;$/;"	m	struct:kaldi::error_stats
kaldi::error_stats::ins_num	edit-distance-inl.h	/^  int32 ins_num;$/;"	m	struct:kaldi::error_stats
kaldi::error_stats::sub_num	edit-distance-inl.h	/^  int32 sub_num;$/;"	m	struct:kaldi::error_stats
kaldi::error_stats::total_cost	edit-distance-inl.h	/^  int32 total_cost;  \/\/ minimum total cost to the current alignment.$/;"	m	struct:kaldi::error_stats
kaldi::kArchiveRspecifier	kaldi-table.h	/^  kArchiveRspecifier,$/;"	e	enum:kaldi::RspecifierType
kaldi::kArchiveWspecifier	kaldi-table.h	/^  kArchiveWspecifier,$/;"	e	enum:kaldi::WspecifierType
kaldi::kBash	parse-options.cc	/^enum ShellType { kBash = 0 };  \/\/ We currently do not support any$/;"	e	enum:kaldi::ShellType	file:
kaldi::kBothWspecifier	kaldi-table.h	/^  kBothWspecifier$/;"	e	enum:kaldi::WspecifierType
kaldi::kFileInput	kaldi-io.h	/^  kFileInput,$/;"	e	enum:kaldi::InputType
kaldi::kFileOutput	kaldi-io.h	/^  kFileOutput,$/;"	e	enum:kaldi::OutputType
kaldi::kNoInput	kaldi-io.h	/^  kNoInput,$/;"	e	enum:kaldi::InputType
kaldi::kNoOutput	kaldi-io.h	/^  kNoOutput,$/;"	e	enum:kaldi::OutputType
kaldi::kNoRspecifier	kaldi-table.h	/^  kNoRspecifier,$/;"	e	enum:kaldi::RspecifierType
kaldi::kNoWspecifier	kaldi-table.h	/^  kNoWspecifier,$/;"	e	enum:kaldi::WspecifierType
kaldi::kOffsetFileInput	kaldi-io.h	/^  kOffsetFileInput,$/;"	e	enum:kaldi::InputType
kaldi::kPipeInput	kaldi-io.h	/^  kPipeInput$/;"	e	enum:kaldi::InputType
kaldi::kPipeOutput	kaldi-io.h	/^  kPipeOutput$/;"	e	enum:kaldi::OutputType
kaldi::kScriptRspecifier	kaldi-table.h	/^  kScriptRspecifier$/;"	e	enum:kaldi::RspecifierType
kaldi::kScriptWspecifier	kaldi-table.h	/^  kScriptWspecifier,$/;"	e	enum:kaldi::WspecifierType
kaldi::kShellType	parse-options.cc	/^static ShellType kShellType = kBash;  \/\/ This can be changed in the$/;"	m	namespace:kaldi	file:
kaldi::kStandardInput	kaldi-io.h	/^  kStandardInput,$/;"	e	enum:kaldi::InputType
kaldi::kStandardOutput	kaldi-io.h	/^  kStandardOutput,$/;"	e	enum:kaldi::OutputType
kaldi::ws_delim	text-utils-test.cc	/^const char *ws_delim = " \\t\\n\\r";$/;"	m	namespace:kaldi	file:
key	hash-list.h	/^    I key;$/;"	m	struct:kaldi::HashList::Elem
key_	kaldi-table-inl.h	/^  std::string key_;$/;"	m	class:kaldi::SequentialTableReaderArchiveImpl
key_	kaldi-table-inl.h	/^  std::string key_;$/;"	m	class:kaldi::SequentialTableReaderScriptImpl
last_elem	hash-list.h	/^    Elem *last_elem;  \/\/ pointer to last element in this bucket (NULL if empty)$/;"	m	struct:kaldi::HashList::HashBucket
last_found_	kaldi-table-inl.h	/^  size_t last_found_;  \/\/ This is for an optimization used in FindFilename.$/;"	m	class:kaldi::RandomAccessTableReaderScriptImpl
last_found_	kaldi-table-inl.h	/^  size_t last_found_;  \/\/ This is for an optimization used in LookupFilename.$/;"	m	class:kaldi::TableWriterScriptImpl
last_found_index_	kaldi-table-inl.h	/^  size_t last_found_index_;  \/\/ An optimization s.t. if FindKeyInternal called twice with$/;"	m	class:kaldi::RandomAccessTableReaderSortedArchiveImpl
last_requested_key_	kaldi-table-inl.h	/^  std::string last_requested_key_;$/;"	m	class:kaldi::RandomAccessTableReaderDSortedArchiveImpl
list_head_	hash-list.h	/^  Elem *list_head_;  \/\/ head of currently stored list.$/;"	m	class:kaldi::HashList
lowest_member_	const-integer-set.h	/^  I lowest_member_;$/;"	m	class:kaldi::ConstIntegerSet
main	const-integer-set-test.cc	/^int main() {$/;"	f
main	edit-distance-test.cc	/^int main() {$/;"	f
main	hash-list-test.cc	/^int main() {$/;"	f
main	kaldi-io-test.cc	/^int main() {$/;"	f
main	kaldi-table-test.cc	/^int main() {$/;"	f
main	parse-options-test.cc	/^int main() {$/;"	f
main	stl-utils-test.cc	/^int main() {$/;"	f
main	text-utils-test.cc	/^int main() {$/;"	f
main	timer-test.cc	/^int main() {$/;"	f
map_	kaldi-table-inl.h	/^  MapType map_;$/;"	m	class:kaldi::RandomAccessTableReaderUnsortedArchiveImpl
name_	parse-options.h	/^    std::string name_;$/;"	m	struct:kaldi::ParseOptions::DocInfo
once	kaldi-table.h	/^  bool once;   \/\/ we assert that the program will only ask for each key once.$/;"	m	struct:kaldi::RspecifierOptions
operator ()	kaldi-table-inl.h	/^    inline bool operator() (const std::pair<std::string, Holder*> &pr1,$/;"	f	struct:kaldi::RandomAccessTableReaderSortedArchiveImpl::PairCompare
operator ()	stl-utils.h	/^  inline bool operator() (const std::pair<A, B> &p1,$/;"	f	struct:kaldi::CompareFirstMemberOfPair
operator ()	stl-utils.h	/^  size_t operator()(const std::pair<Int,Int> &x) const {$/;"	f	struct:kaldi::PairHasher
operator ()	stl-utils.h	/^  size_t operator()(const std::string &str) const {$/;"	f	struct:kaldi::StringHasher
operator ()	stl-utils.h	/^  size_t operator()(const std::vector<Int> &x) const {$/;"	f	struct:kaldi::VectorHasher
opts_	kaldi-table-inl.h	/^  RspecifierOptions opts_;  \/\/ options.$/;"	m	class:kaldi::SequentialTableReaderScriptImpl
opts_	kaldi-table-inl.h	/^  RspecifierOptions opts_;$/;"	m	class:kaldi::RandomAccessTableReaderArchiveImplBase
opts_	kaldi-table-inl.h	/^  RspecifierOptions opts_;$/;"	m	class:kaldi::RandomAccessTableReaderScriptImpl
opts_	kaldi-table-inl.h	/^  RspecifierOptions opts_;$/;"	m	class:kaldi::SequentialTableReaderArchiveImpl
opts_	kaldi-table-inl.h	/^  WspecifierOptions opts_;$/;"	m	class:kaldi::TableWriterArchiveImpl
opts_	kaldi-table-inl.h	/^  WspecifierOptions opts_;$/;"	m	class:kaldi::TableWriterBothImpl
opts_	kaldi-table-inl.h	/^  WspecifierOptions opts_;$/;"	m	class:kaldi::TableWriterScriptImpl
os_	kaldi-io.cc	/^  std::ofstream os_;$/;"	m	class:kaldi::FileOutputImpl	file:
os_	kaldi-io.cc	/^  std::ostream *os_;$/;"	m	class:kaldi::PipeOutputImpl	file:
output_	kaldi-table-inl.h	/^  Output output_;$/;"	m	class:kaldi::TableWriterArchiveImpl
pending_delete_	kaldi-table-inl.h	/^  size_t pending_delete_;  \/\/ If opts_.once == true, this is the index of$/;"	m	class:kaldi::RandomAccessTableReaderSortedArchiveImpl
permissive	kaldi-table.h	/^  bool permissive;  \/\/ If "permissive", when reading from scp files it treats$/;"	m	struct:kaldi::RspecifierOptions
positional_args_	parse-options.h	/^  std::vector<std::string> positional_args_;$/;"	m	class:kaldi::ParseOptions
prev_bucket	hash-list.h	/^    size_t prev_bucket;  \/\/ index to next bucket (-1 if list tail).  Note: list of buckets$/;"	m	struct:kaldi::HashList::HashBucket
print_args_	parse-options.h	/^  bool print_args_;     \/\/\/< variable for the implicit --print-args parameter$/;"	m	class:kaldi::ParseOptions
quick_	const-integer-set.h	/^  bool quick_;$/;"	m	class:kaldi::ConstIntegerSet
quick_set_	const-integer-set.h	/^  std::vector<bool> quick_set_;$/;"	m	class:kaldi::ConstIntegerSet
rspecifier_	kaldi-table-inl.h	/^  std::string rspecifier_;  \/\/ rspecifier used to open it; used in debug messages$/;"	m	class:kaldi::RandomAccessTableReaderScriptImpl
script_	kaldi-table-inl.h	/^  std::vector<std::pair<std::string, std::string> > script_;$/;"	m	class:kaldi::RandomAccessTableReaderScriptImpl
script_	kaldi-table-inl.h	/^  std::vector<std::pair<std::string, std::string> > script_;$/;"	m	class:kaldi::TableWriterScriptImpl
script_input_	kaldi-table-inl.h	/^  Input script_input_;  \/\/ Input object for the .scp file$/;"	m	class:kaldi::SequentialTableReaderScriptImpl
script_output_	kaldi-table-inl.h	/^  Output script_output_;$/;"	m	class:kaldi::TableWriterBothImpl
script_rxfilename_	kaldi-table-inl.h	/^  std::string script_rxfilename_;  \/\/ filename of script.$/;"	m	class:kaldi::RandomAccessTableReaderScriptImpl
script_rxfilename_	kaldi-table-inl.h	/^  std::string script_rxfilename_;  \/\/ of the script file.$/;"	m	class:kaldi::SequentialTableReaderScriptImpl
script_rxfilename_	kaldi-table-inl.h	/^  std::string script_rxfilename_;$/;"	m	class:kaldi::TableWriterScriptImpl
script_wxfilename_	kaldi-table-inl.h	/^  std::string script_wxfilename_;$/;"	m	class:kaldi::TableWriterBothImpl
seen_pairs_	kaldi-table-inl.h	/^  std::vector<std::pair<std::string, Holder*> > seen_pairs_;$/;"	m	class:kaldi::RandomAccessTableReaderSortedArchiveImpl
size	const-integer-set.h	/^  size_t size() const { return slow_set_.size(); }$/;"	f	class:kaldi::ConstIntegerSet
slow_set_	const-integer-set.h	/^  std::vector<I> slow_set_;$/;"	m	class:kaldi::ConstIntegerSet
sorted	kaldi-table.h	/^  bool sorted;  \/\/ we assert that the keys are sorted.$/;"	m	struct:kaldi::RspecifierOptions
state_	kaldi-table-inl.h	/^  } state_;$/;"	m	class:kaldi::RandomAccessTableReaderArchiveImplBase	typeref:enum:kaldi::RandomAccessTableReaderArchiveImplBase::__anon6
state_	kaldi-table-inl.h	/^  } state_;$/;"	m	class:kaldi::RandomAccessTableReaderScriptImpl	typeref:enum:kaldi::RandomAccessTableReaderScriptImpl::__anon5
state_	kaldi-table-inl.h	/^  } state_;$/;"	m	class:kaldi::SequentialTableReaderArchiveImpl	typeref:enum:kaldi::SequentialTableReaderArchiveImpl::__anon1
state_	kaldi-table-inl.h	/^  } state_;$/;"	m	class:kaldi::SequentialTableReaderScriptImpl	typeref:enum:kaldi::SequentialTableReaderScriptImpl::StateType
state_	kaldi-table-inl.h	/^  } state_;$/;"	m	class:kaldi::TableWriterArchiveImpl	typeref:enum:kaldi::TableWriterArchiveImpl::__anon2
state_	kaldi-table-inl.h	/^  } state_;$/;"	m	class:kaldi::TableWriterBothImpl	typeref:enum:kaldi::TableWriterBothImpl::__anon4
state_	kaldi-table-inl.h	/^  } state_;$/;"	m	class:kaldi::TableWriterScriptImpl	typeref:enum:kaldi::TableWriterScriptImpl::__anon3
string_map_	parse-options.h	/^  std::map<std::string, std::string*> string_map_;$/;"	m	class:kaldi::ParseOptions
sub_num	edit-distance-inl.h	/^  int32 sub_num;$/;"	m	struct:kaldi::error_stats
t_	kaldi-holder-inl.h	/^  T *t_;$/;"	m	class:kaldi::KaldiObjectHolder
t_	kaldi-holder-inl.h	/^  T t_;$/;"	m	class:kaldi::BasicHolder
t_	kaldi-holder-inl.h	/^  T t_;$/;"	m	class:kaldi::BasicPairVectorHolder
t_	kaldi-holder-inl.h	/^  T t_;$/;"	m	class:kaldi::BasicVectorHolder
t_	kaldi-holder-inl.h	/^  T t_;$/;"	m	class:kaldi::BasicVectorVectorHolder
t_	kaldi-holder-inl.h	/^  T t_;$/;"	m	class:kaldi::GauPostHolder
t_	kaldi-holder-inl.h	/^  T t_;$/;"	m	class:kaldi::HtkMatrixHolder
t_	kaldi-holder-inl.h	/^  T t_;$/;"	m	class:kaldi::PosteriorHolder
t_	kaldi-holder-inl.h	/^  T t_;$/;"	m	class:kaldi::TokenHolder
t_	kaldi-holder-inl.h	/^  T t_;$/;"	m	class:kaldi::TokenVectorHolder
t_	kaldi-holder.h	/^  T t_;  \/\/ t_ may alternatively be of type T*.$/;"	m	class:kaldi::GenericHolder
tail	hash-list.h	/^    Elem *tail;$/;"	m	struct:kaldi::HashList::Elem
time_start_	timer.h	/^  LARGE_INTEGER time_start_;$/;"	m	class:kaldi::Timer
to_delete_iter_	kaldi-table-inl.h	/^  typename MapType::iterator to_delete_iter_;$/;"	m	class:kaldi::RandomAccessTableReaderUnsortedArchiveImpl
to_delete_iter_valid_	kaldi-table-inl.h	/^  bool to_delete_iter_valid_;$/;"	m	class:kaldi::RandomAccessTableReaderUnsortedArchiveImpl
total_cost	edit-distance-inl.h	/^  int32 total_cost;  \/\/ minimum total cost to the current alignment.$/;"	m	struct:kaldi::error_stats
uint_map_	parse-options.h	/^  std::map<std::string, uint32*> uint_map_;$/;"	m	class:kaldi::ParseOptions
usage_	parse-options.h	/^  const char *usage_;$/;"	m	class:kaldi::ParseOptions
use_msg_	parse-options.h	/^    std::string use_msg_;$/;"	m	struct:kaldi::ParseOptions::DocInfo
val	hash-list.h	/^    T val;$/;"	m	struct:kaldi::HashList::Elem
ws_delim	text-utils-test.cc	/^const char *ws_delim = " \\t\\n\\r";$/;"	m	namespace:kaldi	file:
wspecifier_	kaldi-table-inl.h	/^  std::string wspecifier_;$/;"	m	class:kaldi::TableWriterBothImpl
~BasicHolder	kaldi-holder-inl.h	/^  ~BasicHolder() { }$/;"	f	class:kaldi::BasicHolder
~BasicPairVectorHolder	kaldi-holder-inl.h	/^  ~BasicPairVectorHolder() { }$/;"	f	class:kaldi::BasicPairVectorHolder
~BasicVectorHolder	kaldi-holder-inl.h	/^  ~BasicVectorHolder() { }$/;"	f	class:kaldi::BasicVectorHolder
~BasicVectorVectorHolder	kaldi-holder-inl.h	/^  ~BasicVectorVectorHolder() { }$/;"	f	class:kaldi::BasicVectorVectorHolder
~FileInputImpl	kaldi-io.cc	/^  virtual ~FileInputImpl() {$/;"	f	class:kaldi::FileInputImpl
~FileOutputImpl	kaldi-io.cc	/^  virtual ~FileOutputImpl() {$/;"	f	class:kaldi::FileOutputImpl
~GenericHolder	kaldi-holder.h	/^  ~GenericHolder() { }$/;"	f	class:kaldi::GenericHolder
~HashList	hash-list-inl.h	/^HashList<I, T>::~HashList() {$/;"	f	class:kaldi::HashList
~Input	kaldi-io.cc	/^Input::~Input() { if (impl_) Close(); }$/;"	f	class:kaldi::Input
~InputImplBase	kaldi-io.cc	/^  virtual ~InputImplBase() { }$/;"	f	class:kaldi::InputImplBase
~KaldiObjectHolder	kaldi-holder-inl.h	/^  ~KaldiObjectHolder() { if (t_) delete t_; }$/;"	f	class:kaldi::KaldiObjectHolder
~OffsetFileInputImpl	kaldi-io.cc	/^  virtual ~OffsetFileInputImpl() {$/;"	f	class:kaldi::OffsetFileInputImpl
~Output	kaldi-io.cc	/^Output::~Output() {$/;"	f	class:kaldi::Output
~OutputImplBase	kaldi-io.cc	/^  virtual ~OutputImplBase() { }$/;"	f	class:kaldi::OutputImplBase
~ParseOptions	parse-options.h	/^  ~ParseOptions() {}$/;"	f	class:kaldi::ParseOptions
~PipeInputImpl	kaldi-io.cc	/^  virtual ~PipeInputImpl() {$/;"	f	class:kaldi::PipeInputImpl
~PipeOutputImpl	kaldi-io.cc	/^  virtual ~PipeOutputImpl() {$/;"	f	class:kaldi::PipeOutputImpl
~RandomAccessTableReader	kaldi-table-inl.h	/^RandomAccessTableReader<Holder>::~RandomAccessTableReader() {$/;"	f	class:kaldi::RandomAccessTableReader
~RandomAccessTableReaderArchiveImplBase	kaldi-table-inl.h	/^  ~RandomAccessTableReaderArchiveImplBase() {$/;"	f	class:kaldi::RandomAccessTableReaderArchiveImplBase
~RandomAccessTableReaderDSortedArchiveImpl	kaldi-table-inl.h	/^  virtual ~RandomAccessTableReaderDSortedArchiveImpl() {$/;"	f	class:kaldi::RandomAccessTableReaderDSortedArchiveImpl
~RandomAccessTableReaderImplBase	kaldi-table-inl.h	/^  virtual ~RandomAccessTableReaderImplBase() {}$/;"	f	class:kaldi::RandomAccessTableReaderImplBase
~RandomAccessTableReaderScriptImpl	kaldi-table-inl.h	/^  virtual ~RandomAccessTableReaderScriptImpl() {$/;"	f	class:kaldi::RandomAccessTableReaderScriptImpl
~RandomAccessTableReaderSortedArchiveImpl	kaldi-table-inl.h	/^  virtual ~RandomAccessTableReaderSortedArchiveImpl() {$/;"	f	class:kaldi::RandomAccessTableReaderSortedArchiveImpl
~RandomAccessTableReaderUnsortedArchiveImpl	kaldi-table-inl.h	/^  virtual ~RandomAccessTableReaderUnsortedArchiveImpl() {$/;"	f	class:kaldi::RandomAccessTableReaderUnsortedArchiveImpl
~SequentialTableReader	kaldi-table-inl.h	/^SequentialTableReader<Holder>::~SequentialTableReader() {$/;"	f	class:kaldi::SequentialTableReader
~SequentialTableReaderArchiveImpl	kaldi-table-inl.h	/^  virtual ~SequentialTableReaderArchiveImpl() {$/;"	f	class:kaldi::SequentialTableReaderArchiveImpl
~SequentialTableReaderImplBase	kaldi-table-inl.h	/^  virtual ~SequentialTableReaderImplBase() { }$/;"	f	class:kaldi::SequentialTableReaderImplBase
~SequentialTableReaderScriptImpl	kaldi-table-inl.h	/^  virtual ~SequentialTableReaderScriptImpl() {$/;"	f	class:kaldi::SequentialTableReaderScriptImpl
~StandardInputImpl	kaldi-io.cc	/^  virtual ~StandardInputImpl() { }$/;"	f	class:kaldi::StandardInputImpl
~StandardOutputImpl	kaldi-io.cc	/^  virtual ~StandardOutputImpl() {$/;"	f	class:kaldi::StandardOutputImpl
~TableWriter	kaldi-table-inl.h	/^TableWriter<Holder>::~TableWriter() {$/;"	f	class:kaldi::TableWriter
~TableWriterArchiveImpl	kaldi-table-inl.h	/^  virtual ~TableWriterArchiveImpl() {$/;"	f	class:kaldi::TableWriterArchiveImpl
~TableWriterBothImpl	kaldi-table-inl.h	/^  virtual ~TableWriterBothImpl() {$/;"	f	class:kaldi::TableWriterBothImpl
~TableWriterImplBase	kaldi-table-inl.h	/^  virtual ~TableWriterImplBase() { }$/;"	f	class:kaldi::TableWriterImplBase
~TableWriterScriptImpl	kaldi-table-inl.h	/^  virtual ~TableWriterScriptImpl() {$/;"	f	class:kaldi::TableWriterScriptImpl
~TokenHolder	kaldi-holder-inl.h	/^  ~TokenHolder() { }$/;"	f	class:kaldi::TokenHolder
