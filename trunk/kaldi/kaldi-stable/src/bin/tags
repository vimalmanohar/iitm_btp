!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CreatePhonesAltFst	phones-to-prons.cc	/^void CreatePhonesAltFst(const std::vector<int32> &phones,$/;"	f
EventTypeToString	extract-ctx.cc	/^static std::string EventTypeToString(EventType &e,$/;"	f	file:
GetSeenPhones	build-tree-two-level.cc	/^void GetSeenPhones(BuildTreeStatsType &stats, int P, std::vector<int32> *phones_out) {$/;"	f	namespace:kaldi
MakeEvent	draw-tree.cc	/^void MakeEvent(std::string &qry, fst::SymbolTable *phone_syms,$/;"	f
MergePosteriors	sum-post.cc	/^void MergePosteriors(const Posterior &post1,$/;"	f	namespace:kaldi
ProcessTopo	compile-questions.cc	/^int32 ProcessTopo(const HmmTopology &topo, const std::vector<std::vector<int32> > &questions) {$/;"	f	namespace:kaldi
ReadPhoneMap	convert-ali.cc	/^void ReadPhoneMap(std::string phone_map_rxfilename,$/;"	f	namespace:kaldi
ScalePosteriors	sum-post.cc	/^void ScalePosteriors(BaseFloat scale, Posterior *post) {$/;"	f	namespace:kaldi
kaldi	build-tree-two-level.cc	/^namespace kaldi {$/;"	n	file:
kaldi	compile-questions.cc	/^namespace kaldi {$/;"	n	file:
kaldi	convert-ali.cc	/^namespace kaldi {$/;"	n	file:
kaldi	sum-post.cc	/^namespace kaldi {$/;"	n	file:
kaldi::GetSeenPhones	build-tree-two-level.cc	/^void GetSeenPhones(BuildTreeStatsType &stats, int P, std::vector<int32> *phones_out) {$/;"	f	namespace:kaldi
kaldi::MergePosteriors	sum-post.cc	/^void MergePosteriors(const Posterior &post1,$/;"	f	namespace:kaldi
kaldi::ProcessTopo	compile-questions.cc	/^int32 ProcessTopo(const HmmTopology &topo, const std::vector<std::vector<int32> > &questions) {$/;"	f	namespace:kaldi
kaldi::ReadPhoneMap	convert-ali.cc	/^void ReadPhoneMap(std::string phone_map_rxfilename,$/;"	f	namespace:kaldi
kaldi::ScalePosteriors	sum-post.cc	/^void ScalePosteriors(BaseFloat scale, Posterior *post) {$/;"	f	namespace:kaldi
main	acc-lda.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	acc-tree-stats.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	add-self-loops.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	ali-to-pdf.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	ali-to-phones.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	ali-to-post.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	align-compiled-mapped.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	align-equal-compiled.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	align-equal.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	align-mapped.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	analyze-counts.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	arpa2fst.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	build-tree-two-level.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	build-tree.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	cluster-phones.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	compile-questions.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	compile-train-graphs-fsts.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	compile-train-graphs.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	compute-mce-scale.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	compute-wer.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	convert-ali.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	copy-gselect.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	copy-int-vector-vector.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	copy-int-vector.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	copy-matrix.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	copy-transition-model.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	copy-tree.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	copy-vector.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	decode-faster-mapped.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	decode-faster.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	dot-weights.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	draw-tree.cc	/^int main(int argc, char **argv) {$/;"	f
main	est-lda.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	est-mllt.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	extract-ctx.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	get-silence-probs.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	hmm-info.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latgen-faster-mapped.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	make-h-transducer.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	make-ilabel-transducer.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	make-pdf-to-tid-transducer.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	pdf-to-counts.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	phones-to-prons.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	post-to-tacc.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	post-to-weights.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	prons-to-wordali.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	rand-prune-post.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	reverse-weights.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	scale-post.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	scale-vecs.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	show-alignments.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	show-transitions.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sum-matrices.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sum-post.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sum-tree-stats.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	thresh-post.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	weight-post.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	weight-silence-post.cc	/^int main(int argc, char *argv[]) {$/;"	f
