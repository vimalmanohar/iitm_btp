!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Advance	nbest-decoder.h	/^    inline Token* Advance(Token *source, Arc &arc, int32 frame,$/;"	f	class:kaldi::NBestDecoder::TokenStore
Arc	biglm-faster-decoder.h	/^  typedef fst::StdArc Arc;$/;"	t	class:kaldi::BiglmFasterDecoder
Arc	faster-decoder.h	/^  typedef fst::StdArc Arc;$/;"	t	class:kaldi::FasterDecoder
Arc	lattice-biglm-faster-decoder.h	/^  typedef fst::StdArc Arc;$/;"	t	class:kaldi::LatticeBiglmFasterDecoder
Arc	lattice-faster-decoder.h	/^  typedef fst::StdArc Arc;$/;"	t	class:kaldi::LatticeFasterDecoder
Arc	lattice-simple-decoder.h	/^  typedef fst::StdArc Arc;$/;"	t	class:kaldi::LatticeSimpleDecoder
Arc	nbest-decoder.h	/^  typedef fst::StdArc Arc;$/;"	t	class:kaldi::NBestDecoder
Arc	simple-decoder.h	/^  typedef fst::StdArc Arc;$/;"	t	class:kaldi::SimpleDecoder
BiglmFasterDecoder	biglm-faster-decoder.h	/^  BiglmFasterDecoder(const fst::Fst<fst::StdArc> &fst,$/;"	f	class:kaldi::BiglmFasterDecoder
BiglmFasterDecoder	biglm-faster-decoder.h	/^class BiglmFasterDecoder {$/;"	c	namespace:kaldi
BiglmFasterDecoderOptions	biglm-faster-decoder.h	/^typedef FasterDecoderOptions BiglmFasterDecoderOptions;$/;"	t	namespace:kaldi
Check	lattice-faster-decoder.h	/^  void Check() const {$/;"	f	struct:kaldi::LatticeFasterDecoderConfig
Check	lattice-simple-decoder.h	/^  void Check() const {$/;"	f	struct:kaldi::LatticeSimpleDecoderConfig
CheckSizes	decodable-sum.h	/^  void CheckSizes() {$/;"	f	class:kaldi::DecodableSum
Clear	nbest-decoder.h	/^    void Clear() {$/;"	f	class:kaldi::NBestDecoder::TokenStore
ClearActiveTokens	lattice-biglm-faster-decoder.h	/^  void ClearActiveTokens() { \/\/ a cleanup routine, at utt end\/begin$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
ClearActiveTokens	lattice-faster-decoder.cc	/^void LatticeFasterDecoder::ClearActiveTokens() { \/\/ a cleanup routine, at utt end\/begin$/;"	f	class:kaldi::LatticeFasterDecoder
ClearActiveTokens	lattice-simple-decoder.cc	/^void LatticeSimpleDecoder::ClearActiveTokens() { \/\/ a cleanup routine, at utt end\/begin$/;"	f	class:kaldi::LatticeSimpleDecoder
ClearToks	biglm-faster-decoder.h	/^  void ClearToks(Elem *list) {$/;"	f	class:kaldi::BiglmFasterDecoder
ClearToks	faster-decoder.cc	/^void FasterDecoder::ClearToks(Elem *list) {$/;"	f	class:kaldi::FasterDecoder
ClearToks	lattice-biglm-faster-decoder.h	/^  void ClearToks(Elem *list) {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
ClearToks	lattice-faster-decoder.cc	/^void LatticeFasterDecoder::ClearToks(Elem *list) {$/;"	f	class:kaldi::LatticeFasterDecoder
ClearToks	nbest-decoder.h	/^  void ClearToks(Elem *list) {$/;"	f	class:kaldi::NBestDecoder
ClearToks	simple-decoder.h	/^  static void ClearToks(unordered_map<StateId, Token*> &toks) {$/;"	f	class:kaldi::SimpleDecoder
Combine	nbest-decoder.h	/^    inline Token* Combine(Token *tok1, Token *tok2) { \/\/ Viterbi version$/;"	f	class:kaldi::NBestDecoder::TokenStore
CombineN	nbest-decoder.h	/^    inline bool CombineN(Elem *head, Token *new_tok) { \/\/ n-best version$/;"	f	class:kaldi::NBestDecoder::TokenStore
CompileGraph	training-graph-compiler.cc	/^bool TrainingGraphCompiler::CompileGraph(const fst::VectorFst<fst::StdArc> &word_fst,$/;"	f	class:kaldi::TrainingGraphCompiler
CompileGraphFromText	training-graph-compiler.cc	/^bool TrainingGraphCompiler::CompileGraphFromText($/;"	f	class:kaldi::TrainingGraphCompiler
CompileGraphs	training-graph-compiler.cc	/^bool TrainingGraphCompiler::CompileGraphs($/;"	f	class:kaldi::TrainingGraphCompiler
CompileGraphsFromText	training-graph-compiler.cc	/^bool TrainingGraphCompiler::CompileGraphsFromText($/;"	f	class:kaldi::TrainingGraphCompiler
ComputeGconsts	decodable-am-diag-gmm.cc	/^static void ComputeGconsts(const VectorBase<BaseFloat> &weights,$/;"	f	namespace:kaldi
ConstructPair	biglm-faster-decoder.h	/^  inline PairId ConstructPair(StateId fst_state, StateId lm_state) {$/;"	f	class:kaldi::BiglmFasterDecoder
ConstructPair	lattice-biglm-faster-decoder.h	/^  inline PairId ConstructPair(StateId fst_state, StateId lm_state) {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
CreateSeq	nbest-decoder.h	/^    inline SeqToken *CreateSeq(Label input, SeqToken *prev) {$/;"	f	class:kaldi::NBestDecoder::TokenStore
CreateTok	nbest-decoder.h	/^    inline Token *CreateTok(Label output, Token *prev) {$/;"	f	class:kaldi::NBestDecoder::TokenStore
DEBUG_CMD	nbest-decoder.h	41;"	d
DEBUG_OUT1	nbest-decoder.h	38;"	d
DEBUG_OUT2	nbest-decoder.h	39;"	d
DEBUG_OUT3	nbest-decoder.h	40;"	d
DecodableAmDiagGmm	decodable-am-diag-gmm.h	/^  DecodableAmDiagGmm(const AmDiagGmm &am,$/;"	f	class:kaldi::DecodableAmDiagGmm
DecodableAmDiagGmm	decodable-am-diag-gmm.h	/^class DecodableAmDiagGmm: public DecodableAmDiagGmmUnmapped {$/;"	c	namespace:kaldi
DecodableAmDiagGmmRegtreeFmllr	decodable-am-diag-gmm.h	/^  DecodableAmDiagGmmRegtreeFmllr(const AmDiagGmm &am,$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
DecodableAmDiagGmmRegtreeFmllr	decodable-am-diag-gmm.h	/^class DecodableAmDiagGmmRegtreeFmllr: public DecodableAmDiagGmmUnmapped {$/;"	c	namespace:kaldi
DecodableAmDiagGmmRegtreeMllr	decodable-am-diag-gmm.h	/^  DecodableAmDiagGmmRegtreeMllr(const AmDiagGmm &am,$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeMllr
DecodableAmDiagGmmRegtreeMllr	decodable-am-diag-gmm.h	/^class DecodableAmDiagGmmRegtreeMllr: public DecodableAmDiagGmmUnmapped {$/;"	c	namespace:kaldi
DecodableAmDiagGmmScaled	decodable-am-diag-gmm.h	/^  DecodableAmDiagGmmScaled(const AmDiagGmm &am,$/;"	f	class:kaldi::DecodableAmDiagGmmScaled
DecodableAmDiagGmmScaled	decodable-am-diag-gmm.h	/^class DecodableAmDiagGmmScaled: public DecodableAmDiagGmmUnmapped {$/;"	c	namespace:kaldi
DecodableAmDiagGmmUnmapped	decodable-am-diag-gmm.h	/^  DecodableAmDiagGmmUnmapped(const AmDiagGmm &am,$/;"	f	class:kaldi::DecodableAmDiagGmmUnmapped
DecodableAmDiagGmmUnmapped	decodable-am-diag-gmm.h	/^class DecodableAmDiagGmmUnmapped : public DecodableInterface {$/;"	c	namespace:kaldi
DecodableAmSgmm	decodable-am-sgmm.h	/^  DecodableAmSgmm(const SgmmGselectConfig &opts,$/;"	f	class:kaldi::DecodableAmSgmm
DecodableAmSgmm	decodable-am-sgmm.h	/^class DecodableAmSgmm : public DecodableInterface {$/;"	c	namespace:kaldi
DecodableAmSgmm2	decodable-am-sgmm2.h	/^  DecodableAmSgmm2(const AmSgmm2 &sgmm,$/;"	f	class:kaldi::DecodableAmSgmm2
DecodableAmSgmm2	decodable-am-sgmm2.h	/^class DecodableAmSgmm2 : public DecodableInterface {$/;"	c	namespace:kaldi
DecodableAmSgmm2Scaled	decodable-am-sgmm2.h	/^  DecodableAmSgmm2Scaled(const AmSgmm2 &sgmm,$/;"	f	class:kaldi::DecodableAmSgmm2Scaled
DecodableAmSgmm2Scaled	decodable-am-sgmm2.h	/^class DecodableAmSgmm2Scaled : public DecodableAmSgmm2 {$/;"	c	namespace:kaldi
DecodableAmSgmmScaled	decodable-am-sgmm.h	/^  DecodableAmSgmmScaled(const SgmmGselectConfig &opts,$/;"	f	class:kaldi::DecodableAmSgmmScaled
DecodableAmSgmmScaled	decodable-am-sgmm.h	/^class DecodableAmSgmmScaled : public DecodableAmSgmm {$/;"	c	namespace:kaldi
DecodableMapped	decodable-mapped.h	/^  DecodableMapped(const std::vector<int32> &index_map, DecodableInterface *d):$/;"	f	class:kaldi::DecodableMapped
DecodableMapped	decodable-mapped.h	/^class DecodableMapped: public DecodableInterface {$/;"	c	namespace:kaldi
DecodableMatrixScaled	decodable-matrix.h	/^  DecodableMatrixScaled(const Matrix<BaseFloat> &likes,$/;"	f	class:kaldi::DecodableMatrixScaled
DecodableMatrixScaled	decodable-matrix.h	/^class DecodableMatrixScaled: public DecodableInterface {$/;"	c	namespace:kaldi
DecodableMatrixScaledMapped	decodable-matrix.h	/^  DecodableMatrixScaledMapped(const TransitionModel &tm,$/;"	f	class:kaldi::DecodableMatrixScaledMapped
DecodableMatrixScaledMapped	decodable-matrix.h	/^class DecodableMatrixScaledMapped: public DecodableInterface {$/;"	c	namespace:kaldi
DecodableSum	decodable-sum.h	/^  DecodableSum(DecodableInterface *d1, BaseFloat w1,$/;"	f	class:kaldi::DecodableSum
DecodableSum	decodable-sum.h	/^  DecodableSum(const std::vector<std::pair<DecodableInterface*, BaseFloat> > &decodables):$/;"	f	class:kaldi::DecodableSum
DecodableSum	decodable-sum.h	/^class DecodableSum: public DecodableInterface {$/;"	c	namespace:kaldi
Decode	biglm-faster-decoder.h	/^  void Decode(DecodableInterface *decodable) {$/;"	f	class:kaldi::BiglmFasterDecoder
Decode	faster-decoder.cc	/^void FasterDecoder::Decode(DecodableInterface *decodable) {$/;"	f	class:kaldi::FasterDecoder
Decode	lattice-biglm-faster-decoder.h	/^  bool Decode(DecodableInterface *decodable) {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
Decode	lattice-faster-decoder.cc	/^bool LatticeFasterDecoder::Decode(DecodableInterface *decodable) {$/;"	f	class:kaldi::LatticeFasterDecoder
Decode	lattice-simple-decoder.cc	/^bool LatticeSimpleDecoder::Decode(DecodableInterface *decodable) {$/;"	f	class:kaldi::LatticeSimpleDecoder
Decode	nbest-decoder.h	/^  void Decode(DecodableInterface *decodable) {$/;"	f	class:kaldi::NBestDecoder
Decode	simple-decoder.h	/^  bool Decode(DecodableInterface *decodable) {$/;"	f	class:kaldi::SimpleDecoder
DecodeUtteranceLatticeFaster	lattice-faster-decoder.cc	/^bool DecodeUtteranceLatticeFaster($/;"	f	namespace:kaldi
DeleteForwardLinks	lattice-biglm-faster-decoder.h	/^    inline void DeleteForwardLinks() {$/;"	f	struct:kaldi::LatticeBiglmFasterDecoder::Token
DeleteForwardLinks	lattice-faster-decoder.h	/^    inline void DeleteForwardLinks() {$/;"	f	struct:kaldi::LatticeFasterDecoder::Token
DeleteForwardLinks	lattice-simple-decoder.h	/^    void DeleteForwardLinks() {$/;"	f	struct:kaldi::LatticeSimpleDecoder::Token
DeleteSeq	nbest-decoder.h	/^    inline void DeleteSeq(SeqToken *seq) {$/;"	f	class:kaldi::NBestDecoder::TokenStore
DeleteTok	nbest-decoder.h	/^    inline void DeleteTok(Token *tok) {$/;"	f	class:kaldi::NBestDecoder::TokenStore
Elem	biglm-faster-decoder.h	/^  typedef HashList<PairId, Token*>::Elem Elem;$/;"	t	class:kaldi::BiglmFasterDecoder
Elem	faster-decoder.h	/^  typedef HashList<StateId, Token*>::Elem Elem;$/;"	t	class:kaldi::FasterDecoder
Elem	lattice-biglm-faster-decoder.h	/^  typedef HashList<PairId, Token*>::Elem Elem;$/;"	t	class:kaldi::LatticeBiglmFasterDecoder
Elem	lattice-faster-decoder.h	/^  typedef HashList<StateId, Token*>::Elem Elem;$/;"	t	class:kaldi::LatticeFasterDecoder
Elem	nbest-decoder.h	/^    typedef TokenHash::Elem Elem;$/;"	t	class:kaldi::NBestDecoder::TokenStore
Elem	nbest-decoder.h	/^  typedef TokenHash::Elem Elem;$/;"	t	class:kaldi::NBestDecoder
Equal	nbest-decoder.h	/^      inline bool Equal(Token *other) { \/\/ compares output sequences of Tokens$/;"	f	class:kaldi::NBestDecoder::TokenStore::Token
FasterDecoder	faster-decoder.cc	/^FasterDecoder::FasterDecoder(const fst::Fst<fst::StdArc> &fst,$/;"	f	class:kaldi::FasterDecoder
FasterDecoder	faster-decoder.h	/^class FasterDecoder {$/;"	c	namespace:kaldi
FasterDecoderOptions	faster-decoder.h	/^  FasterDecoderOptions(): beam(16.0),$/;"	f	struct:kaldi::FasterDecoderOptions
FasterDecoderOptions	faster-decoder.h	/^struct FasterDecoderOptions {$/;"	s	namespace:kaldi
FindOrAddToken	lattice-biglm-faster-decoder.h	/^  inline Token *FindOrAddToken(PairId state_pair, int32 frame, BaseFloat tot_cost,$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
FindOrAddToken	lattice-faster-decoder.cc	/^inline LatticeFasterDecoder::Token *LatticeFasterDecoder::FindOrAddToken($/;"	f	class:kaldi::LatticeFasterDecoder
FindOrAddToken	lattice-simple-decoder.cc	/^inline LatticeSimpleDecoder::Token *LatticeSimpleDecoder::FindOrAddToken($/;"	f	class:kaldi::LatticeSimpleDecoder
ForwardLink	lattice-biglm-faster-decoder.h	/^    inline ForwardLink(Token *next_tok, Label ilabel, Label olabel,$/;"	f	struct:kaldi::LatticeBiglmFasterDecoder::ForwardLink
ForwardLink	lattice-biglm-faster-decoder.h	/^  struct ForwardLink {$/;"	s	class:kaldi::LatticeBiglmFasterDecoder
ForwardLink	lattice-faster-decoder.h	/^    inline ForwardLink(Token *next_tok, Label ilabel, Label olabel,$/;"	f	struct:kaldi::LatticeFasterDecoder::ForwardLink
ForwardLink	lattice-faster-decoder.h	/^  struct ForwardLink {$/;"	s	class:kaldi::LatticeFasterDecoder
ForwardLink	lattice-simple-decoder.h	/^    ForwardLink(Token *next_tok, Label ilabel, Label olabel,$/;"	f	struct:kaldi::LatticeSimpleDecoder::ForwardLink
ForwardLink	lattice-simple-decoder.h	/^  struct ForwardLink {$/;"	s	class:kaldi::LatticeSimpleDecoder
GetBestPath	biglm-faster-decoder.h	/^  bool GetBestPath(fst::MutableFst<LatticeArc> *fst_out) {$/;"	f	class:kaldi::BiglmFasterDecoder
GetBestPath	faster-decoder.cc	/^bool FasterDecoder::GetBestPath(fst::MutableFst<LatticeArc> *fst_out) {$/;"	f	class:kaldi::FasterDecoder
GetBestPath	lattice-biglm-faster-decoder.h	/^  bool GetBestPath(fst::MutableFst<LatticeArc> *ofst) const {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
GetBestPath	lattice-faster-decoder.cc	/^bool LatticeFasterDecoder::GetBestPath(fst::MutableFst<LatticeArc> *ofst) const {$/;"	f	class:kaldi::LatticeFasterDecoder
GetBestPath	lattice-simple-decoder.cc	/^bool LatticeSimpleDecoder::GetBestPath(fst::MutableFst<LatticeArc> *ofst) const {$/;"	f	class:kaldi::LatticeSimpleDecoder
GetBestPath	simple-decoder.h	/^  bool GetBestPath(fst::MutableFst<fst::StdArc> *fst_out) {$/;"	f	class:kaldi::SimpleDecoder
GetCutoff	biglm-faster-decoder.h	/^  BaseFloat GetCutoff(Elem *list_head, size_t *tok_count,$/;"	f	class:kaldi::BiglmFasterDecoder
GetCutoff	faster-decoder.cc	/^BaseFloat FasterDecoder::GetCutoff(Elem *list_head, size_t *tok_count,$/;"	f	class:kaldi::FasterDecoder
GetCutoff	lattice-biglm-faster-decoder.h	/^  BaseFloat GetCutoff(Elem *list_head, size_t *tok_count,$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
GetCutoff	lattice-faster-decoder.cc	/^BaseFloat LatticeFasterDecoder::GetCutoff(Elem *list_head, size_t *tok_count,$/;"	f	class:kaldi::LatticeFasterDecoder
GetCutoff	nbest-decoder.h	/^  BaseFloat GetCutoff(Elem *list_head, size_t *tok_count,$/;"	f	class:kaldi::NBestDecoder
GetLattice	lattice-biglm-faster-decoder.h	/^  bool GetLattice(fst::MutableFst<CompactLatticeArc> *ofst) const {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
GetLattice	lattice-faster-decoder.cc	/^bool LatticeFasterDecoder::GetLattice(fst::MutableFst<CompactLatticeArc> *ofst) const {$/;"	f	class:kaldi::LatticeFasterDecoder
GetLattice	lattice-simple-decoder.cc	/^bool LatticeSimpleDecoder::GetLattice(fst::MutableFst<CompactLatticeArc> *ofst) const {$/;"	f	class:kaldi::LatticeSimpleDecoder
GetNBestLattice	nbest-decoder.h	/^  bool GetNBestLattice(fst::MutableFst<CompactLatticeArc> *fst_out,$/;"	f	class:kaldi::NBestDecoder
GetRawLattice	lattice-biglm-faster-decoder.h	/^  bool GetRawLattice(fst::MutableFst<LatticeArc> *ofst) const {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
GetRawLattice	lattice-faster-decoder.cc	/^bool LatticeFasterDecoder::GetRawLattice(fst::MutableFst<LatticeArc> *ofst) const {$/;"	f	class:kaldi::LatticeFasterDecoder
GetRawLattice	lattice-simple-decoder.cc	/^bool LatticeSimpleDecoder::GetRawLattice(fst::MutableFst<LatticeArc> *ofst) const {$/;"	f	class:kaldi::LatticeSimpleDecoder
GetXformedGconsts	decodable-am-diag-gmm.cc	/^const Vector<BaseFloat>& DecodableAmDiagGmmRegtreeMllr::GetXformedGconsts($/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeMllr
GetXformedMeanInvVars	decodable-am-diag-gmm.cc	/^const Matrix<BaseFloat>& DecodableAmDiagGmmRegtreeMllr::GetXformedMeanInvVars($/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeMllr
I	nbest-decoder.h	/^      SeqToken *I; \/\/ sequence I$/;"	m	class:kaldi::NBestDecoder::TokenStore::Token
Init	nbest-decoder.h	/^    void Init(DecodableInterface *decodable, TokenHash *toks, int32 n_best) {$/;"	f	class:kaldi::NBestDecoder::TokenStore
InitCache	decodable-am-diag-gmm.cc	/^void DecodableAmDiagGmmRegtreeMllr::InitCache() {$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeMllr
IsLastFrame	decodable-am-diag-gmm.h	/^  virtual bool IsLastFrame(int32 frame) {$/;"	f	class:kaldi::DecodableAmDiagGmmUnmapped
IsLastFrame	decodable-am-sgmm.h	/^  virtual bool IsLastFrame(int32 frame) {$/;"	f	class:kaldi::DecodableAmSgmm
IsLastFrame	decodable-am-sgmm2.h	/^  virtual bool IsLastFrame(int32 frame) {$/;"	f	class:kaldi::DecodableAmSgmm2
IsLastFrame	decodable-mapped.h	/^  virtual bool IsLastFrame(int32 frame) {$/;"	f	class:kaldi::DecodableMapped
IsLastFrame	decodable-matrix.h	/^  virtual bool IsLastFrame(int32 frame) {$/;"	f	class:kaldi::DecodableMatrixScaled
IsLastFrame	decodable-matrix.h	/^  virtual bool IsLastFrame(int32 frame) {$/;"	f	class:kaldi::DecodableMatrixScaledMapped
IsLastFrame	decodable-sum.h	/^  virtual bool IsLastFrame(int32 frame) {$/;"	f	class:kaldi::DecodableSum
KALDI_DECODER_BIGLM_FASTER_DECODER_H_	biglm-faster-decoder.h	19;"	d
KALDI_DECODER_DECODABLE_AM_DIAG_GMM_H_	decodable-am-diag-gmm.h	20;"	d
KALDI_DECODER_DECODABLE_AM_SGMM2_H_	decodable-am-sgmm2.h	20;"	d
KALDI_DECODER_DECODABLE_AM_SGMM_H_	decodable-am-sgmm.h	20;"	d
KALDI_DECODER_DECODABLE_MAPPED_H_	decodable-mapped.h	20;"	d
KALDI_DECODER_DECODABLE_MATRIX_H_	decodable-matrix.h	19;"	d
KALDI_DECODER_DECODABLE_SUM_H_	decodable-sum.h	20;"	d
KALDI_DECODER_FASTER_DECODER_H_	faster-decoder.h	19;"	d
KALDI_DECODER_LATTICE_BIGLM_FASTER_DECODER_H_	lattice-biglm-faster-decoder.h	20;"	d
KALDI_DECODER_LATTICE_FASTER_DECODER_H_	lattice-faster-decoder.h	19;"	d
KALDI_DECODER_LATTICE_SIMPLE_DECODER_H_	lattice-simple-decoder.h	19;"	d
KALDI_DECODER_NBEST_DECODER_H_	nbest-decoder.h	19;"	d
KALDI_DECODER_SIMPLE_DECODER_H_	simple-decoder.h	20;"	d
KALDI_DECODER_TRAINING_GRAPH_COMPILER_H_	training-graph-compiler.h	18;"	d
Label	biglm-faster-decoder.h	/^  typedef Arc::Label Label;$/;"	t	class:kaldi::BiglmFasterDecoder
Label	faster-decoder.h	/^  typedef Arc::Label Label;$/;"	t	class:kaldi::FasterDecoder
Label	lattice-biglm-faster-decoder.h	/^  typedef Arc::Label Label;$/;"	t	class:kaldi::LatticeBiglmFasterDecoder
Label	lattice-faster-decoder.h	/^  typedef Arc::Label Label;$/;"	t	class:kaldi::LatticeFasterDecoder
Label	lattice-simple-decoder.h	/^  typedef Arc::Label Label;$/;"	t	class:kaldi::LatticeSimpleDecoder
Label	nbest-decoder.h	/^  typedef Arc::Label Label;$/;"	t	class:kaldi::NBestDecoder
Label	simple-decoder.h	/^  typedef Arc::Label Label;$/;"	t	class:kaldi::SimpleDecoder
LatticeBiglmFasterDecoder	lattice-biglm-faster-decoder.h	/^  LatticeBiglmFasterDecoder($/;"	f	class:kaldi::LatticeBiglmFasterDecoder
LatticeBiglmFasterDecoder	lattice-biglm-faster-decoder.h	/^class LatticeBiglmFasterDecoder {$/;"	c	namespace:kaldi
LatticeBiglmFasterDecoderConfig	lattice-biglm-faster-decoder.h	/^typedef LatticeFasterDecoderConfig LatticeBiglmFasterDecoderConfig;$/;"	t	namespace:kaldi
LatticeFasterDecoder	lattice-faster-decoder.cc	/^LatticeFasterDecoder::LatticeFasterDecoder(const fst::Fst<fst::StdArc> &fst,$/;"	f	class:kaldi::LatticeFasterDecoder
LatticeFasterDecoder	lattice-faster-decoder.h	/^class LatticeFasterDecoder {$/;"	c	namespace:kaldi
LatticeFasterDecoderConfig	lattice-faster-decoder.h	/^  LatticeFasterDecoderConfig(): beam(16.0),$/;"	f	struct:kaldi::LatticeFasterDecoderConfig
LatticeFasterDecoderConfig	lattice-faster-decoder.h	/^struct LatticeFasterDecoderConfig {$/;"	s	namespace:kaldi
LatticeSimpleDecoder	lattice-simple-decoder.h	/^  LatticeSimpleDecoder(const fst::Fst<fst::StdArc> &fst,$/;"	f	class:kaldi::LatticeSimpleDecoder
LatticeSimpleDecoder	lattice-simple-decoder.h	/^class LatticeSimpleDecoder {$/;"	c	namespace:kaldi
LatticeSimpleDecoderConfig	lattice-simple-decoder.h	/^  LatticeSimpleDecoderConfig(): beam(16.0),$/;"	f	struct:kaldi::LatticeSimpleDecoderConfig
LatticeSimpleDecoderConfig	lattice-simple-decoder.h	/^struct LatticeSimpleDecoderConfig {$/;"	s	namespace:kaldi
LikelihoodCacheRecord	decodable-am-diag-gmm.h	/^  struct LikelihoodCacheRecord {$/;"	s	class:kaldi::DecodableAmDiagGmmUnmapped
LikelihoodCacheRecord	decodable-am-sgmm.h	/^  struct LikelihoodCacheRecord {$/;"	s	class:kaldi::DecodableAmSgmm
LogLikelihood	decodable-am-diag-gmm.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 state_index) {$/;"	f	class:kaldi::DecodableAmDiagGmmUnmapped
LogLikelihood	decodable-am-diag-gmm.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 tid) {$/;"	f	class:kaldi::DecodableAmDiagGmm
LogLikelihood	decodable-am-diag-gmm.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 tid) {$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
LogLikelihood	decodable-am-diag-gmm.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 tid) {$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeMllr
LogLikelihood	decodable-am-diag-gmm.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 tid) {$/;"	f	class:kaldi::DecodableAmDiagGmmScaled
LogLikelihood	decodable-am-sgmm.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 tid) {$/;"	f	class:kaldi::DecodableAmSgmm
LogLikelihood	decodable-am-sgmm.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 tid) {$/;"	f	class:kaldi::DecodableAmSgmmScaled
LogLikelihood	decodable-am-sgmm2.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 tid) {$/;"	f	class:kaldi::DecodableAmSgmm2
LogLikelihood	decodable-am-sgmm2.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 tid) {$/;"	f	class:kaldi::DecodableAmSgmm2Scaled
LogLikelihood	decodable-mapped.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 state_index) {$/;"	f	class:kaldi::DecodableMapped
LogLikelihood	decodable-matrix.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 tid) {$/;"	f	class:kaldi::DecodableMatrixScaled
LogLikelihood	decodable-matrix.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 tid) {$/;"	f	class:kaldi::DecodableMatrixScaledMapped
LogLikelihood	decodable-sum.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 state_index) {$/;"	f	class:kaldi::DecodableSum
LogLikelihoodForPdf	decodable-am-sgmm2.cc	/^BaseFloat DecodableAmSgmm2::LogLikelihoodForPdf(int32 frame, int32 pdf_id) {$/;"	f	class:kaldi::DecodableAmSgmm2
LogLikelihoodZeroBased	decodable-am-diag-gmm.cc	/^BaseFloat DecodableAmDiagGmmRegtreeFmllr::LogLikelihoodZeroBased(int32 frame,$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
LogLikelihoodZeroBased	decodable-am-diag-gmm.cc	/^BaseFloat DecodableAmDiagGmmRegtreeMllr::LogLikelihoodZeroBased(int32 frame,$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeMllr
LogLikelihoodZeroBased	decodable-am-diag-gmm.cc	/^BaseFloat DecodableAmDiagGmmUnmapped::LogLikelihoodZeroBased($/;"	f	class:kaldi::DecodableAmDiagGmmUnmapped
LogLikelihoodZeroBased	decodable-am-sgmm.cc	/^BaseFloat DecodableAmSgmm::LogLikelihoodZeroBased(int32 frame, int32 pdf_id) {$/;"	f	class:kaldi::DecodableAmSgmm
NBestDecoder	nbest-decoder.h	/^  NBestDecoder(const fst::Fst<fst::StdArc> &fst,$/;"	f	class:kaldi::NBestDecoder
NBestDecoder	nbest-decoder.h	/^class NBestDecoder {$/;"	c	namespace:kaldi
NBestDecoderOptions	nbest-decoder.h	/^  NBestDecoderOptions(): beam(16.0),$/;"	f	struct:kaldi::NBestDecoderOptions
NBestDecoderOptions	nbest-decoder.h	/^struct NBestDecoderOptions {$/;"	s	namespace:kaldi
NewSeq	nbest-decoder.h	/^    inline SeqToken *NewSeq() {$/;"	f	class:kaldi::NBestDecoder::TokenStore
NumFrames	decodable-am-diag-gmm.h	/^  int32 NumFrames() { return feature_matrix_.NumRows(); }$/;"	f	class:kaldi::DecodableAmDiagGmmUnmapped
NumFrames	decodable-am-diag-gmm.h	/^  virtual int32 NumFrames() { return feature_matrix_.NumRows(); }$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
NumFrames	decodable-am-diag-gmm.h	/^  virtual int32 NumFrames() { return feature_matrix_.NumRows(); }$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeMllr
NumFrames	decodable-am-sgmm.h	/^  int32 NumFrames() { return feature_matrix_.NumRows(); }$/;"	f	class:kaldi::DecodableAmSgmm
NumFrames	decodable-am-sgmm2.h	/^  int32 NumFrames() { return feature_matrix_.NumRows(); }$/;"	f	class:kaldi::DecodableAmSgmm2
NumFrames	decodable-matrix.h	/^  virtual int32 NumFrames() { return likes_.NumRows(); }$/;"	f	class:kaldi::DecodableMatrixScaled
NumFrames	decodable-matrix.h	/^  virtual int32 NumFrames() { return likes_.NumRows(); }$/;"	f	class:kaldi::DecodableMatrixScaledMapped
NumIndices	decodable-am-diag-gmm.h	/^  virtual int32 NumIndices() { return acoustic_model_.NumPdfs(); }$/;"	f	class:kaldi::DecodableAmDiagGmmUnmapped
NumIndices	decodable-am-diag-gmm.h	/^  virtual int32 NumIndices() { return trans_model_.NumTransitionIds(); }$/;"	f	class:kaldi::DecodableAmDiagGmm
NumIndices	decodable-am-diag-gmm.h	/^  virtual int32 NumIndices() { return trans_model_.NumTransitionIds(); }$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
NumIndices	decodable-am-diag-gmm.h	/^  virtual int32 NumIndices() { return trans_model_.NumTransitionIds(); }$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeMllr
NumIndices	decodable-am-diag-gmm.h	/^  virtual int32 NumIndices() { return trans_model_.NumTransitionIds(); }$/;"	f	class:kaldi::DecodableAmDiagGmmScaled
NumIndices	decodable-am-sgmm.h	/^  virtual int32 NumIndices() { return trans_model_.NumTransitionIds(); }$/;"	f	class:kaldi::DecodableAmSgmm
NumIndices	decodable-am-sgmm2.h	/^  virtual int32 NumIndices() { return trans_model_.NumTransitionIds(); }$/;"	f	class:kaldi::DecodableAmSgmm2
NumIndices	decodable-mapped.h	/^  virtual int32 NumIndices() { return static_cast<int32>(index_map_.size()) - 1; }$/;"	f	class:kaldi::DecodableMapped
NumIndices	decodable-matrix.h	/^  virtual int32 NumIndices() { return likes_.NumCols(); }$/;"	f	class:kaldi::DecodableMatrixScaled
NumIndices	decodable-matrix.h	/^  virtual int32 NumIndices() { return trans_model_.NumTransitionIds(); }$/;"	f	class:kaldi::DecodableMatrixScaledMapped
NumIndices	decodable-sum.h	/^  virtual int32 NumIndices() { return decodables_[0].first->NumIndices(); }$/;"	f	class:kaldi::DecodableSum
PairId	biglm-faster-decoder.h	/^  typedef uint64 PairId;$/;"	t	class:kaldi::BiglmFasterDecoder
PairId	lattice-biglm-faster-decoder.h	/^  typedef uint64 PairId;$/;"	t	class:kaldi::LatticeBiglmFasterDecoder
PairToLmState	biglm-faster-decoder.h	/^  static inline StateId PairToLmState(PairId state_pair) {$/;"	f	class:kaldi::BiglmFasterDecoder
PairToLmState	lattice-biglm-faster-decoder.h	/^  static inline StateId PairToLmState(PairId state_pair) {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
PairToState	biglm-faster-decoder.h	/^  static inline StateId PairToState(PairId state_pair) {$/;"	f	class:kaldi::BiglmFasterDecoder
PairToState	lattice-biglm-faster-decoder.h	/^  static inline StateId PairToState(PairId state_pair) {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
PossiblyResizeHash	biglm-faster-decoder.h	/^  void PossiblyResizeHash(size_t num_toks) {$/;"	f	class:kaldi::BiglmFasterDecoder
PossiblyResizeHash	faster-decoder.cc	/^void FasterDecoder::PossiblyResizeHash(size_t num_toks) {$/;"	f	class:kaldi::FasterDecoder
PossiblyResizeHash	lattice-biglm-faster-decoder.h	/^  void PossiblyResizeHash(size_t num_toks) {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
PossiblyResizeHash	lattice-faster-decoder.cc	/^void LatticeFasterDecoder::PossiblyResizeHash(size_t num_toks) {$/;"	f	class:kaldi::LatticeFasterDecoder
PossiblyResizeHash	nbest-decoder.h	/^  void PossiblyResizeHash(size_t num_toks) {$/;"	f	class:kaldi::NBestDecoder
ProcessEmitting	biglm-faster-decoder.h	/^  BaseFloat ProcessEmitting(DecodableInterface *decodable, int frame) {$/;"	f	class:kaldi::BiglmFasterDecoder
ProcessEmitting	faster-decoder.cc	/^BaseFloat FasterDecoder::ProcessEmitting(DecodableInterface *decodable, int frame) {$/;"	f	class:kaldi::FasterDecoder
ProcessEmitting	lattice-biglm-faster-decoder.h	/^  void ProcessEmitting(DecodableInterface *decodable, int32 frame) {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
ProcessEmitting	lattice-faster-decoder.cc	/^void LatticeFasterDecoder::ProcessEmitting(DecodableInterface *decodable, int32 frame) {$/;"	f	class:kaldi::LatticeFasterDecoder
ProcessEmitting	lattice-simple-decoder.cc	/^void LatticeSimpleDecoder::ProcessEmitting(DecodableInterface *decodable, int32 frame) {$/;"	f	class:kaldi::LatticeSimpleDecoder
ProcessEmitting	simple-decoder.h	/^  void ProcessEmitting(DecodableInterface *decodable, int frame) {$/;"	f	class:kaldi::SimpleDecoder
ProcessNonemitting	biglm-faster-decoder.h	/^  void ProcessNonemitting(BaseFloat cutoff) {$/;"	f	class:kaldi::BiglmFasterDecoder
ProcessNonemitting	faster-decoder.cc	/^void FasterDecoder::ProcessNonemitting(BaseFloat cutoff) {$/;"	f	class:kaldi::FasterDecoder
ProcessNonemitting	lattice-biglm-faster-decoder.h	/^  void ProcessNonemitting(int32 frame) {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
ProcessNonemitting	lattice-faster-decoder.cc	/^void LatticeFasterDecoder::ProcessNonemitting(int32 frame) {$/;"	f	class:kaldi::LatticeFasterDecoder
ProcessNonemitting	lattice-simple-decoder.cc	/^void LatticeSimpleDecoder::ProcessNonemitting(int32 frame) {$/;"	f	class:kaldi::LatticeSimpleDecoder
ProcessNonemitting	simple-decoder.h	/^  void ProcessNonemitting() {$/;"	f	class:kaldi::SimpleDecoder
PropagateEmitting	nbest-decoder.h	/^  BaseFloat PropagateEmitting(int32 frame) {$/;"	f	class:kaldi::NBestDecoder
PropagateEpsilon	nbest-decoder.h	/^  void PropagateEpsilon(BaseFloat adaptive_beam) {$/;"	f	class:kaldi::NBestDecoder
PropagateLm	biglm-faster-decoder.h	/^  inline StateId PropagateLm(StateId lm_state,$/;"	f	class:kaldi::BiglmFasterDecoder
PropagateLm	lattice-biglm-faster-decoder.h	/^  inline StateId PropagateLm(StateId lm_state,$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
PruneActiveTokens	lattice-biglm-faster-decoder.h	/^  void PruneActiveTokens(int32 cur_frame, BaseFloat delta) {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
PruneActiveTokens	lattice-faster-decoder.cc	/^void LatticeFasterDecoder::PruneActiveTokens(int32 cur_frame, BaseFloat delta) {$/;"	f	class:kaldi::LatticeFasterDecoder
PruneActiveTokens	lattice-simple-decoder.cc	/^void LatticeSimpleDecoder::PruneActiveTokens(int32 cur_frame, BaseFloat delta) {$/;"	f	class:kaldi::LatticeSimpleDecoder
PruneActiveTokensFinal	lattice-biglm-faster-decoder.h	/^  void PruneActiveTokensFinal(int32 cur_frame) {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
PruneActiveTokensFinal	lattice-faster-decoder.cc	/^void LatticeFasterDecoder::PruneActiveTokensFinal(int32 cur_frame) {$/;"	f	class:kaldi::LatticeFasterDecoder
PruneActiveTokensFinal	lattice-simple-decoder.cc	/^void LatticeSimpleDecoder::PruneActiveTokensFinal(int32 cur_frame) {$/;"	f	class:kaldi::LatticeSimpleDecoder
PruneCurrentTokens	lattice-simple-decoder.cc	/^void LatticeSimpleDecoder::PruneCurrentTokens(BaseFloat beam, unordered_map<StateId, Token*> *toks) {$/;"	f	class:kaldi::LatticeSimpleDecoder
PruneForwardLinks	lattice-biglm-faster-decoder.h	/^  void PruneForwardLinks(int32 frame, bool *extra_costs_changed,$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
PruneForwardLinks	lattice-faster-decoder.cc	/^void LatticeFasterDecoder::PruneForwardLinks($/;"	f	class:kaldi::LatticeFasterDecoder
PruneForwardLinks	lattice-simple-decoder.cc	/^void LatticeSimpleDecoder::PruneForwardLinks($/;"	f	class:kaldi::LatticeSimpleDecoder
PruneForwardLinksFinal	lattice-biglm-faster-decoder.h	/^  void PruneForwardLinksFinal(int32 frame) {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
PruneForwardLinksFinal	lattice-faster-decoder.cc	/^void LatticeFasterDecoder::PruneForwardLinksFinal(int32 frame) {$/;"	f	class:kaldi::LatticeFasterDecoder
PruneForwardLinksFinal	lattice-simple-decoder.cc	/^void LatticeSimpleDecoder::PruneForwardLinksFinal(int32 frame) {$/;"	f	class:kaldi::LatticeSimpleDecoder
PruneTokensForFrame	lattice-biglm-faster-decoder.h	/^  void PruneTokensForFrame(int32 frame) {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
PruneTokensForFrame	lattice-faster-decoder.cc	/^void LatticeFasterDecoder::PruneTokensForFrame(int32 frame) {$/;"	f	class:kaldi::LatticeFasterDecoder
PruneTokensForFrame	lattice-simple-decoder.cc	/^void LatticeSimpleDecoder::PruneTokensForFrame(int32 frame) {$/;"	f	class:kaldi::LatticeSimpleDecoder
PruneToks	simple-decoder.h	/^  static void PruneToks(BaseFloat beam, unordered_map<StateId, Token*> *toks) {$/;"	f	class:kaldi::SimpleDecoder
ReachedFinal	biglm-faster-decoder.h	/^  bool ReachedFinal() {$/;"	f	class:kaldi::BiglmFasterDecoder
ReachedFinal	faster-decoder.cc	/^bool FasterDecoder::ReachedFinal() {$/;"	f	class:kaldi::FasterDecoder
ReachedFinal	lattice-biglm-faster-decoder.h	/^  bool ReachedFinal() const { return final_active_; }$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
ReachedFinal	lattice-faster-decoder.h	/^  bool ReachedFinal() const { return final_active_; }$/;"	f	class:kaldi::LatticeFasterDecoder
ReachedFinal	lattice-simple-decoder.h	/^  bool ReachedFinal() const { return final_active_; }$/;"	f	class:kaldi::LatticeSimpleDecoder
ReachedFinal	nbest-decoder.h	/^  bool ReachedFinal() {$/;"	f	class:kaldi::NBestDecoder
ReachedFinal	simple-decoder.h	/^  bool ReachedFinal() {$/;"	f	class:kaldi::SimpleDecoder
Register	faster-decoder.h	/^  void Register(ParseOptions *po, bool full) {  \/\/\/ if "full", use obscure$/;"	f	struct:kaldi::FasterDecoderOptions
Register	lattice-faster-decoder.h	/^  void Register(ParseOptions *po) {$/;"	f	struct:kaldi::LatticeFasterDecoderConfig
Register	lattice-simple-decoder.h	/^  void Register(ParseOptions *po) {$/;"	f	struct:kaldi::LatticeSimpleDecoderConfig
Register	nbest-decoder.h	/^  void Register(ParseOptions *po, bool full) {  \/\/\/ if "full", use obscure$/;"	f	struct:kaldi::NBestDecoderOptions
Register	training-graph-compiler.h	/^  void Register(ParseOptions *po) {$/;"	f	struct:kaldi::TrainingGraphCompilerOptions
ResetLogLikeCache	decodable-am-diag-gmm.cc	/^void DecodableAmDiagGmmUnmapped::ResetLogLikeCache() {$/;"	f	class:kaldi::DecodableAmDiagGmmUnmapped
ResetLogLikeCache	decodable-am-sgmm.cc	/^void DecodableAmSgmm::ResetLogLikeCache() {$/;"	f	class:kaldi::DecodableAmSgmm
SeqToken	nbest-decoder.h	/^    struct SeqToken { \/\/ an incremental\/relative token inside a full Token$/;"	s	class:kaldi::NBestDecoder::TokenStore
SeqToken	nbest-decoder.h	/^  typedef TokenStore::SeqToken SeqToken;$/;"	t	class:kaldi::NBestDecoder
SetOptions	biglm-faster-decoder.h	/^  void SetOptions(const BiglmFasterDecoderOptions &opts) { opts_ = opts; }$/;"	f	class:kaldi::BiglmFasterDecoder
SetOptions	faster-decoder.h	/^  void SetOptions(const FasterDecoderOptions &opts) { opts_ = opts; }$/;"	f	class:kaldi::FasterDecoder
SetOptions	lattice-biglm-faster-decoder.h	/^ void SetOptions(const LatticeBiglmFasterDecoderConfig &config) { config_ = config; }  $/;"	f	class:kaldi::LatticeBiglmFasterDecoder
SetOptions	lattice-faster-decoder.h	/^  void SetOptions(const LatticeFasterDecoderConfig &config) {$/;"	f	class:kaldi::LatticeFasterDecoder
SetOptions	nbest-decoder.h	/^  void SetOptions(const NBestDecoderOptions &opts) { opts_ = opts; }$/;"	f	class:kaldi::NBestDecoder
SimpleDecoder	simple-decoder.h	/^  SimpleDecoder(const fst::Fst<fst::StdArc> &fst, BaseFloat beam): fst_(fst), beam_(beam) { }$/;"	f	class:kaldi::SimpleDecoder
SimpleDecoder	simple-decoder.h	/^class SimpleDecoder {$/;"	c	namespace:kaldi
StateId	biglm-faster-decoder.h	/^  typedef Arc::StateId StateId;$/;"	t	class:kaldi::BiglmFasterDecoder
StateId	faster-decoder.h	/^  typedef Arc::StateId StateId;$/;"	t	class:kaldi::FasterDecoder
StateId	lattice-biglm-faster-decoder.h	/^  typedef Arc::StateId StateId;$/;"	t	class:kaldi::LatticeBiglmFasterDecoder
StateId	lattice-faster-decoder.h	/^  typedef Arc::StateId StateId;$/;"	t	class:kaldi::LatticeFasterDecoder
StateId	lattice-simple-decoder.h	/^  typedef Arc::StateId StateId;$/;"	t	class:kaldi::LatticeSimpleDecoder
StateId	nbest-decoder.h	/^  typedef Arc::StateId StateId;$/;"	t	class:kaldi::NBestDecoder
StateId	simple-decoder.h	/^  typedef Arc::StateId StateId;$/;"	t	class:kaldi::SimpleDecoder
StateQueue	nbest-decoder.h	/^  typedef std::tr1::unordered_set<StateId> StateQueue;$/;"	t	class:kaldi::NBestDecoder
Token	biglm-faster-decoder.h	/^    inline Token(const Arc &arc, Token *prev):$/;"	f	class:kaldi::BiglmFasterDecoder::Token
Token	biglm-faster-decoder.h	/^    inline Token(const Arc &arc, Weight &ac_weight, Token *prev):$/;"	f	class:kaldi::BiglmFasterDecoder::Token
Token	biglm-faster-decoder.h	/^  class Token {$/;"	c	class:kaldi::BiglmFasterDecoder
Token	faster-decoder.h	/^    inline Token(const Arc &arc, Token *prev):$/;"	f	class:kaldi::FasterDecoder::Token
Token	faster-decoder.h	/^    inline Token(const Arc &arc, Weight &ac_weight, Token *prev):$/;"	f	class:kaldi::FasterDecoder::Token
Token	faster-decoder.h	/^  class Token {$/;"	c	class:kaldi::FasterDecoder
Token	lattice-biglm-faster-decoder.h	/^    inline Token(BaseFloat tot_cost, BaseFloat extra_cost, ForwardLink *links,$/;"	f	struct:kaldi::LatticeBiglmFasterDecoder::Token
Token	lattice-biglm-faster-decoder.h	/^  struct Token {$/;"	s	class:kaldi::LatticeBiglmFasterDecoder
Token	lattice-faster-decoder.h	/^    inline Token(BaseFloat tot_cost, BaseFloat extra_cost, ForwardLink *links,$/;"	f	struct:kaldi::LatticeFasterDecoder::Token
Token	lattice-faster-decoder.h	/^  struct Token {$/;"	s	class:kaldi::LatticeFasterDecoder
Token	lattice-simple-decoder.h	/^    Token() {}$/;"	f	struct:kaldi::LatticeSimpleDecoder::Token
Token	lattice-simple-decoder.h	/^    Token(BaseFloat tot_cost, BaseFloat extra_cost, ForwardLink *links,$/;"	f	struct:kaldi::LatticeSimpleDecoder::Token
Token	lattice-simple-decoder.h	/^  struct Token {$/;"	s	class:kaldi::LatticeSimpleDecoder
Token	nbest-decoder.h	/^    class Token {$/;"	c	class:kaldi::NBestDecoder::TokenStore
Token	nbest-decoder.h	/^  typedef TokenStore::Token Token;$/;"	t	class:kaldi::NBestDecoder
Token	simple-decoder.h	/^    Token(const Arc &arc, Token *prev): arc_(arc), prev_(prev), ref_count_(1) {$/;"	f	class:kaldi::SimpleDecoder::Token
Token	simple-decoder.h	/^  class Token {$/;"	c	class:kaldi::SimpleDecoder
TokenDelete	biglm-faster-decoder.h	/^    inline static void TokenDelete(Token *tok) {$/;"	f	class:kaldi::BiglmFasterDecoder::Token
TokenDelete	faster-decoder.h	/^    inline static void TokenDelete(Token *tok) {$/;"	f	class:kaldi::FasterDecoder::Token
TokenDelete	simple-decoder.h	/^    static void TokenDelete(Token *tok) {$/;"	f	class:kaldi::SimpleDecoder::Token
TokenHash	nbest-decoder.h	/^    typedef HashList<StateId, Token*> TokenHash;$/;"	t	class:kaldi::NBestDecoder::TokenStore
TokenHash	nbest-decoder.h	/^  typedef HashList<StateId, Token*> TokenHash;$/;"	t	class:kaldi::NBestDecoder
TokenList	lattice-biglm-faster-decoder.h	/^    TokenList(): toks(NULL), must_prune_forward_links(true),$/;"	f	struct:kaldi::LatticeBiglmFasterDecoder::TokenList
TokenList	lattice-biglm-faster-decoder.h	/^  struct TokenList {$/;"	s	class:kaldi::LatticeBiglmFasterDecoder
TokenList	lattice-faster-decoder.h	/^    TokenList(): toks(NULL), must_prune_forward_links(true),$/;"	f	struct:kaldi::LatticeFasterDecoder::TokenList
TokenList	lattice-faster-decoder.h	/^  struct TokenList {$/;"	s	class:kaldi::LatticeFasterDecoder
TokenList	lattice-simple-decoder.h	/^    TokenList(): toks(NULL), must_prune_forward_links(true),$/;"	f	struct:kaldi::LatticeSimpleDecoder::TokenList
TokenList	lattice-simple-decoder.h	/^  struct TokenList {$/;"	s	class:kaldi::LatticeSimpleDecoder
TokenStore	nbest-decoder.h	/^    TokenStore() {$/;"	f	class:kaldi::NBestDecoder::TokenStore
TokenStore	nbest-decoder.h	/^  class TokenStore {$/;"	c	class:kaldi::NBestDecoder
TrainingGraphCompiler	training-graph-compiler.cc	/^TrainingGraphCompiler::TrainingGraphCompiler(const TransitionModel &trans_model,$/;"	f	class:kaldi::TrainingGraphCompiler
TrainingGraphCompiler	training-graph-compiler.h	/^class TrainingGraphCompiler {$/;"	c	namespace:kaldi
TrainingGraphCompilerOptions	training-graph-compiler.h	/^  explicit TrainingGraphCompilerOptions(BaseFloat transition_scale = 1.0,$/;"	f	struct:kaldi::TrainingGraphCompilerOptions
TrainingGraphCompilerOptions	training-graph-compiler.h	/^struct TrainingGraphCompilerOptions {$/;"	s	namespace:kaldi
TransModel	decodable-am-diag-gmm.h	/^  const TransitionModel *TransModel() { return &trans_model_; }$/;"	f	class:kaldi::DecodableAmDiagGmm
TransModel	decodable-am-diag-gmm.h	/^  const TransitionModel *TransModel() { return &trans_model_; }$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
TransModel	decodable-am-diag-gmm.h	/^  const TransitionModel *TransModel() { return &trans_model_; }$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeMllr
TransModel	decodable-am-diag-gmm.h	/^  const TransitionModel *TransModel() { return &trans_model_; }$/;"	f	class:kaldi::DecodableAmDiagGmmScaled
Weight	biglm-faster-decoder.h	/^  typedef Arc::Weight Weight;$/;"	t	class:kaldi::BiglmFasterDecoder
Weight	faster-decoder.h	/^  typedef Arc::Weight Weight;$/;"	t	class:kaldi::FasterDecoder
Weight	lattice-biglm-faster-decoder.h	/^  typedef Arc::Weight Weight;$/;"	t	class:kaldi::LatticeBiglmFasterDecoder
Weight	lattice-faster-decoder.h	/^  typedef Arc::Weight Weight;$/;"	t	class:kaldi::LatticeFasterDecoder
Weight	lattice-simple-decoder.h	/^  typedef Arc::Weight Weight;$/;"	t	class:kaldi::LatticeSimpleDecoder
Weight	nbest-decoder.h	/^  typedef Arc::Weight Weight;$/;"	t	class:kaldi::NBestDecoder
Weight	simple-decoder.h	/^  typedef Arc::Weight Weight;$/;"	t	class:kaldi::SimpleDecoder
acoustic_cost	lattice-biglm-faster-decoder.h	/^    BaseFloat acoustic_cost; \/\/ acoustic cost (pre-scaled) of traversing link$/;"	m	struct:kaldi::LatticeBiglmFasterDecoder::ForwardLink
acoustic_cost	lattice-faster-decoder.h	/^    BaseFloat acoustic_cost; \/\/ acoustic cost (pre-scaled) of traversing link$/;"	m	struct:kaldi::LatticeFasterDecoder::ForwardLink
acoustic_cost	lattice-simple-decoder.h	/^    BaseFloat acoustic_cost; \/\/ acoustic cost (pre-scaled) of traversing link$/;"	m	struct:kaldi::LatticeSimpleDecoder::ForwardLink
acoustic_model_	decodable-am-diag-gmm.h	/^  const AmDiagGmm &acoustic_model_;$/;"	m	class:kaldi::DecodableAmDiagGmmUnmapped
acoustic_model_	decodable-am-sgmm.h	/^  const AmSgmm &acoustic_model_;$/;"	m	class:kaldi::DecodableAmSgmm
active_toks_	lattice-biglm-faster-decoder.h	/^  std::vector<TokenList> active_toks_; \/\/ Lists of tokens, indexed by$/;"	m	class:kaldi::LatticeBiglmFasterDecoder
active_toks_	lattice-faster-decoder.h	/^  std::vector<TokenList> active_toks_; \/\/ Lists of tokens, indexed by$/;"	m	class:kaldi::LatticeFasterDecoder
active_toks_	lattice-simple-decoder.h	/^  std::vector<TokenList> active_toks_; \/\/ Lists of tokens, indexed by$/;"	m	class:kaldi::LatticeSimpleDecoder
allocate_block_size_	nbest-decoder.h	/^    static const size_t allocate_block_size_ = 8192;$/;"	m	class:kaldi::NBestDecoder::TokenStore
allocated_s_	nbest-decoder.h	/^    std::vector<SeqToken*> allocated_s_;  \/\/ list of allocated seq tokens$/;"	m	class:kaldi::NBestDecoder::TokenStore
allocated_t_	nbest-decoder.h	/^    std::vector<Token*> allocated_t_;  \/\/ list of allocated tokens$/;"	m	class:kaldi::NBestDecoder::TokenStore
arc_	biglm-faster-decoder.h	/^    Arc arc_; \/\/ contains only the graph part of the cost,$/;"	m	class:kaldi::BiglmFasterDecoder::Token
arc_	faster-decoder.h	/^    Arc arc_; \/\/ contains only the graph part of the cost;$/;"	m	class:kaldi::FasterDecoder::Token
arc_	simple-decoder.h	/^    Arc arc_;$/;"	m	class:kaldi::SimpleDecoder::Token
beam	faster-decoder.h	/^  BaseFloat beam;$/;"	m	struct:kaldi::FasterDecoderOptions
beam	lattice-faster-decoder.h	/^  BaseFloat beam;$/;"	m	struct:kaldi::LatticeFasterDecoderConfig
beam	lattice-simple-decoder.h	/^  BaseFloat beam;$/;"	m	struct:kaldi::LatticeSimpleDecoderConfig
beam	nbest-decoder.h	/^  BaseFloat beam;$/;"	m	struct:kaldi::NBestDecoderOptions
beam_	simple-decoder.h	/^  BaseFloat beam_;$/;"	m	class:kaldi::SimpleDecoder
beam_delta	faster-decoder.h	/^  BaseFloat beam_delta;$/;"	m	struct:kaldi::FasterDecoderOptions
beam_delta	lattice-faster-decoder.h	/^  BaseFloat beam_delta; \/\/ has nothing to do with beam_ratio$/;"	m	struct:kaldi::LatticeFasterDecoderConfig
beam_delta	nbest-decoder.h	/^  BaseFloat beam_delta;$/;"	m	struct:kaldi::NBestDecoderOptions
beam_ratio	lattice-simple-decoder.h	/^  BaseFloat beam_ratio;$/;"	m	struct:kaldi::LatticeSimpleDecoderConfig
c	nbest-decoder.h	/^      Weight c; \/\/ c (total weight)$/;"	m	class:kaldi::NBestDecoder::TokenStore::Token
ca	nbest-decoder.h	/^      Weight ca; \/\/ acoustic part of c$/;"	m	class:kaldi::NBestDecoder::TokenStore::Token
config_	lattice-biglm-faster-decoder.h	/^  LatticeBiglmFasterDecoderConfig config_;$/;"	m	class:kaldi::LatticeBiglmFasterDecoder
config_	lattice-faster-decoder.h	/^  LatticeFasterDecoderConfig config_;$/;"	m	class:kaldi::LatticeFasterDecoder
config_	lattice-simple-decoder.h	/^  LatticeSimpleDecoderConfig config_;$/;"	m	class:kaldi::LatticeSimpleDecoder
cost_offsets_	lattice-faster-decoder.h	/^  std::vector<BaseFloat> cost_offsets_; \/\/ This contains, for each$/;"	m	class:kaldi::LatticeFasterDecoder
ctx_dep_	training-graph-compiler.h	/^  const ContextDependency &ctx_dep_;$/;"	m	class:kaldi::TrainingGraphCompiler
cur_frame_	decodable-am-sgmm2.h	/^  int32 cur_frame_;$/;"	m	class:kaldi::DecodableAmSgmm2
cur_toks_	lattice-simple-decoder.h	/^  unordered_map<StateId, Token*> cur_toks_;$/;"	m	class:kaldi::LatticeSimpleDecoder
cur_toks_	simple-decoder.h	/^  unordered_map<StateId, Token*> cur_toks_;$/;"	m	class:kaldi::SimpleDecoder
data_squared_	decodable-am-diag-gmm.h	/^  Vector<BaseFloat> data_squared_;  \/\/\/< Cache for fast likelihood calculation$/;"	m	class:kaldi::DecodableAmDiagGmmUnmapped
data_squared_	decodable-am-diag-gmm.h	/^  Vector<BaseFloat> data_squared_;  \/\/\/< Cached for fast likelihood calculation$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeMllr
decodable_	decodable-mapped.h	/^  DecodableInterface *decodable_;$/;"	m	class:kaldi::DecodableMapped
decodable_	nbest-decoder.h	/^    DecodableInterface *decodable_;$/;"	m	class:kaldi::NBestDecoder::TokenStore
decodable_	nbest-decoder.h	/^  DecodableInterface *decodable_;$/;"	m	class:kaldi::NBestDecoder
decodables_	decodable-sum.h	/^  std::vector<std::pair<DecodableInterface*, BaseFloat> > decodables_;$/;"	m	class:kaldi::DecodableSum
determinize_lattice	lattice-faster-decoder.h	/^  bool determinize_lattice; \/\/ not inspected by this class... used in$/;"	m	struct:kaldi::LatticeFasterDecoderConfig
determinize_lattice	lattice-simple-decoder.h	/^  bool determinize_lattice; \/\/ not inspected by this class... used in$/;"	m	struct:kaldi::LatticeSimpleDecoderConfig
disambig_syms_	training-graph-compiler.h	/^  std::vector<int32> disambig_syms_; \/\/ disambig symbols (if any) in the phone$/;"	m	class:kaldi::TrainingGraphCompiler
extra_cost	lattice-biglm-faster-decoder.h	/^    BaseFloat extra_cost; \/\/ >= 0.  After calling PruneForwardLinks, this equals$/;"	m	struct:kaldi::LatticeBiglmFasterDecoder::Token
extra_cost	lattice-faster-decoder.h	/^    BaseFloat extra_cost; \/\/ >= 0.  After calling PruneForwardLinks, this equals$/;"	m	struct:kaldi::LatticeFasterDecoder::Token
extra_cost	lattice-simple-decoder.h	/^    BaseFloat extra_cost; \/\/ >= 0.  After calling PruneForwardLinks, this equals$/;"	m	struct:kaldi::LatticeSimpleDecoder::Token
feature_matrix_	decodable-am-diag-gmm.h	/^  const Matrix<BaseFloat> &feature_matrix_;$/;"	m	class:kaldi::DecodableAmDiagGmmUnmapped
feature_matrix_	decodable-am-sgmm.h	/^  const Matrix<BaseFloat> &feature_matrix_;$/;"	m	class:kaldi::DecodableAmSgmm
feature_matrix_	decodable-am-sgmm2.h	/^  const Matrix<BaseFloat> &feature_matrix_;$/;"	m	class:kaldi::DecodableAmSgmm2
final_active_	lattice-biglm-faster-decoder.h	/^  bool final_active_; \/\/ use this to say whether we found active final tokens$/;"	m	class:kaldi::LatticeBiglmFasterDecoder
final_active_	lattice-faster-decoder.h	/^  bool final_active_; \/\/ use this to say whether we found active final tokens$/;"	m	class:kaldi::LatticeFasterDecoder
final_active_	lattice-simple-decoder.h	/^  bool final_active_; \/\/ use this to say whether we found active final tokens$/;"	m	class:kaldi::LatticeSimpleDecoder
final_costs_	lattice-biglm-faster-decoder.h	/^  std::map<Token*, BaseFloat> final_costs_; \/\/ A cache of final-costs$/;"	m	class:kaldi::LatticeBiglmFasterDecoder
final_costs_	lattice-faster-decoder.h	/^  std::map<Token*, BaseFloat> final_costs_; \/\/ A cache of final-costs$/;"	m	class:kaldi::LatticeFasterDecoder
final_costs_	lattice-simple-decoder.h	/^  std::map<Token*, BaseFloat> final_costs_; \/\/ A cache of final-costs$/;"	m	class:kaldi::LatticeSimpleDecoder
fmllr_xform_	decodable-am-diag-gmm.h	/^  const RegtreeFmllrDiagGmm &fmllr_xform_;$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
free_st_head_	nbest-decoder.h	/^    SeqToken *free_st_head_;$/;"	m	class:kaldi::NBestDecoder::TokenStore
free_t_head_	nbest-decoder.h	/^    Token *free_t_head_;$/;"	m	class:kaldi::NBestDecoder::TokenStore
fst_	biglm-faster-decoder.h	/^  const fst::Fst<fst::StdArc> &fst_;$/;"	m	class:kaldi::BiglmFasterDecoder
fst_	faster-decoder.h	/^  const fst::Fst<fst::StdArc> &fst_;$/;"	m	class:kaldi::FasterDecoder
fst_	lattice-biglm-faster-decoder.h	/^  const fst::Fst<fst::StdArc> &fst_;$/;"	m	class:kaldi::LatticeBiglmFasterDecoder
fst_	lattice-faster-decoder.h	/^  const fst::Fst<fst::StdArc> &fst_;$/;"	m	class:kaldi::LatticeFasterDecoder
fst_	lattice-simple-decoder.h	/^  const fst::Fst<fst::StdArc> &fst_;$/;"	m	class:kaldi::LatticeSimpleDecoder
fst_	nbest-decoder.h	/^  const fst::Fst<fst::StdArc> &fst_;$/;"	m	class:kaldi::NBestDecoder
fst_	simple-decoder.h	/^  const fst::Fst<fst::StdArc> &fst_;$/;"	m	class:kaldi::SimpleDecoder
graph_cost	lattice-biglm-faster-decoder.h	/^    BaseFloat graph_cost; \/\/ graph cost of traversing link (contains LM, etc.)$/;"	m	struct:kaldi::LatticeBiglmFasterDecoder::ForwardLink
graph_cost	lattice-faster-decoder.h	/^    BaseFloat graph_cost; \/\/ graph cost of traversing link (contains LM, etc.)$/;"	m	struct:kaldi::LatticeFasterDecoder::ForwardLink
graph_cost	lattice-simple-decoder.h	/^    BaseFloat graph_cost; \/\/ graph cost of traversing link (contains LM, etc.)$/;"	m	struct:kaldi::LatticeSimpleDecoder::ForwardLink
gselect_	decodable-am-sgmm.h	/^  std::vector<int32> gselect_;$/;"	m	class:kaldi::DecodableAmSgmm
gselect_	decodable-am-sgmm2.h	/^  const std::vector<std::vector<int32> > gselect_; $/;"	m	class:kaldi::DecodableAmSgmm2
gselect_all_	decodable-am-sgmm.h	/^  const std::vector<std::vector<int32> > gselect_all_;  \/\/\/< if nonempty,$/;"	m	class:kaldi::DecodableAmSgmm
hash	nbest-decoder.h	/^      unsigned hash; \/\/ hashing the output symbol sequence$/;"	m	class:kaldi::NBestDecoder::TokenStore::Token
hash_ratio	faster-decoder.h	/^  BaseFloat hash_ratio;$/;"	m	struct:kaldi::FasterDecoderOptions
hash_ratio	lattice-faster-decoder.h	/^  BaseFloat hash_ratio;$/;"	m	struct:kaldi::LatticeFasterDecoderConfig
hash_ratio	nbest-decoder.h	/^  BaseFloat hash_ratio;$/;"	m	struct:kaldi::NBestDecoderOptions
hit_time	decodable-am-diag-gmm.h	/^    int32 hit_time;     \/\/\/< Frame for which this value is relevant$/;"	m	struct:kaldi::DecodableAmDiagGmmUnmapped::LikelihoodCacheRecord
hit_time	decodable-am-sgmm.h	/^    int32 hit_time;     \/\/\/< Frame for which this value is relevant$/;"	m	struct:kaldi::DecodableAmSgmm::LikelihoodCacheRecord
i	nbest-decoder.h	/^      Label i;   \/\/ input label i$/;"	m	struct:kaldi::NBestDecoder::TokenStore::SeqToken
ilabel	lattice-biglm-faster-decoder.h	/^    Label ilabel; \/\/ ilabel on link.$/;"	m	struct:kaldi::LatticeBiglmFasterDecoder::ForwardLink
ilabel	lattice-faster-decoder.h	/^    Label ilabel; \/\/ ilabel on link.$/;"	m	struct:kaldi::LatticeFasterDecoder::ForwardLink
ilabel	lattice-simple-decoder.h	/^    Label ilabel; \/\/ ilabel on link.$/;"	m	struct:kaldi::LatticeSimpleDecoder::ForwardLink
index_map_	decodable-mapped.h	/^  std::vector<int32> index_map_;$/;"	m	class:kaldi::DecodableMapped
is_cached_	decodable-am-diag-gmm.h	/^  std::vector<bool> is_cached_;$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeMllr
kaldi	biglm-faster-decoder.h	/^namespace kaldi {$/;"	n
kaldi	decodable-am-diag-gmm.cc	/^namespace kaldi {$/;"	n	file:
kaldi	decodable-am-diag-gmm.h	/^namespace kaldi {$/;"	n
kaldi	decodable-am-sgmm.cc	/^namespace kaldi {$/;"	n	file:
kaldi	decodable-am-sgmm.h	/^namespace kaldi {$/;"	n
kaldi	decodable-am-sgmm2.cc	/^namespace kaldi {$/;"	n	file:
kaldi	decodable-am-sgmm2.h	/^namespace kaldi {$/;"	n
kaldi	decodable-mapped.h	/^namespace kaldi {$/;"	n
kaldi	decodable-matrix.h	/^namespace kaldi {$/;"	n
kaldi	decodable-sum.h	/^namespace kaldi {$/;"	n
kaldi	faster-decoder.cc	/^namespace kaldi {$/;"	n	file:
kaldi	faster-decoder.h	/^namespace kaldi {$/;"	n
kaldi	lattice-biglm-faster-decoder.h	/^namespace kaldi {$/;"	n
kaldi	lattice-faster-decoder.cc	/^namespace kaldi {$/;"	n	file:
kaldi	lattice-faster-decoder.h	/^namespace kaldi {$/;"	n
kaldi	lattice-simple-decoder.cc	/^namespace kaldi {$/;"	n	file:
kaldi	lattice-simple-decoder.h	/^namespace kaldi {$/;"	n
kaldi	nbest-decoder.h	/^namespace kaldi {$/;"	n
kaldi	simple-decoder.h	/^namespace kaldi {$/;"	n
kaldi	training-graph-compiler.cc	/^namespace kaldi {$/;"	n	file:
kaldi	training-graph-compiler.h	/^namespace kaldi {$/;"	n
kaldi::BiglmFasterDecoder	biglm-faster-decoder.h	/^class BiglmFasterDecoder {$/;"	c	namespace:kaldi
kaldi::BiglmFasterDecoder::Arc	biglm-faster-decoder.h	/^  typedef fst::StdArc Arc;$/;"	t	class:kaldi::BiglmFasterDecoder
kaldi::BiglmFasterDecoder::BiglmFasterDecoder	biglm-faster-decoder.h	/^  BiglmFasterDecoder(const fst::Fst<fst::StdArc> &fst,$/;"	f	class:kaldi::BiglmFasterDecoder
kaldi::BiglmFasterDecoder::ClearToks	biglm-faster-decoder.h	/^  void ClearToks(Elem *list) {$/;"	f	class:kaldi::BiglmFasterDecoder
kaldi::BiglmFasterDecoder::ConstructPair	biglm-faster-decoder.h	/^  inline PairId ConstructPair(StateId fst_state, StateId lm_state) {$/;"	f	class:kaldi::BiglmFasterDecoder
kaldi::BiglmFasterDecoder::Decode	biglm-faster-decoder.h	/^  void Decode(DecodableInterface *decodable) {$/;"	f	class:kaldi::BiglmFasterDecoder
kaldi::BiglmFasterDecoder::Elem	biglm-faster-decoder.h	/^  typedef HashList<PairId, Token*>::Elem Elem;$/;"	t	class:kaldi::BiglmFasterDecoder
kaldi::BiglmFasterDecoder::GetBestPath	biglm-faster-decoder.h	/^  bool GetBestPath(fst::MutableFst<LatticeArc> *fst_out) {$/;"	f	class:kaldi::BiglmFasterDecoder
kaldi::BiglmFasterDecoder::GetCutoff	biglm-faster-decoder.h	/^  BaseFloat GetCutoff(Elem *list_head, size_t *tok_count,$/;"	f	class:kaldi::BiglmFasterDecoder
kaldi::BiglmFasterDecoder::Label	biglm-faster-decoder.h	/^  typedef Arc::Label Label;$/;"	t	class:kaldi::BiglmFasterDecoder
kaldi::BiglmFasterDecoder::PairId	biglm-faster-decoder.h	/^  typedef uint64 PairId;$/;"	t	class:kaldi::BiglmFasterDecoder
kaldi::BiglmFasterDecoder::PairToLmState	biglm-faster-decoder.h	/^  static inline StateId PairToLmState(PairId state_pair) {$/;"	f	class:kaldi::BiglmFasterDecoder
kaldi::BiglmFasterDecoder::PairToState	biglm-faster-decoder.h	/^  static inline StateId PairToState(PairId state_pair) {$/;"	f	class:kaldi::BiglmFasterDecoder
kaldi::BiglmFasterDecoder::PossiblyResizeHash	biglm-faster-decoder.h	/^  void PossiblyResizeHash(size_t num_toks) {$/;"	f	class:kaldi::BiglmFasterDecoder
kaldi::BiglmFasterDecoder::ProcessEmitting	biglm-faster-decoder.h	/^  BaseFloat ProcessEmitting(DecodableInterface *decodable, int frame) {$/;"	f	class:kaldi::BiglmFasterDecoder
kaldi::BiglmFasterDecoder::ProcessNonemitting	biglm-faster-decoder.h	/^  void ProcessNonemitting(BaseFloat cutoff) {$/;"	f	class:kaldi::BiglmFasterDecoder
kaldi::BiglmFasterDecoder::PropagateLm	biglm-faster-decoder.h	/^  inline StateId PropagateLm(StateId lm_state,$/;"	f	class:kaldi::BiglmFasterDecoder
kaldi::BiglmFasterDecoder::ReachedFinal	biglm-faster-decoder.h	/^  bool ReachedFinal() {$/;"	f	class:kaldi::BiglmFasterDecoder
kaldi::BiglmFasterDecoder::SetOptions	biglm-faster-decoder.h	/^  void SetOptions(const BiglmFasterDecoderOptions &opts) { opts_ = opts; }$/;"	f	class:kaldi::BiglmFasterDecoder
kaldi::BiglmFasterDecoder::StateId	biglm-faster-decoder.h	/^  typedef Arc::StateId StateId;$/;"	t	class:kaldi::BiglmFasterDecoder
kaldi::BiglmFasterDecoder::Token	biglm-faster-decoder.h	/^  class Token {$/;"	c	class:kaldi::BiglmFasterDecoder
kaldi::BiglmFasterDecoder::Token::Token	biglm-faster-decoder.h	/^    inline Token(const Arc &arc, Token *prev):$/;"	f	class:kaldi::BiglmFasterDecoder::Token
kaldi::BiglmFasterDecoder::Token::Token	biglm-faster-decoder.h	/^    inline Token(const Arc &arc, Weight &ac_weight, Token *prev):$/;"	f	class:kaldi::BiglmFasterDecoder::Token
kaldi::BiglmFasterDecoder::Token::TokenDelete	biglm-faster-decoder.h	/^    inline static void TokenDelete(Token *tok) {$/;"	f	class:kaldi::BiglmFasterDecoder::Token
kaldi::BiglmFasterDecoder::Token::arc_	biglm-faster-decoder.h	/^    Arc arc_; \/\/ contains only the graph part of the cost,$/;"	m	class:kaldi::BiglmFasterDecoder::Token
kaldi::BiglmFasterDecoder::Token::operator <	biglm-faster-decoder.h	/^    inline bool operator < (const Token &other) {$/;"	f	class:kaldi::BiglmFasterDecoder::Token
kaldi::BiglmFasterDecoder::Token::prev_	biglm-faster-decoder.h	/^    Token *prev_;$/;"	m	class:kaldi::BiglmFasterDecoder::Token
kaldi::BiglmFasterDecoder::Token::ref_count_	biglm-faster-decoder.h	/^    int32 ref_count_;$/;"	m	class:kaldi::BiglmFasterDecoder::Token
kaldi::BiglmFasterDecoder::Token::weight_	biglm-faster-decoder.h	/^    Weight weight_; \/\/ weight up to current point.$/;"	m	class:kaldi::BiglmFasterDecoder::Token
kaldi::BiglmFasterDecoder::Token::~Token	biglm-faster-decoder.h	/^    inline ~Token() {$/;"	f	class:kaldi::BiglmFasterDecoder::Token
kaldi::BiglmFasterDecoder::Weight	biglm-faster-decoder.h	/^  typedef Arc::Weight Weight;$/;"	t	class:kaldi::BiglmFasterDecoder
kaldi::BiglmFasterDecoder::fst_	biglm-faster-decoder.h	/^  const fst::Fst<fst::StdArc> &fst_;$/;"	m	class:kaldi::BiglmFasterDecoder
kaldi::BiglmFasterDecoder::lm_diff_fst_	biglm-faster-decoder.h	/^  const fst::DeterministicOnDemandFst<fst::StdArc> &lm_diff_fst_;$/;"	m	class:kaldi::BiglmFasterDecoder
kaldi::BiglmFasterDecoder::opts_	biglm-faster-decoder.h	/^  BiglmFasterDecoderOptions opts_;$/;"	m	class:kaldi::BiglmFasterDecoder
kaldi::BiglmFasterDecoder::queue_	biglm-faster-decoder.h	/^  std::vector<PairId> queue_;  \/\/ temp variable used in ProcessNonemitting,$/;"	m	class:kaldi::BiglmFasterDecoder
kaldi::BiglmFasterDecoder::tmp_array_	biglm-faster-decoder.h	/^  std::vector<BaseFloat> tmp_array_;  \/\/ used in GetCutoff.$/;"	m	class:kaldi::BiglmFasterDecoder
kaldi::BiglmFasterDecoder::toks_	biglm-faster-decoder.h	/^  HashList<PairId, Token*> toks_;$/;"	m	class:kaldi::BiglmFasterDecoder
kaldi::BiglmFasterDecoder::warned_noarc_	biglm-faster-decoder.h	/^  bool warned_noarc_;$/;"	m	class:kaldi::BiglmFasterDecoder
kaldi::BiglmFasterDecoder::~BiglmFasterDecoder	biglm-faster-decoder.h	/^  ~BiglmFasterDecoder() {$/;"	f	class:kaldi::BiglmFasterDecoder
kaldi::BiglmFasterDecoderOptions	biglm-faster-decoder.h	/^typedef FasterDecoderOptions BiglmFasterDecoderOptions;$/;"	t	namespace:kaldi
kaldi::ComputeGconsts	decodable-am-diag-gmm.cc	/^static void ComputeGconsts(const VectorBase<BaseFloat> &weights,$/;"	f	namespace:kaldi
kaldi::DecodableAmDiagGmm	decodable-am-diag-gmm.h	/^class DecodableAmDiagGmm: public DecodableAmDiagGmmUnmapped {$/;"	c	namespace:kaldi
kaldi::DecodableAmDiagGmm::DecodableAmDiagGmm	decodable-am-diag-gmm.h	/^  DecodableAmDiagGmm(const AmDiagGmm &am,$/;"	f	class:kaldi::DecodableAmDiagGmm
kaldi::DecodableAmDiagGmm::LogLikelihood	decodable-am-diag-gmm.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 tid) {$/;"	f	class:kaldi::DecodableAmDiagGmm
kaldi::DecodableAmDiagGmm::NumIndices	decodable-am-diag-gmm.h	/^  virtual int32 NumIndices() { return trans_model_.NumTransitionIds(); }$/;"	f	class:kaldi::DecodableAmDiagGmm
kaldi::DecodableAmDiagGmm::TransModel	decodable-am-diag-gmm.h	/^  const TransitionModel *TransModel() { return &trans_model_; }$/;"	f	class:kaldi::DecodableAmDiagGmm
kaldi::DecodableAmDiagGmm::trans_model_	decodable-am-diag-gmm.h	/^  const TransitionModel &trans_model_;  \/\/ for tid to pdf mapping$/;"	m	class:kaldi::DecodableAmDiagGmm
kaldi::DecodableAmDiagGmmRegtreeFmllr	decodable-am-diag-gmm.h	/^class DecodableAmDiagGmmRegtreeFmllr: public DecodableAmDiagGmmUnmapped {$/;"	c	namespace:kaldi
kaldi::DecodableAmDiagGmmRegtreeFmllr::DecodableAmDiagGmmRegtreeFmllr	decodable-am-diag-gmm.h	/^  DecodableAmDiagGmmRegtreeFmllr(const AmDiagGmm &am,$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
kaldi::DecodableAmDiagGmmRegtreeFmllr::LogLikelihood	decodable-am-diag-gmm.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 tid) {$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
kaldi::DecodableAmDiagGmmRegtreeFmllr::LogLikelihoodZeroBased	decodable-am-diag-gmm.cc	/^BaseFloat DecodableAmDiagGmmRegtreeFmllr::LogLikelihoodZeroBased(int32 frame,$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
kaldi::DecodableAmDiagGmmRegtreeFmllr::NumFrames	decodable-am-diag-gmm.h	/^  virtual int32 NumFrames() { return feature_matrix_.NumRows(); }$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
kaldi::DecodableAmDiagGmmRegtreeFmllr::NumIndices	decodable-am-diag-gmm.h	/^  virtual int32 NumIndices() { return trans_model_.NumTransitionIds(); }$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
kaldi::DecodableAmDiagGmmRegtreeFmllr::TransModel	decodable-am-diag-gmm.h	/^  const TransitionModel *TransModel() { return &trans_model_; }$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
kaldi::DecodableAmDiagGmmRegtreeFmllr::fmllr_xform_	decodable-am-diag-gmm.h	/^  const RegtreeFmllrDiagGmm &fmllr_xform_;$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
kaldi::DecodableAmDiagGmmRegtreeFmllr::logdets_	decodable-am-diag-gmm.h	/^  Vector<BaseFloat> logdets_;$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
kaldi::DecodableAmDiagGmmRegtreeFmllr::regtree_	decodable-am-diag-gmm.h	/^  const RegressionTree &regtree_;$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
kaldi::DecodableAmDiagGmmRegtreeFmllr::scale_	decodable-am-diag-gmm.h	/^  BaseFloat scale_;$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
kaldi::DecodableAmDiagGmmRegtreeFmllr::trans_model_	decodable-am-diag-gmm.h	/^  const TransitionModel &trans_model_;  \/\/ for transition-id to pdf mapping$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
kaldi::DecodableAmDiagGmmRegtreeFmllr::valid_logdets_	decodable-am-diag-gmm.h	/^  bool valid_logdets_;$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
kaldi::DecodableAmDiagGmmRegtreeFmllr::xformed_data_	decodable-am-diag-gmm.h	/^  std::vector< Vector<BaseFloat> > xformed_data_;$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
kaldi::DecodableAmDiagGmmRegtreeFmllr::xformed_data_squared_	decodable-am-diag-gmm.h	/^  std::vector< Vector<BaseFloat> > xformed_data_squared_;$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
kaldi::DecodableAmDiagGmmRegtreeMllr	decodable-am-diag-gmm.h	/^class DecodableAmDiagGmmRegtreeMllr: public DecodableAmDiagGmmUnmapped {$/;"	c	namespace:kaldi
kaldi::DecodableAmDiagGmmRegtreeMllr::DecodableAmDiagGmmRegtreeMllr	decodable-am-diag-gmm.h	/^  DecodableAmDiagGmmRegtreeMllr(const AmDiagGmm &am,$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeMllr
kaldi::DecodableAmDiagGmmRegtreeMllr::GetXformedGconsts	decodable-am-diag-gmm.cc	/^const Vector<BaseFloat>& DecodableAmDiagGmmRegtreeMllr::GetXformedGconsts($/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeMllr
kaldi::DecodableAmDiagGmmRegtreeMllr::GetXformedMeanInvVars	decodable-am-diag-gmm.cc	/^const Matrix<BaseFloat>& DecodableAmDiagGmmRegtreeMllr::GetXformedMeanInvVars($/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeMllr
kaldi::DecodableAmDiagGmmRegtreeMllr::InitCache	decodable-am-diag-gmm.cc	/^void DecodableAmDiagGmmRegtreeMllr::InitCache() {$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeMllr
kaldi::DecodableAmDiagGmmRegtreeMllr::LogLikelihood	decodable-am-diag-gmm.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 tid) {$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeMllr
kaldi::DecodableAmDiagGmmRegtreeMllr::LogLikelihoodZeroBased	decodable-am-diag-gmm.cc	/^BaseFloat DecodableAmDiagGmmRegtreeMllr::LogLikelihoodZeroBased(int32 frame,$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeMllr
kaldi::DecodableAmDiagGmmRegtreeMllr::NumFrames	decodable-am-diag-gmm.h	/^  virtual int32 NumFrames() { return feature_matrix_.NumRows(); }$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeMllr
kaldi::DecodableAmDiagGmmRegtreeMllr::NumIndices	decodable-am-diag-gmm.h	/^  virtual int32 NumIndices() { return trans_model_.NumTransitionIds(); }$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeMllr
kaldi::DecodableAmDiagGmmRegtreeMllr::TransModel	decodable-am-diag-gmm.h	/^  const TransitionModel *TransModel() { return &trans_model_; }$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeMllr
kaldi::DecodableAmDiagGmmRegtreeMllr::data_squared_	decodable-am-diag-gmm.h	/^  Vector<BaseFloat> data_squared_;  \/\/\/< Cached for fast likelihood calculation$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeMllr
kaldi::DecodableAmDiagGmmRegtreeMllr::is_cached_	decodable-am-diag-gmm.h	/^  std::vector<bool> is_cached_;$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeMllr
kaldi::DecodableAmDiagGmmRegtreeMllr::mllr_xform_	decodable-am-diag-gmm.h	/^  const RegtreeMllrDiagGmm &mllr_xform_;$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeMllr
kaldi::DecodableAmDiagGmmRegtreeMllr::regtree_	decodable-am-diag-gmm.h	/^  const RegressionTree &regtree_;$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeMllr
kaldi::DecodableAmDiagGmmRegtreeMllr::scale_	decodable-am-diag-gmm.h	/^  BaseFloat scale_;$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeMllr
kaldi::DecodableAmDiagGmmRegtreeMllr::trans_model_	decodable-am-diag-gmm.h	/^  const TransitionModel &trans_model_;  \/\/ for transition-id to pdf mapping$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeMllr
kaldi::DecodableAmDiagGmmRegtreeMllr::xformed_gconsts_	decodable-am-diag-gmm.h	/^  std::vector< Vector<BaseFloat>* > xformed_gconsts_;$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeMllr
kaldi::DecodableAmDiagGmmRegtreeMllr::xformed_mean_invvars_	decodable-am-diag-gmm.h	/^  std::vector< Matrix<BaseFloat>* > xformed_mean_invvars_;$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeMllr
kaldi::DecodableAmDiagGmmRegtreeMllr::~DecodableAmDiagGmmRegtreeMllr	decodable-am-diag-gmm.cc	/^DecodableAmDiagGmmRegtreeMllr::~DecodableAmDiagGmmRegtreeMllr() {$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeMllr
kaldi::DecodableAmDiagGmmScaled	decodable-am-diag-gmm.h	/^class DecodableAmDiagGmmScaled: public DecodableAmDiagGmmUnmapped {$/;"	c	namespace:kaldi
kaldi::DecodableAmDiagGmmScaled::DecodableAmDiagGmmScaled	decodable-am-diag-gmm.h	/^  DecodableAmDiagGmmScaled(const AmDiagGmm &am,$/;"	f	class:kaldi::DecodableAmDiagGmmScaled
kaldi::DecodableAmDiagGmmScaled::LogLikelihood	decodable-am-diag-gmm.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 tid) {$/;"	f	class:kaldi::DecodableAmDiagGmmScaled
kaldi::DecodableAmDiagGmmScaled::NumIndices	decodable-am-diag-gmm.h	/^  virtual int32 NumIndices() { return trans_model_.NumTransitionIds(); }$/;"	f	class:kaldi::DecodableAmDiagGmmScaled
kaldi::DecodableAmDiagGmmScaled::TransModel	decodable-am-diag-gmm.h	/^  const TransitionModel *TransModel() { return &trans_model_; }$/;"	f	class:kaldi::DecodableAmDiagGmmScaled
kaldi::DecodableAmDiagGmmScaled::scale_	decodable-am-diag-gmm.h	/^  BaseFloat scale_;$/;"	m	class:kaldi::DecodableAmDiagGmmScaled
kaldi::DecodableAmDiagGmmScaled::trans_model_	decodable-am-diag-gmm.h	/^  const TransitionModel &trans_model_;  \/\/ for transition-id to pdf mapping$/;"	m	class:kaldi::DecodableAmDiagGmmScaled
kaldi::DecodableAmDiagGmmUnmapped	decodable-am-diag-gmm.h	/^class DecodableAmDiagGmmUnmapped : public DecodableInterface {$/;"	c	namespace:kaldi
kaldi::DecodableAmDiagGmmUnmapped::DecodableAmDiagGmmUnmapped	decodable-am-diag-gmm.h	/^  DecodableAmDiagGmmUnmapped(const AmDiagGmm &am,$/;"	f	class:kaldi::DecodableAmDiagGmmUnmapped
kaldi::DecodableAmDiagGmmUnmapped::IsLastFrame	decodable-am-diag-gmm.h	/^  virtual bool IsLastFrame(int32 frame) {$/;"	f	class:kaldi::DecodableAmDiagGmmUnmapped
kaldi::DecodableAmDiagGmmUnmapped::LikelihoodCacheRecord	decodable-am-diag-gmm.h	/^  struct LikelihoodCacheRecord {$/;"	s	class:kaldi::DecodableAmDiagGmmUnmapped
kaldi::DecodableAmDiagGmmUnmapped::LikelihoodCacheRecord::hit_time	decodable-am-diag-gmm.h	/^    int32 hit_time;     \/\/\/< Frame for which this value is relevant$/;"	m	struct:kaldi::DecodableAmDiagGmmUnmapped::LikelihoodCacheRecord
kaldi::DecodableAmDiagGmmUnmapped::LikelihoodCacheRecord::log_like	decodable-am-diag-gmm.h	/^    BaseFloat log_like;  \/\/\/< Cache value$/;"	m	struct:kaldi::DecodableAmDiagGmmUnmapped::LikelihoodCacheRecord
kaldi::DecodableAmDiagGmmUnmapped::LogLikelihood	decodable-am-diag-gmm.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 state_index) {$/;"	f	class:kaldi::DecodableAmDiagGmmUnmapped
kaldi::DecodableAmDiagGmmUnmapped::LogLikelihoodZeroBased	decodable-am-diag-gmm.cc	/^BaseFloat DecodableAmDiagGmmUnmapped::LogLikelihoodZeroBased($/;"	f	class:kaldi::DecodableAmDiagGmmUnmapped
kaldi::DecodableAmDiagGmmUnmapped::NumFrames	decodable-am-diag-gmm.h	/^  int32 NumFrames() { return feature_matrix_.NumRows(); }$/;"	f	class:kaldi::DecodableAmDiagGmmUnmapped
kaldi::DecodableAmDiagGmmUnmapped::NumIndices	decodable-am-diag-gmm.h	/^  virtual int32 NumIndices() { return acoustic_model_.NumPdfs(); }$/;"	f	class:kaldi::DecodableAmDiagGmmUnmapped
kaldi::DecodableAmDiagGmmUnmapped::ResetLogLikeCache	decodable-am-diag-gmm.cc	/^void DecodableAmDiagGmmUnmapped::ResetLogLikeCache() {$/;"	f	class:kaldi::DecodableAmDiagGmmUnmapped
kaldi::DecodableAmDiagGmmUnmapped::acoustic_model_	decodable-am-diag-gmm.h	/^  const AmDiagGmm &acoustic_model_;$/;"	m	class:kaldi::DecodableAmDiagGmmUnmapped
kaldi::DecodableAmDiagGmmUnmapped::data_squared_	decodable-am-diag-gmm.h	/^  Vector<BaseFloat> data_squared_;  \/\/\/< Cache for fast likelihood calculation$/;"	m	class:kaldi::DecodableAmDiagGmmUnmapped
kaldi::DecodableAmDiagGmmUnmapped::feature_matrix_	decodable-am-diag-gmm.h	/^  const Matrix<BaseFloat> &feature_matrix_;$/;"	m	class:kaldi::DecodableAmDiagGmmUnmapped
kaldi::DecodableAmDiagGmmUnmapped::log_like_cache_	decodable-am-diag-gmm.h	/^  std::vector<LikelihoodCacheRecord> log_like_cache_;$/;"	m	class:kaldi::DecodableAmDiagGmmUnmapped
kaldi::DecodableAmDiagGmmUnmapped::previous_frame_	decodable-am-diag-gmm.h	/^  int32 previous_frame_;$/;"	m	class:kaldi::DecodableAmDiagGmmUnmapped
kaldi::DecodableAmSgmm	decodable-am-sgmm.h	/^class DecodableAmSgmm : public DecodableInterface {$/;"	c	namespace:kaldi
kaldi::DecodableAmSgmm2	decodable-am-sgmm2.h	/^class DecodableAmSgmm2 : public DecodableInterface {$/;"	c	namespace:kaldi
kaldi::DecodableAmSgmm2::DecodableAmSgmm2	decodable-am-sgmm2.h	/^  DecodableAmSgmm2(const AmSgmm2 &sgmm,$/;"	f	class:kaldi::DecodableAmSgmm2
kaldi::DecodableAmSgmm2::IsLastFrame	decodable-am-sgmm2.h	/^  virtual bool IsLastFrame(int32 frame) {$/;"	f	class:kaldi::DecodableAmSgmm2
kaldi::DecodableAmSgmm2::LogLikelihood	decodable-am-sgmm2.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 tid) {$/;"	f	class:kaldi::DecodableAmSgmm2
kaldi::DecodableAmSgmm2::LogLikelihoodForPdf	decodable-am-sgmm2.cc	/^BaseFloat DecodableAmSgmm2::LogLikelihoodForPdf(int32 frame, int32 pdf_id) {$/;"	f	class:kaldi::DecodableAmSgmm2
kaldi::DecodableAmSgmm2::NumFrames	decodable-am-sgmm2.h	/^  int32 NumFrames() { return feature_matrix_.NumRows(); }$/;"	f	class:kaldi::DecodableAmSgmm2
kaldi::DecodableAmSgmm2::NumIndices	decodable-am-sgmm2.h	/^  virtual int32 NumIndices() { return trans_model_.NumTransitionIds(); }$/;"	f	class:kaldi::DecodableAmSgmm2
kaldi::DecodableAmSgmm2::cur_frame_	decodable-am-sgmm2.h	/^  int32 cur_frame_;$/;"	m	class:kaldi::DecodableAmSgmm2
kaldi::DecodableAmSgmm2::feature_matrix_	decodable-am-sgmm2.h	/^  const Matrix<BaseFloat> &feature_matrix_;$/;"	m	class:kaldi::DecodableAmSgmm2
kaldi::DecodableAmSgmm2::gselect_	decodable-am-sgmm2.h	/^  const std::vector<std::vector<int32> > gselect_; $/;"	m	class:kaldi::DecodableAmSgmm2
kaldi::DecodableAmSgmm2::log_prune_	decodable-am-sgmm2.h	/^  BaseFloat log_prune_;$/;"	m	class:kaldi::DecodableAmSgmm2
kaldi::DecodableAmSgmm2::per_frame_vars_	decodable-am-sgmm2.h	/^  Sgmm2PerFrameDerivedVars per_frame_vars_;$/;"	m	class:kaldi::DecodableAmSgmm2
kaldi::DecodableAmSgmm2::sgmm_	decodable-am-sgmm2.h	/^  const AmSgmm2 &sgmm_;$/;"	m	class:kaldi::DecodableAmSgmm2
kaldi::DecodableAmSgmm2::sgmm_cache_	decodable-am-sgmm2.h	/^  Sgmm2LikelihoodCache sgmm_cache_;$/;"	m	class:kaldi::DecodableAmSgmm2
kaldi::DecodableAmSgmm2::spk_	decodable-am-sgmm2.h	/^  Sgmm2PerSpkDerivedVars *spk_;$/;"	m	class:kaldi::DecodableAmSgmm2
kaldi::DecodableAmSgmm2::trans_model_	decodable-am-sgmm2.h	/^  const TransitionModel &trans_model_;  \/\/\/< for tid to pdf mapping$/;"	m	class:kaldi::DecodableAmSgmm2
kaldi::DecodableAmSgmm2Scaled	decodable-am-sgmm2.h	/^class DecodableAmSgmm2Scaled : public DecodableAmSgmm2 {$/;"	c	namespace:kaldi
kaldi::DecodableAmSgmm2Scaled::DecodableAmSgmm2Scaled	decodable-am-sgmm2.h	/^  DecodableAmSgmm2Scaled(const AmSgmm2 &sgmm,$/;"	f	class:kaldi::DecodableAmSgmm2Scaled
kaldi::DecodableAmSgmm2Scaled::LogLikelihood	decodable-am-sgmm2.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 tid) {$/;"	f	class:kaldi::DecodableAmSgmm2Scaled
kaldi::DecodableAmSgmm2Scaled::scale_	decodable-am-sgmm2.h	/^  BaseFloat scale_;$/;"	m	class:kaldi::DecodableAmSgmm2Scaled
kaldi::DecodableAmSgmm::DecodableAmSgmm	decodable-am-sgmm.h	/^  DecodableAmSgmm(const SgmmGselectConfig &opts,$/;"	f	class:kaldi::DecodableAmSgmm
kaldi::DecodableAmSgmm::IsLastFrame	decodable-am-sgmm.h	/^  virtual bool IsLastFrame(int32 frame) {$/;"	f	class:kaldi::DecodableAmSgmm
kaldi::DecodableAmSgmm::LikelihoodCacheRecord	decodable-am-sgmm.h	/^  struct LikelihoodCacheRecord {$/;"	s	class:kaldi::DecodableAmSgmm
kaldi::DecodableAmSgmm::LikelihoodCacheRecord::hit_time	decodable-am-sgmm.h	/^    int32 hit_time;     \/\/\/< Frame for which this value is relevant$/;"	m	struct:kaldi::DecodableAmSgmm::LikelihoodCacheRecord
kaldi::DecodableAmSgmm::LikelihoodCacheRecord::log_like	decodable-am-sgmm.h	/^    BaseFloat log_like;  \/\/\/< Cache value$/;"	m	struct:kaldi::DecodableAmSgmm::LikelihoodCacheRecord
kaldi::DecodableAmSgmm::LogLikelihood	decodable-am-sgmm.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 tid) {$/;"	f	class:kaldi::DecodableAmSgmm
kaldi::DecodableAmSgmm::LogLikelihoodZeroBased	decodable-am-sgmm.cc	/^BaseFloat DecodableAmSgmm::LogLikelihoodZeroBased(int32 frame, int32 pdf_id) {$/;"	f	class:kaldi::DecodableAmSgmm
kaldi::DecodableAmSgmm::NumFrames	decodable-am-sgmm.h	/^  int32 NumFrames() { return feature_matrix_.NumRows(); }$/;"	f	class:kaldi::DecodableAmSgmm
kaldi::DecodableAmSgmm::NumIndices	decodable-am-sgmm.h	/^  virtual int32 NumIndices() { return trans_model_.NumTransitionIds(); }$/;"	f	class:kaldi::DecodableAmSgmm
kaldi::DecodableAmSgmm::ResetLogLikeCache	decodable-am-sgmm.cc	/^void DecodableAmSgmm::ResetLogLikeCache() {$/;"	f	class:kaldi::DecodableAmSgmm
kaldi::DecodableAmSgmm::acoustic_model_	decodable-am-sgmm.h	/^  const AmSgmm &acoustic_model_;$/;"	m	class:kaldi::DecodableAmSgmm
kaldi::DecodableAmSgmm::feature_matrix_	decodable-am-sgmm.h	/^  const Matrix<BaseFloat> &feature_matrix_;$/;"	m	class:kaldi::DecodableAmSgmm
kaldi::DecodableAmSgmm::gselect_	decodable-am-sgmm.h	/^  std::vector<int32> gselect_;$/;"	m	class:kaldi::DecodableAmSgmm
kaldi::DecodableAmSgmm::gselect_all_	decodable-am-sgmm.h	/^  const std::vector<std::vector<int32> > gselect_all_;  \/\/\/< if nonempty,$/;"	m	class:kaldi::DecodableAmSgmm
kaldi::DecodableAmSgmm::log_like_cache_	decodable-am-sgmm.h	/^  std::vector<LikelihoodCacheRecord> log_like_cache_;$/;"	m	class:kaldi::DecodableAmSgmm
kaldi::DecodableAmSgmm::log_prune_	decodable-am-sgmm.h	/^  BaseFloat log_prune_;$/;"	m	class:kaldi::DecodableAmSgmm
kaldi::DecodableAmSgmm::per_frame_vars_	decodable-am-sgmm.h	/^  SgmmPerFrameDerivedVars per_frame_vars_;$/;"	m	class:kaldi::DecodableAmSgmm
kaldi::DecodableAmSgmm::previous_frame_	decodable-am-sgmm.h	/^  int32 previous_frame_;$/;"	m	class:kaldi::DecodableAmSgmm
kaldi::DecodableAmSgmm::sgmm_config_	decodable-am-sgmm.h	/^  const SgmmGselectConfig &sgmm_config_;$/;"	m	class:kaldi::DecodableAmSgmm
kaldi::DecodableAmSgmm::spk_	decodable-am-sgmm.h	/^  const SgmmPerSpkDerivedVars &spk_;$/;"	m	class:kaldi::DecodableAmSgmm
kaldi::DecodableAmSgmm::trans_model_	decodable-am-sgmm.h	/^  const TransitionModel &trans_model_;  \/\/\/< for tid to pdf mapping$/;"	m	class:kaldi::DecodableAmSgmm
kaldi::DecodableAmSgmmScaled	decodable-am-sgmm.h	/^class DecodableAmSgmmScaled : public DecodableAmSgmm {$/;"	c	namespace:kaldi
kaldi::DecodableAmSgmmScaled::DecodableAmSgmmScaled	decodable-am-sgmm.h	/^  DecodableAmSgmmScaled(const SgmmGselectConfig &opts,$/;"	f	class:kaldi::DecodableAmSgmmScaled
kaldi::DecodableAmSgmmScaled::LogLikelihood	decodable-am-sgmm.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 tid) {$/;"	f	class:kaldi::DecodableAmSgmmScaled
kaldi::DecodableAmSgmmScaled::scale_	decodable-am-sgmm.h	/^  BaseFloat scale_;$/;"	m	class:kaldi::DecodableAmSgmmScaled
kaldi::DecodableMapped	decodable-mapped.h	/^class DecodableMapped: public DecodableInterface {$/;"	c	namespace:kaldi
kaldi::DecodableMapped::DecodableMapped	decodable-mapped.h	/^  DecodableMapped(const std::vector<int32> &index_map, DecodableInterface *d):$/;"	f	class:kaldi::DecodableMapped
kaldi::DecodableMapped::IsLastFrame	decodable-mapped.h	/^  virtual bool IsLastFrame(int32 frame) {$/;"	f	class:kaldi::DecodableMapped
kaldi::DecodableMapped::LogLikelihood	decodable-mapped.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 state_index) {$/;"	f	class:kaldi::DecodableMapped
kaldi::DecodableMapped::NumIndices	decodable-mapped.h	/^  virtual int32 NumIndices() { return static_cast<int32>(index_map_.size()) - 1; }$/;"	f	class:kaldi::DecodableMapped
kaldi::DecodableMapped::decodable_	decodable-mapped.h	/^  DecodableInterface *decodable_;$/;"	m	class:kaldi::DecodableMapped
kaldi::DecodableMapped::index_map_	decodable-mapped.h	/^  std::vector<int32> index_map_;$/;"	m	class:kaldi::DecodableMapped
kaldi::DecodableMatrixScaled	decodable-matrix.h	/^class DecodableMatrixScaled: public DecodableInterface {$/;"	c	namespace:kaldi
kaldi::DecodableMatrixScaled::DecodableMatrixScaled	decodable-matrix.h	/^  DecodableMatrixScaled(const Matrix<BaseFloat> &likes,$/;"	f	class:kaldi::DecodableMatrixScaled
kaldi::DecodableMatrixScaled::IsLastFrame	decodable-matrix.h	/^  virtual bool IsLastFrame(int32 frame) {$/;"	f	class:kaldi::DecodableMatrixScaled
kaldi::DecodableMatrixScaled::LogLikelihood	decodable-matrix.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 tid) {$/;"	f	class:kaldi::DecodableMatrixScaled
kaldi::DecodableMatrixScaled::NumFrames	decodable-matrix.h	/^  virtual int32 NumFrames() { return likes_.NumRows(); }$/;"	f	class:kaldi::DecodableMatrixScaled
kaldi::DecodableMatrixScaled::NumIndices	decodable-matrix.h	/^  virtual int32 NumIndices() { return likes_.NumCols(); }$/;"	f	class:kaldi::DecodableMatrixScaled
kaldi::DecodableMatrixScaled::likes_	decodable-matrix.h	/^  const Matrix<BaseFloat> &likes_;$/;"	m	class:kaldi::DecodableMatrixScaled
kaldi::DecodableMatrixScaled::scale_	decodable-matrix.h	/^  BaseFloat scale_;$/;"	m	class:kaldi::DecodableMatrixScaled
kaldi::DecodableMatrixScaledMapped	decodable-matrix.h	/^class DecodableMatrixScaledMapped: public DecodableInterface {$/;"	c	namespace:kaldi
kaldi::DecodableMatrixScaledMapped::DecodableMatrixScaledMapped	decodable-matrix.h	/^  DecodableMatrixScaledMapped(const TransitionModel &tm,$/;"	f	class:kaldi::DecodableMatrixScaledMapped
kaldi::DecodableMatrixScaledMapped::IsLastFrame	decodable-matrix.h	/^  virtual bool IsLastFrame(int32 frame) {$/;"	f	class:kaldi::DecodableMatrixScaledMapped
kaldi::DecodableMatrixScaledMapped::LogLikelihood	decodable-matrix.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 tid) {$/;"	f	class:kaldi::DecodableMatrixScaledMapped
kaldi::DecodableMatrixScaledMapped::NumFrames	decodable-matrix.h	/^  virtual int32 NumFrames() { return likes_.NumRows(); }$/;"	f	class:kaldi::DecodableMatrixScaledMapped
kaldi::DecodableMatrixScaledMapped::NumIndices	decodable-matrix.h	/^  virtual int32 NumIndices() { return trans_model_.NumTransitionIds(); }$/;"	f	class:kaldi::DecodableMatrixScaledMapped
kaldi::DecodableMatrixScaledMapped::likes_	decodable-matrix.h	/^  const Matrix<BaseFloat> &likes_;$/;"	m	class:kaldi::DecodableMatrixScaledMapped
kaldi::DecodableMatrixScaledMapped::scale_	decodable-matrix.h	/^  BaseFloat scale_;$/;"	m	class:kaldi::DecodableMatrixScaledMapped
kaldi::DecodableMatrixScaledMapped::trans_model_	decodable-matrix.h	/^  const TransitionModel &trans_model_;  \/\/ for tid to pdf mapping$/;"	m	class:kaldi::DecodableMatrixScaledMapped
kaldi::DecodableSum	decodable-sum.h	/^class DecodableSum: public DecodableInterface {$/;"	c	namespace:kaldi
kaldi::DecodableSum::CheckSizes	decodable-sum.h	/^  void CheckSizes() {$/;"	f	class:kaldi::DecodableSum
kaldi::DecodableSum::DecodableSum	decodable-sum.h	/^  DecodableSum(DecodableInterface *d1, BaseFloat w1,$/;"	f	class:kaldi::DecodableSum
kaldi::DecodableSum::DecodableSum	decodable-sum.h	/^  DecodableSum(const std::vector<std::pair<DecodableInterface*, BaseFloat> > &decodables):$/;"	f	class:kaldi::DecodableSum
kaldi::DecodableSum::IsLastFrame	decodable-sum.h	/^  virtual bool IsLastFrame(int32 frame) {$/;"	f	class:kaldi::DecodableSum
kaldi::DecodableSum::LogLikelihood	decodable-sum.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 state_index) {$/;"	f	class:kaldi::DecodableSum
kaldi::DecodableSum::NumIndices	decodable-sum.h	/^  virtual int32 NumIndices() { return decodables_[0].first->NumIndices(); }$/;"	f	class:kaldi::DecodableSum
kaldi::DecodableSum::decodables_	decodable-sum.h	/^  std::vector<std::pair<DecodableInterface*, BaseFloat> > decodables_;$/;"	m	class:kaldi::DecodableSum
kaldi::DecodeUtteranceLatticeFaster	lattice-faster-decoder.cc	/^bool DecodeUtteranceLatticeFaster($/;"	f	namespace:kaldi
kaldi::FasterDecoder	faster-decoder.h	/^class FasterDecoder {$/;"	c	namespace:kaldi
kaldi::FasterDecoder::Arc	faster-decoder.h	/^  typedef fst::StdArc Arc;$/;"	t	class:kaldi::FasterDecoder
kaldi::FasterDecoder::ClearToks	faster-decoder.cc	/^void FasterDecoder::ClearToks(Elem *list) {$/;"	f	class:kaldi::FasterDecoder
kaldi::FasterDecoder::Decode	faster-decoder.cc	/^void FasterDecoder::Decode(DecodableInterface *decodable) {$/;"	f	class:kaldi::FasterDecoder
kaldi::FasterDecoder::Elem	faster-decoder.h	/^  typedef HashList<StateId, Token*>::Elem Elem;$/;"	t	class:kaldi::FasterDecoder
kaldi::FasterDecoder::FasterDecoder	faster-decoder.cc	/^FasterDecoder::FasterDecoder(const fst::Fst<fst::StdArc> &fst,$/;"	f	class:kaldi::FasterDecoder
kaldi::FasterDecoder::GetBestPath	faster-decoder.cc	/^bool FasterDecoder::GetBestPath(fst::MutableFst<LatticeArc> *fst_out) {$/;"	f	class:kaldi::FasterDecoder
kaldi::FasterDecoder::GetCutoff	faster-decoder.cc	/^BaseFloat FasterDecoder::GetCutoff(Elem *list_head, size_t *tok_count,$/;"	f	class:kaldi::FasterDecoder
kaldi::FasterDecoder::Label	faster-decoder.h	/^  typedef Arc::Label Label;$/;"	t	class:kaldi::FasterDecoder
kaldi::FasterDecoder::PossiblyResizeHash	faster-decoder.cc	/^void FasterDecoder::PossiblyResizeHash(size_t num_toks) {$/;"	f	class:kaldi::FasterDecoder
kaldi::FasterDecoder::ProcessEmitting	faster-decoder.cc	/^BaseFloat FasterDecoder::ProcessEmitting(DecodableInterface *decodable, int frame) {$/;"	f	class:kaldi::FasterDecoder
kaldi::FasterDecoder::ProcessNonemitting	faster-decoder.cc	/^void FasterDecoder::ProcessNonemitting(BaseFloat cutoff) {$/;"	f	class:kaldi::FasterDecoder
kaldi::FasterDecoder::ReachedFinal	faster-decoder.cc	/^bool FasterDecoder::ReachedFinal() {$/;"	f	class:kaldi::FasterDecoder
kaldi::FasterDecoder::SetOptions	faster-decoder.h	/^  void SetOptions(const FasterDecoderOptions &opts) { opts_ = opts; }$/;"	f	class:kaldi::FasterDecoder
kaldi::FasterDecoder::StateId	faster-decoder.h	/^  typedef Arc::StateId StateId;$/;"	t	class:kaldi::FasterDecoder
kaldi::FasterDecoder::Token	faster-decoder.h	/^  class Token {$/;"	c	class:kaldi::FasterDecoder
kaldi::FasterDecoder::Token::Token	faster-decoder.h	/^    inline Token(const Arc &arc, Token *prev):$/;"	f	class:kaldi::FasterDecoder::Token
kaldi::FasterDecoder::Token::Token	faster-decoder.h	/^    inline Token(const Arc &arc, Weight &ac_weight, Token *prev):$/;"	f	class:kaldi::FasterDecoder::Token
kaldi::FasterDecoder::Token::TokenDelete	faster-decoder.h	/^    inline static void TokenDelete(Token *tok) {$/;"	f	class:kaldi::FasterDecoder::Token
kaldi::FasterDecoder::Token::arc_	faster-decoder.h	/^    Arc arc_; \/\/ contains only the graph part of the cost;$/;"	m	class:kaldi::FasterDecoder::Token
kaldi::FasterDecoder::Token::operator <	faster-decoder.h	/^    inline bool operator < (const Token &other) {$/;"	f	class:kaldi::FasterDecoder::Token
kaldi::FasterDecoder::Token::prev_	faster-decoder.h	/^    Token *prev_;$/;"	m	class:kaldi::FasterDecoder::Token
kaldi::FasterDecoder::Token::ref_count_	faster-decoder.h	/^    int32 ref_count_;$/;"	m	class:kaldi::FasterDecoder::Token
kaldi::FasterDecoder::Token::weight_	faster-decoder.h	/^    Weight weight_; \/\/ weight up to current point.$/;"	m	class:kaldi::FasterDecoder::Token
kaldi::FasterDecoder::Weight	faster-decoder.h	/^  typedef Arc::Weight Weight;$/;"	t	class:kaldi::FasterDecoder
kaldi::FasterDecoder::fst_	faster-decoder.h	/^  const fst::Fst<fst::StdArc> &fst_;$/;"	m	class:kaldi::FasterDecoder
kaldi::FasterDecoder::opts_	faster-decoder.h	/^  FasterDecoderOptions opts_;$/;"	m	class:kaldi::FasterDecoder
kaldi::FasterDecoder::queue_	faster-decoder.h	/^  std::vector<StateId> queue_;  \/\/ temp variable used in ProcessNonemitting,$/;"	m	class:kaldi::FasterDecoder
kaldi::FasterDecoder::tmp_array_	faster-decoder.h	/^  std::vector<BaseFloat> tmp_array_;  \/\/ used in GetCutoff.$/;"	m	class:kaldi::FasterDecoder
kaldi::FasterDecoder::toks_	faster-decoder.h	/^  HashList<StateId, Token*> toks_;$/;"	m	class:kaldi::FasterDecoder
kaldi::FasterDecoder::~FasterDecoder	faster-decoder.h	/^  ~FasterDecoder() { ClearToks(toks_.Clear()); }$/;"	f	class:kaldi::FasterDecoder
kaldi::FasterDecoderOptions	faster-decoder.h	/^struct FasterDecoderOptions {$/;"	s	namespace:kaldi
kaldi::FasterDecoderOptions::FasterDecoderOptions	faster-decoder.h	/^  FasterDecoderOptions(): beam(16.0),$/;"	f	struct:kaldi::FasterDecoderOptions
kaldi::FasterDecoderOptions::Register	faster-decoder.h	/^  void Register(ParseOptions *po, bool full) {  \/\/\/ if "full", use obscure$/;"	f	struct:kaldi::FasterDecoderOptions
kaldi::FasterDecoderOptions::beam	faster-decoder.h	/^  BaseFloat beam;$/;"	m	struct:kaldi::FasterDecoderOptions
kaldi::FasterDecoderOptions::beam_delta	faster-decoder.h	/^  BaseFloat beam_delta;$/;"	m	struct:kaldi::FasterDecoderOptions
kaldi::FasterDecoderOptions::hash_ratio	faster-decoder.h	/^  BaseFloat hash_ratio;$/;"	m	struct:kaldi::FasterDecoderOptions
kaldi::FasterDecoderOptions::max_active	faster-decoder.h	/^  int32 max_active;$/;"	m	struct:kaldi::FasterDecoderOptions
kaldi::LatticeBiglmFasterDecoder	lattice-biglm-faster-decoder.h	/^class LatticeBiglmFasterDecoder {$/;"	c	namespace:kaldi
kaldi::LatticeBiglmFasterDecoder::Arc	lattice-biglm-faster-decoder.h	/^  typedef fst::StdArc Arc;$/;"	t	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::ClearActiveTokens	lattice-biglm-faster-decoder.h	/^  void ClearActiveTokens() { \/\/ a cleanup routine, at utt end\/begin$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::ClearToks	lattice-biglm-faster-decoder.h	/^  void ClearToks(Elem *list) {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::ConstructPair	lattice-biglm-faster-decoder.h	/^  inline PairId ConstructPair(StateId fst_state, StateId lm_state) {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::Decode	lattice-biglm-faster-decoder.h	/^  bool Decode(DecodableInterface *decodable) {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::Elem	lattice-biglm-faster-decoder.h	/^  typedef HashList<PairId, Token*>::Elem Elem;$/;"	t	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::FindOrAddToken	lattice-biglm-faster-decoder.h	/^  inline Token *FindOrAddToken(PairId state_pair, int32 frame, BaseFloat tot_cost,$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::ForwardLink	lattice-biglm-faster-decoder.h	/^  struct ForwardLink {$/;"	s	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::ForwardLink::ForwardLink	lattice-biglm-faster-decoder.h	/^    inline ForwardLink(Token *next_tok, Label ilabel, Label olabel,$/;"	f	struct:kaldi::LatticeBiglmFasterDecoder::ForwardLink
kaldi::LatticeBiglmFasterDecoder::ForwardLink::acoustic_cost	lattice-biglm-faster-decoder.h	/^    BaseFloat acoustic_cost; \/\/ acoustic cost (pre-scaled) of traversing link$/;"	m	struct:kaldi::LatticeBiglmFasterDecoder::ForwardLink
kaldi::LatticeBiglmFasterDecoder::ForwardLink::graph_cost	lattice-biglm-faster-decoder.h	/^    BaseFloat graph_cost; \/\/ graph cost of traversing link (contains LM, etc.)$/;"	m	struct:kaldi::LatticeBiglmFasterDecoder::ForwardLink
kaldi::LatticeBiglmFasterDecoder::ForwardLink::ilabel	lattice-biglm-faster-decoder.h	/^    Label ilabel; \/\/ ilabel on link.$/;"	m	struct:kaldi::LatticeBiglmFasterDecoder::ForwardLink
kaldi::LatticeBiglmFasterDecoder::ForwardLink::next	lattice-biglm-faster-decoder.h	/^    ForwardLink *next; \/\/ next in singly-linked list of forward links from a$/;"	m	struct:kaldi::LatticeBiglmFasterDecoder::ForwardLink
kaldi::LatticeBiglmFasterDecoder::ForwardLink::next_tok	lattice-biglm-faster-decoder.h	/^    Token *next_tok; \/\/ the next token [or NULL if represents final-state]$/;"	m	struct:kaldi::LatticeBiglmFasterDecoder::ForwardLink
kaldi::LatticeBiglmFasterDecoder::ForwardLink::olabel	lattice-biglm-faster-decoder.h	/^    Label olabel; \/\/ olabel on link.$/;"	m	struct:kaldi::LatticeBiglmFasterDecoder::ForwardLink
kaldi::LatticeBiglmFasterDecoder::GetBestPath	lattice-biglm-faster-decoder.h	/^  bool GetBestPath(fst::MutableFst<LatticeArc> *ofst) const {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::GetCutoff	lattice-biglm-faster-decoder.h	/^  BaseFloat GetCutoff(Elem *list_head, size_t *tok_count,$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::GetLattice	lattice-biglm-faster-decoder.h	/^  bool GetLattice(fst::MutableFst<CompactLatticeArc> *ofst) const {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::GetRawLattice	lattice-biglm-faster-decoder.h	/^  bool GetRawLattice(fst::MutableFst<LatticeArc> *ofst) const {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::Label	lattice-biglm-faster-decoder.h	/^  typedef Arc::Label Label;$/;"	t	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::LatticeBiglmFasterDecoder	lattice-biglm-faster-decoder.h	/^  LatticeBiglmFasterDecoder($/;"	f	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::PairId	lattice-biglm-faster-decoder.h	/^  typedef uint64 PairId;$/;"	t	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::PairToLmState	lattice-biglm-faster-decoder.h	/^  static inline StateId PairToLmState(PairId state_pair) {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::PairToState	lattice-biglm-faster-decoder.h	/^  static inline StateId PairToState(PairId state_pair) {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::PossiblyResizeHash	lattice-biglm-faster-decoder.h	/^  void PossiblyResizeHash(size_t num_toks) {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::ProcessEmitting	lattice-biglm-faster-decoder.h	/^  void ProcessEmitting(DecodableInterface *decodable, int32 frame) {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::ProcessNonemitting	lattice-biglm-faster-decoder.h	/^  void ProcessNonemitting(int32 frame) {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::PropagateLm	lattice-biglm-faster-decoder.h	/^  inline StateId PropagateLm(StateId lm_state,$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::PruneActiveTokens	lattice-biglm-faster-decoder.h	/^  void PruneActiveTokens(int32 cur_frame, BaseFloat delta) {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::PruneActiveTokensFinal	lattice-biglm-faster-decoder.h	/^  void PruneActiveTokensFinal(int32 cur_frame) {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::PruneForwardLinks	lattice-biglm-faster-decoder.h	/^  void PruneForwardLinks(int32 frame, bool *extra_costs_changed,$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::PruneForwardLinksFinal	lattice-biglm-faster-decoder.h	/^  void PruneForwardLinksFinal(int32 frame) {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::PruneTokensForFrame	lattice-biglm-faster-decoder.h	/^  void PruneTokensForFrame(int32 frame) {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::ReachedFinal	lattice-biglm-faster-decoder.h	/^  bool ReachedFinal() const { return final_active_; }$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::SetOptions	lattice-biglm-faster-decoder.h	/^ void SetOptions(const LatticeBiglmFasterDecoderConfig &config) { config_ = config; }  $/;"	f	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::StateId	lattice-biglm-faster-decoder.h	/^  typedef Arc::StateId StateId;$/;"	t	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::Token	lattice-biglm-faster-decoder.h	/^  struct Token {$/;"	s	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::Token::DeleteForwardLinks	lattice-biglm-faster-decoder.h	/^    inline void DeleteForwardLinks() {$/;"	f	struct:kaldi::LatticeBiglmFasterDecoder::Token
kaldi::LatticeBiglmFasterDecoder::Token::Token	lattice-biglm-faster-decoder.h	/^    inline Token(BaseFloat tot_cost, BaseFloat extra_cost, ForwardLink *links,$/;"	f	struct:kaldi::LatticeBiglmFasterDecoder::Token
kaldi::LatticeBiglmFasterDecoder::Token::extra_cost	lattice-biglm-faster-decoder.h	/^    BaseFloat extra_cost; \/\/ >= 0.  After calling PruneForwardLinks, this equals$/;"	m	struct:kaldi::LatticeBiglmFasterDecoder::Token
kaldi::LatticeBiglmFasterDecoder::Token::links	lattice-biglm-faster-decoder.h	/^    ForwardLink *links; \/\/ Head of singly linked list of ForwardLinks$/;"	m	struct:kaldi::LatticeBiglmFasterDecoder::Token
kaldi::LatticeBiglmFasterDecoder::Token::next	lattice-biglm-faster-decoder.h	/^    Token *next; \/\/ Next in list of tokens for this frame.$/;"	m	struct:kaldi::LatticeBiglmFasterDecoder::Token
kaldi::LatticeBiglmFasterDecoder::Token::tot_cost	lattice-biglm-faster-decoder.h	/^    BaseFloat tot_cost; \/\/ would equal weight.Value()... cost up to this point.$/;"	m	struct:kaldi::LatticeBiglmFasterDecoder::Token
kaldi::LatticeBiglmFasterDecoder::TokenList	lattice-biglm-faster-decoder.h	/^  struct TokenList {$/;"	s	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::TokenList::TokenList	lattice-biglm-faster-decoder.h	/^    TokenList(): toks(NULL), must_prune_forward_links(true),$/;"	f	struct:kaldi::LatticeBiglmFasterDecoder::TokenList
kaldi::LatticeBiglmFasterDecoder::TokenList::must_prune_forward_links	lattice-biglm-faster-decoder.h	/^    bool must_prune_forward_links;$/;"	m	struct:kaldi::LatticeBiglmFasterDecoder::TokenList
kaldi::LatticeBiglmFasterDecoder::TokenList::must_prune_tokens	lattice-biglm-faster-decoder.h	/^    bool must_prune_tokens;$/;"	m	struct:kaldi::LatticeBiglmFasterDecoder::TokenList
kaldi::LatticeBiglmFasterDecoder::TokenList::toks	lattice-biglm-faster-decoder.h	/^    Token *toks;$/;"	m	struct:kaldi::LatticeBiglmFasterDecoder::TokenList
kaldi::LatticeBiglmFasterDecoder::Weight	lattice-biglm-faster-decoder.h	/^  typedef Arc::Weight Weight;$/;"	t	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::active_toks_	lattice-biglm-faster-decoder.h	/^  std::vector<TokenList> active_toks_; \/\/ Lists of tokens, indexed by$/;"	m	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::config_	lattice-biglm-faster-decoder.h	/^  LatticeBiglmFasterDecoderConfig config_;$/;"	m	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::final_active_	lattice-biglm-faster-decoder.h	/^  bool final_active_; \/\/ use this to say whether we found active final tokens$/;"	m	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::final_costs_	lattice-biglm-faster-decoder.h	/^  std::map<Token*, BaseFloat> final_costs_; \/\/ A cache of final-costs$/;"	m	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::fst_	lattice-biglm-faster-decoder.h	/^  const fst::Fst<fst::StdArc> &fst_;$/;"	m	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::lm_diff_fst_	lattice-biglm-faster-decoder.h	/^  const fst::DeterministicOnDemandFst<fst::StdArc> &lm_diff_fst_;  $/;"	m	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::num_toks_	lattice-biglm-faster-decoder.h	/^  int32 num_toks_; \/\/ current total #toks allocated...$/;"	m	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::queue_	lattice-biglm-faster-decoder.h	/^  std::vector<PairId> queue_;  \/\/ temp variable used in ProcessNonemitting,$/;"	m	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::tmp_array_	lattice-biglm-faster-decoder.h	/^  std::vector<BaseFloat> tmp_array_;  \/\/ used in GetCutoff.$/;"	m	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::toks_	lattice-biglm-faster-decoder.h	/^  HashList<PairId, Token*> toks_;$/;"	m	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::warned_	lattice-biglm-faster-decoder.h	/^  bool warned_;$/;"	m	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::warned_noarc_	lattice-biglm-faster-decoder.h	/^  bool warned_noarc_;  $/;"	m	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoder::~LatticeBiglmFasterDecoder	lattice-biglm-faster-decoder.h	/^  ~LatticeBiglmFasterDecoder() {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
kaldi::LatticeBiglmFasterDecoderConfig	lattice-biglm-faster-decoder.h	/^typedef LatticeFasterDecoderConfig LatticeBiglmFasterDecoderConfig;$/;"	t	namespace:kaldi
kaldi::LatticeFasterDecoder	lattice-faster-decoder.h	/^class LatticeFasterDecoder {$/;"	c	namespace:kaldi
kaldi::LatticeFasterDecoder::Arc	lattice-faster-decoder.h	/^  typedef fst::StdArc Arc;$/;"	t	class:kaldi::LatticeFasterDecoder
kaldi::LatticeFasterDecoder::ClearActiveTokens	lattice-faster-decoder.cc	/^void LatticeFasterDecoder::ClearActiveTokens() { \/\/ a cleanup routine, at utt end\/begin$/;"	f	class:kaldi::LatticeFasterDecoder
kaldi::LatticeFasterDecoder::ClearToks	lattice-faster-decoder.cc	/^void LatticeFasterDecoder::ClearToks(Elem *list) {$/;"	f	class:kaldi::LatticeFasterDecoder
kaldi::LatticeFasterDecoder::Decode	lattice-faster-decoder.cc	/^bool LatticeFasterDecoder::Decode(DecodableInterface *decodable) {$/;"	f	class:kaldi::LatticeFasterDecoder
kaldi::LatticeFasterDecoder::Elem	lattice-faster-decoder.h	/^  typedef HashList<StateId, Token*>::Elem Elem;$/;"	t	class:kaldi::LatticeFasterDecoder
kaldi::LatticeFasterDecoder::FindOrAddToken	lattice-faster-decoder.cc	/^inline LatticeFasterDecoder::Token *LatticeFasterDecoder::FindOrAddToken($/;"	f	class:kaldi::LatticeFasterDecoder
kaldi::LatticeFasterDecoder::ForwardLink	lattice-faster-decoder.h	/^  struct ForwardLink {$/;"	s	class:kaldi::LatticeFasterDecoder
kaldi::LatticeFasterDecoder::ForwardLink::ForwardLink	lattice-faster-decoder.h	/^    inline ForwardLink(Token *next_tok, Label ilabel, Label olabel,$/;"	f	struct:kaldi::LatticeFasterDecoder::ForwardLink
kaldi::LatticeFasterDecoder::ForwardLink::acoustic_cost	lattice-faster-decoder.h	/^    BaseFloat acoustic_cost; \/\/ acoustic cost (pre-scaled) of traversing link$/;"	m	struct:kaldi::LatticeFasterDecoder::ForwardLink
kaldi::LatticeFasterDecoder::ForwardLink::graph_cost	lattice-faster-decoder.h	/^    BaseFloat graph_cost; \/\/ graph cost of traversing link (contains LM, etc.)$/;"	m	struct:kaldi::LatticeFasterDecoder::ForwardLink
kaldi::LatticeFasterDecoder::ForwardLink::ilabel	lattice-faster-decoder.h	/^    Label ilabel; \/\/ ilabel on link.$/;"	m	struct:kaldi::LatticeFasterDecoder::ForwardLink
kaldi::LatticeFasterDecoder::ForwardLink::next	lattice-faster-decoder.h	/^    ForwardLink *next; \/\/ next in singly-linked list of forward links from a$/;"	m	struct:kaldi::LatticeFasterDecoder::ForwardLink
kaldi::LatticeFasterDecoder::ForwardLink::next_tok	lattice-faster-decoder.h	/^    Token *next_tok; \/\/ the next token [or NULL if represents final-state]$/;"	m	struct:kaldi::LatticeFasterDecoder::ForwardLink
kaldi::LatticeFasterDecoder::ForwardLink::olabel	lattice-faster-decoder.h	/^    Label olabel; \/\/ olabel on link.$/;"	m	struct:kaldi::LatticeFasterDecoder::ForwardLink
kaldi::LatticeFasterDecoder::GetBestPath	lattice-faster-decoder.cc	/^bool LatticeFasterDecoder::GetBestPath(fst::MutableFst<LatticeArc> *ofst) const {$/;"	f	class:kaldi::LatticeFasterDecoder
kaldi::LatticeFasterDecoder::GetCutoff	lattice-faster-decoder.cc	/^BaseFloat LatticeFasterDecoder::GetCutoff(Elem *list_head, size_t *tok_count,$/;"	f	class:kaldi::LatticeFasterDecoder
kaldi::LatticeFasterDecoder::GetLattice	lattice-faster-decoder.cc	/^bool LatticeFasterDecoder::GetLattice(fst::MutableFst<CompactLatticeArc> *ofst) const {$/;"	f	class:kaldi::LatticeFasterDecoder
kaldi::LatticeFasterDecoder::GetRawLattice	lattice-faster-decoder.cc	/^bool LatticeFasterDecoder::GetRawLattice(fst::MutableFst<LatticeArc> *ofst) const {$/;"	f	class:kaldi::LatticeFasterDecoder
kaldi::LatticeFasterDecoder::Label	lattice-faster-decoder.h	/^  typedef Arc::Label Label;$/;"	t	class:kaldi::LatticeFasterDecoder
kaldi::LatticeFasterDecoder::LatticeFasterDecoder	lattice-faster-decoder.cc	/^LatticeFasterDecoder::LatticeFasterDecoder(const fst::Fst<fst::StdArc> &fst,$/;"	f	class:kaldi::LatticeFasterDecoder
kaldi::LatticeFasterDecoder::PossiblyResizeHash	lattice-faster-decoder.cc	/^void LatticeFasterDecoder::PossiblyResizeHash(size_t num_toks) {$/;"	f	class:kaldi::LatticeFasterDecoder
kaldi::LatticeFasterDecoder::ProcessEmitting	lattice-faster-decoder.cc	/^void LatticeFasterDecoder::ProcessEmitting(DecodableInterface *decodable, int32 frame) {$/;"	f	class:kaldi::LatticeFasterDecoder
kaldi::LatticeFasterDecoder::ProcessNonemitting	lattice-faster-decoder.cc	/^void LatticeFasterDecoder::ProcessNonemitting(int32 frame) {$/;"	f	class:kaldi::LatticeFasterDecoder
kaldi::LatticeFasterDecoder::PruneActiveTokens	lattice-faster-decoder.cc	/^void LatticeFasterDecoder::PruneActiveTokens(int32 cur_frame, BaseFloat delta) {$/;"	f	class:kaldi::LatticeFasterDecoder
kaldi::LatticeFasterDecoder::PruneActiveTokensFinal	lattice-faster-decoder.cc	/^void LatticeFasterDecoder::PruneActiveTokensFinal(int32 cur_frame) {$/;"	f	class:kaldi::LatticeFasterDecoder
kaldi::LatticeFasterDecoder::PruneForwardLinks	lattice-faster-decoder.cc	/^void LatticeFasterDecoder::PruneForwardLinks($/;"	f	class:kaldi::LatticeFasterDecoder
kaldi::LatticeFasterDecoder::PruneForwardLinksFinal	lattice-faster-decoder.cc	/^void LatticeFasterDecoder::PruneForwardLinksFinal(int32 frame) {$/;"	f	class:kaldi::LatticeFasterDecoder
kaldi::LatticeFasterDecoder::PruneTokensForFrame	lattice-faster-decoder.cc	/^void LatticeFasterDecoder::PruneTokensForFrame(int32 frame) {$/;"	f	class:kaldi::LatticeFasterDecoder
kaldi::LatticeFasterDecoder::ReachedFinal	lattice-faster-decoder.h	/^  bool ReachedFinal() const { return final_active_; }$/;"	f	class:kaldi::LatticeFasterDecoder
kaldi::LatticeFasterDecoder::SetOptions	lattice-faster-decoder.h	/^  void SetOptions(const LatticeFasterDecoderConfig &config) {$/;"	f	class:kaldi::LatticeFasterDecoder
kaldi::LatticeFasterDecoder::StateId	lattice-faster-decoder.h	/^  typedef Arc::StateId StateId;$/;"	t	class:kaldi::LatticeFasterDecoder
kaldi::LatticeFasterDecoder::Token	lattice-faster-decoder.h	/^  struct Token {$/;"	s	class:kaldi::LatticeFasterDecoder
kaldi::LatticeFasterDecoder::Token::DeleteForwardLinks	lattice-faster-decoder.h	/^    inline void DeleteForwardLinks() {$/;"	f	struct:kaldi::LatticeFasterDecoder::Token
kaldi::LatticeFasterDecoder::Token::Token	lattice-faster-decoder.h	/^    inline Token(BaseFloat tot_cost, BaseFloat extra_cost, ForwardLink *links,$/;"	f	struct:kaldi::LatticeFasterDecoder::Token
kaldi::LatticeFasterDecoder::Token::extra_cost	lattice-faster-decoder.h	/^    BaseFloat extra_cost; \/\/ >= 0.  After calling PruneForwardLinks, this equals$/;"	m	struct:kaldi::LatticeFasterDecoder::Token
kaldi::LatticeFasterDecoder::Token::links	lattice-faster-decoder.h	/^    ForwardLink *links; \/\/ Head of singly linked list of ForwardLinks$/;"	m	struct:kaldi::LatticeFasterDecoder::Token
kaldi::LatticeFasterDecoder::Token::next	lattice-faster-decoder.h	/^    Token *next; \/\/ Next in list of tokens for this frame.$/;"	m	struct:kaldi::LatticeFasterDecoder::Token
kaldi::LatticeFasterDecoder::Token::tot_cost	lattice-faster-decoder.h	/^    BaseFloat tot_cost; \/\/ would equal weight.Value()... cost up to this point.$/;"	m	struct:kaldi::LatticeFasterDecoder::Token
kaldi::LatticeFasterDecoder::TokenList	lattice-faster-decoder.h	/^  struct TokenList {$/;"	s	class:kaldi::LatticeFasterDecoder
kaldi::LatticeFasterDecoder::TokenList::TokenList	lattice-faster-decoder.h	/^    TokenList(): toks(NULL), must_prune_forward_links(true),$/;"	f	struct:kaldi::LatticeFasterDecoder::TokenList
kaldi::LatticeFasterDecoder::TokenList::must_prune_forward_links	lattice-faster-decoder.h	/^    bool must_prune_forward_links;$/;"	m	struct:kaldi::LatticeFasterDecoder::TokenList
kaldi::LatticeFasterDecoder::TokenList::must_prune_tokens	lattice-faster-decoder.h	/^    bool must_prune_tokens;$/;"	m	struct:kaldi::LatticeFasterDecoder::TokenList
kaldi::LatticeFasterDecoder::TokenList::toks	lattice-faster-decoder.h	/^    Token *toks;$/;"	m	struct:kaldi::LatticeFasterDecoder::TokenList
kaldi::LatticeFasterDecoder::Weight	lattice-faster-decoder.h	/^  typedef Arc::Weight Weight;$/;"	t	class:kaldi::LatticeFasterDecoder
kaldi::LatticeFasterDecoder::active_toks_	lattice-faster-decoder.h	/^  std::vector<TokenList> active_toks_; \/\/ Lists of tokens, indexed by$/;"	m	class:kaldi::LatticeFasterDecoder
kaldi::LatticeFasterDecoder::config_	lattice-faster-decoder.h	/^  LatticeFasterDecoderConfig config_;$/;"	m	class:kaldi::LatticeFasterDecoder
kaldi::LatticeFasterDecoder::cost_offsets_	lattice-faster-decoder.h	/^  std::vector<BaseFloat> cost_offsets_; \/\/ This contains, for each$/;"	m	class:kaldi::LatticeFasterDecoder
kaldi::LatticeFasterDecoder::final_active_	lattice-faster-decoder.h	/^  bool final_active_; \/\/ use this to say whether we found active final tokens$/;"	m	class:kaldi::LatticeFasterDecoder
kaldi::LatticeFasterDecoder::final_costs_	lattice-faster-decoder.h	/^  std::map<Token*, BaseFloat> final_costs_; \/\/ A cache of final-costs$/;"	m	class:kaldi::LatticeFasterDecoder
kaldi::LatticeFasterDecoder::fst_	lattice-faster-decoder.h	/^  const fst::Fst<fst::StdArc> &fst_;$/;"	m	class:kaldi::LatticeFasterDecoder
kaldi::LatticeFasterDecoder::num_toks_	lattice-faster-decoder.h	/^  int32 num_toks_; \/\/ current total #toks allocated...$/;"	m	class:kaldi::LatticeFasterDecoder
kaldi::LatticeFasterDecoder::queue_	lattice-faster-decoder.h	/^  std::vector<StateId> queue_;  \/\/ temp variable used in ProcessNonemitting,$/;"	m	class:kaldi::LatticeFasterDecoder
kaldi::LatticeFasterDecoder::tmp_array_	lattice-faster-decoder.h	/^  std::vector<BaseFloat> tmp_array_;  \/\/ used in GetCutoff.$/;"	m	class:kaldi::LatticeFasterDecoder
kaldi::LatticeFasterDecoder::toks_	lattice-faster-decoder.h	/^  HashList<StateId, Token*> toks_;$/;"	m	class:kaldi::LatticeFasterDecoder
kaldi::LatticeFasterDecoder::warned_	lattice-faster-decoder.h	/^  bool warned_;$/;"	m	class:kaldi::LatticeFasterDecoder
kaldi::LatticeFasterDecoder::~LatticeFasterDecoder	lattice-faster-decoder.h	/^  ~LatticeFasterDecoder() { ClearActiveTokens(); }$/;"	f	class:kaldi::LatticeFasterDecoder
kaldi::LatticeFasterDecoderConfig	lattice-faster-decoder.h	/^struct LatticeFasterDecoderConfig {$/;"	s	namespace:kaldi
kaldi::LatticeFasterDecoderConfig::Check	lattice-faster-decoder.h	/^  void Check() const {$/;"	f	struct:kaldi::LatticeFasterDecoderConfig
kaldi::LatticeFasterDecoderConfig::LatticeFasterDecoderConfig	lattice-faster-decoder.h	/^  LatticeFasterDecoderConfig(): beam(16.0),$/;"	f	struct:kaldi::LatticeFasterDecoderConfig
kaldi::LatticeFasterDecoderConfig::Register	lattice-faster-decoder.h	/^  void Register(ParseOptions *po) {$/;"	f	struct:kaldi::LatticeFasterDecoderConfig
kaldi::LatticeFasterDecoderConfig::beam	lattice-faster-decoder.h	/^  BaseFloat beam;$/;"	m	struct:kaldi::LatticeFasterDecoderConfig
kaldi::LatticeFasterDecoderConfig::beam_delta	lattice-faster-decoder.h	/^  BaseFloat beam_delta; \/\/ has nothing to do with beam_ratio$/;"	m	struct:kaldi::LatticeFasterDecoderConfig
kaldi::LatticeFasterDecoderConfig::determinize_lattice	lattice-faster-decoder.h	/^  bool determinize_lattice; \/\/ not inspected by this class... used in$/;"	m	struct:kaldi::LatticeFasterDecoderConfig
kaldi::LatticeFasterDecoderConfig::hash_ratio	lattice-faster-decoder.h	/^  BaseFloat hash_ratio;$/;"	m	struct:kaldi::LatticeFasterDecoderConfig
kaldi::LatticeFasterDecoderConfig::lattice_beam	lattice-faster-decoder.h	/^  BaseFloat lattice_beam;$/;"	m	struct:kaldi::LatticeFasterDecoderConfig
kaldi::LatticeFasterDecoderConfig::max_active	lattice-faster-decoder.h	/^  int32 max_active;$/;"	m	struct:kaldi::LatticeFasterDecoderConfig
kaldi::LatticeFasterDecoderConfig::max_arcs	lattice-faster-decoder.h	/^  int32 max_arcs; \/\/ max #arcs in lattice.$/;"	m	struct:kaldi::LatticeFasterDecoderConfig
kaldi::LatticeFasterDecoderConfig::max_loop	lattice-faster-decoder.h	/^  int32 max_loop; \/\/ can be used to debug non-determinizable input, but for now,$/;"	m	struct:kaldi::LatticeFasterDecoderConfig
kaldi::LatticeFasterDecoderConfig::max_mem	lattice-faster-decoder.h	/^  int32 max_mem; \/\/ max memory usage in determinization$/;"	m	struct:kaldi::LatticeFasterDecoderConfig
kaldi::LatticeFasterDecoderConfig::prune_interval	lattice-faster-decoder.h	/^  int32 prune_interval;$/;"	m	struct:kaldi::LatticeFasterDecoderConfig
kaldi::LatticeSimpleDecoder	lattice-simple-decoder.h	/^class LatticeSimpleDecoder {$/;"	c	namespace:kaldi
kaldi::LatticeSimpleDecoder::Arc	lattice-simple-decoder.h	/^  typedef fst::StdArc Arc;$/;"	t	class:kaldi::LatticeSimpleDecoder
kaldi::LatticeSimpleDecoder::ClearActiveTokens	lattice-simple-decoder.cc	/^void LatticeSimpleDecoder::ClearActiveTokens() { \/\/ a cleanup routine, at utt end\/begin$/;"	f	class:kaldi::LatticeSimpleDecoder
kaldi::LatticeSimpleDecoder::Decode	lattice-simple-decoder.cc	/^bool LatticeSimpleDecoder::Decode(DecodableInterface *decodable) {$/;"	f	class:kaldi::LatticeSimpleDecoder
kaldi::LatticeSimpleDecoder::FindOrAddToken	lattice-simple-decoder.cc	/^inline LatticeSimpleDecoder::Token *LatticeSimpleDecoder::FindOrAddToken($/;"	f	class:kaldi::LatticeSimpleDecoder
kaldi::LatticeSimpleDecoder::ForwardLink	lattice-simple-decoder.h	/^  struct ForwardLink {$/;"	s	class:kaldi::LatticeSimpleDecoder
kaldi::LatticeSimpleDecoder::ForwardLink::ForwardLink	lattice-simple-decoder.h	/^    ForwardLink(Token *next_tok, Label ilabel, Label olabel,$/;"	f	struct:kaldi::LatticeSimpleDecoder::ForwardLink
kaldi::LatticeSimpleDecoder::ForwardLink::acoustic_cost	lattice-simple-decoder.h	/^    BaseFloat acoustic_cost; \/\/ acoustic cost (pre-scaled) of traversing link$/;"	m	struct:kaldi::LatticeSimpleDecoder::ForwardLink
kaldi::LatticeSimpleDecoder::ForwardLink::graph_cost	lattice-simple-decoder.h	/^    BaseFloat graph_cost; \/\/ graph cost of traversing link (contains LM, etc.)$/;"	m	struct:kaldi::LatticeSimpleDecoder::ForwardLink
kaldi::LatticeSimpleDecoder::ForwardLink::ilabel	lattice-simple-decoder.h	/^    Label ilabel; \/\/ ilabel on link.$/;"	m	struct:kaldi::LatticeSimpleDecoder::ForwardLink
kaldi::LatticeSimpleDecoder::ForwardLink::next	lattice-simple-decoder.h	/^    ForwardLink *next; \/\/ next in singly-linked list of forward links from a$/;"	m	struct:kaldi::LatticeSimpleDecoder::ForwardLink
kaldi::LatticeSimpleDecoder::ForwardLink::next_tok	lattice-simple-decoder.h	/^    Token *next_tok; \/\/ the next token [or NULL if represents final-state]$/;"	m	struct:kaldi::LatticeSimpleDecoder::ForwardLink
kaldi::LatticeSimpleDecoder::ForwardLink::olabel	lattice-simple-decoder.h	/^    Label olabel; \/\/ olabel on link.$/;"	m	struct:kaldi::LatticeSimpleDecoder::ForwardLink
kaldi::LatticeSimpleDecoder::GetBestPath	lattice-simple-decoder.cc	/^bool LatticeSimpleDecoder::GetBestPath(fst::MutableFst<LatticeArc> *ofst) const {$/;"	f	class:kaldi::LatticeSimpleDecoder
kaldi::LatticeSimpleDecoder::GetLattice	lattice-simple-decoder.cc	/^bool LatticeSimpleDecoder::GetLattice(fst::MutableFst<CompactLatticeArc> *ofst) const {$/;"	f	class:kaldi::LatticeSimpleDecoder
kaldi::LatticeSimpleDecoder::GetRawLattice	lattice-simple-decoder.cc	/^bool LatticeSimpleDecoder::GetRawLattice(fst::MutableFst<LatticeArc> *ofst) const {$/;"	f	class:kaldi::LatticeSimpleDecoder
kaldi::LatticeSimpleDecoder::Label	lattice-simple-decoder.h	/^  typedef Arc::Label Label;$/;"	t	class:kaldi::LatticeSimpleDecoder
kaldi::LatticeSimpleDecoder::LatticeSimpleDecoder	lattice-simple-decoder.h	/^  LatticeSimpleDecoder(const fst::Fst<fst::StdArc> &fst,$/;"	f	class:kaldi::LatticeSimpleDecoder
kaldi::LatticeSimpleDecoder::ProcessEmitting	lattice-simple-decoder.cc	/^void LatticeSimpleDecoder::ProcessEmitting(DecodableInterface *decodable, int32 frame) {$/;"	f	class:kaldi::LatticeSimpleDecoder
kaldi::LatticeSimpleDecoder::ProcessNonemitting	lattice-simple-decoder.cc	/^void LatticeSimpleDecoder::ProcessNonemitting(int32 frame) {$/;"	f	class:kaldi::LatticeSimpleDecoder
kaldi::LatticeSimpleDecoder::PruneActiveTokens	lattice-simple-decoder.cc	/^void LatticeSimpleDecoder::PruneActiveTokens(int32 cur_frame, BaseFloat delta) {$/;"	f	class:kaldi::LatticeSimpleDecoder
kaldi::LatticeSimpleDecoder::PruneActiveTokensFinal	lattice-simple-decoder.cc	/^void LatticeSimpleDecoder::PruneActiveTokensFinal(int32 cur_frame) {$/;"	f	class:kaldi::LatticeSimpleDecoder
kaldi::LatticeSimpleDecoder::PruneCurrentTokens	lattice-simple-decoder.cc	/^void LatticeSimpleDecoder::PruneCurrentTokens(BaseFloat beam, unordered_map<StateId, Token*> *toks) {$/;"	f	class:kaldi::LatticeSimpleDecoder
kaldi::LatticeSimpleDecoder::PruneForwardLinks	lattice-simple-decoder.cc	/^void LatticeSimpleDecoder::PruneForwardLinks($/;"	f	class:kaldi::LatticeSimpleDecoder
kaldi::LatticeSimpleDecoder::PruneForwardLinksFinal	lattice-simple-decoder.cc	/^void LatticeSimpleDecoder::PruneForwardLinksFinal(int32 frame) {$/;"	f	class:kaldi::LatticeSimpleDecoder
kaldi::LatticeSimpleDecoder::PruneTokensForFrame	lattice-simple-decoder.cc	/^void LatticeSimpleDecoder::PruneTokensForFrame(int32 frame) {$/;"	f	class:kaldi::LatticeSimpleDecoder
kaldi::LatticeSimpleDecoder::ReachedFinal	lattice-simple-decoder.h	/^  bool ReachedFinal() const { return final_active_; }$/;"	f	class:kaldi::LatticeSimpleDecoder
kaldi::LatticeSimpleDecoder::StateId	lattice-simple-decoder.h	/^  typedef Arc::StateId StateId;$/;"	t	class:kaldi::LatticeSimpleDecoder
kaldi::LatticeSimpleDecoder::Token	lattice-simple-decoder.h	/^  struct Token {$/;"	s	class:kaldi::LatticeSimpleDecoder
kaldi::LatticeSimpleDecoder::Token::DeleteForwardLinks	lattice-simple-decoder.h	/^    void DeleteForwardLinks() {$/;"	f	struct:kaldi::LatticeSimpleDecoder::Token
kaldi::LatticeSimpleDecoder::Token::Token	lattice-simple-decoder.h	/^    Token() {}$/;"	f	struct:kaldi::LatticeSimpleDecoder::Token
kaldi::LatticeSimpleDecoder::Token::Token	lattice-simple-decoder.h	/^    Token(BaseFloat tot_cost, BaseFloat extra_cost, ForwardLink *links,$/;"	f	struct:kaldi::LatticeSimpleDecoder::Token
kaldi::LatticeSimpleDecoder::Token::extra_cost	lattice-simple-decoder.h	/^    BaseFloat extra_cost; \/\/ >= 0.  After calling PruneForwardLinks, this equals$/;"	m	struct:kaldi::LatticeSimpleDecoder::Token
kaldi::LatticeSimpleDecoder::Token::links	lattice-simple-decoder.h	/^    ForwardLink *links; \/\/ Head of singly linked list of ForwardLinks$/;"	m	struct:kaldi::LatticeSimpleDecoder::Token
kaldi::LatticeSimpleDecoder::Token::next	lattice-simple-decoder.h	/^    Token *next; \/\/ Next in list of tokens for this frame.$/;"	m	struct:kaldi::LatticeSimpleDecoder::Token
kaldi::LatticeSimpleDecoder::Token::tot_cost	lattice-simple-decoder.h	/^    BaseFloat tot_cost; \/\/ would equal weight.Value()... cost up to this point.$/;"	m	struct:kaldi::LatticeSimpleDecoder::Token
kaldi::LatticeSimpleDecoder::TokenList	lattice-simple-decoder.h	/^  struct TokenList {$/;"	s	class:kaldi::LatticeSimpleDecoder
kaldi::LatticeSimpleDecoder::TokenList::TokenList	lattice-simple-decoder.h	/^    TokenList(): toks(NULL), must_prune_forward_links(true),$/;"	f	struct:kaldi::LatticeSimpleDecoder::TokenList
kaldi::LatticeSimpleDecoder::TokenList::must_prune_forward_links	lattice-simple-decoder.h	/^    bool must_prune_forward_links;$/;"	m	struct:kaldi::LatticeSimpleDecoder::TokenList
kaldi::LatticeSimpleDecoder::TokenList::must_prune_tokens	lattice-simple-decoder.h	/^    bool must_prune_tokens;$/;"	m	struct:kaldi::LatticeSimpleDecoder::TokenList
kaldi::LatticeSimpleDecoder::TokenList::toks	lattice-simple-decoder.h	/^    Token *toks;$/;"	m	struct:kaldi::LatticeSimpleDecoder::TokenList
kaldi::LatticeSimpleDecoder::Weight	lattice-simple-decoder.h	/^  typedef Arc::Weight Weight;$/;"	t	class:kaldi::LatticeSimpleDecoder
kaldi::LatticeSimpleDecoder::active_toks_	lattice-simple-decoder.h	/^  std::vector<TokenList> active_toks_; \/\/ Lists of tokens, indexed by$/;"	m	class:kaldi::LatticeSimpleDecoder
kaldi::LatticeSimpleDecoder::config_	lattice-simple-decoder.h	/^  LatticeSimpleDecoderConfig config_;$/;"	m	class:kaldi::LatticeSimpleDecoder
kaldi::LatticeSimpleDecoder::cur_toks_	lattice-simple-decoder.h	/^  unordered_map<StateId, Token*> cur_toks_;$/;"	m	class:kaldi::LatticeSimpleDecoder
kaldi::LatticeSimpleDecoder::final_active_	lattice-simple-decoder.h	/^  bool final_active_; \/\/ use this to say whether we found active final tokens$/;"	m	class:kaldi::LatticeSimpleDecoder
kaldi::LatticeSimpleDecoder::final_costs_	lattice-simple-decoder.h	/^  std::map<Token*, BaseFloat> final_costs_; \/\/ A cache of final-costs$/;"	m	class:kaldi::LatticeSimpleDecoder
kaldi::LatticeSimpleDecoder::fst_	lattice-simple-decoder.h	/^  const fst::Fst<fst::StdArc> &fst_;$/;"	m	class:kaldi::LatticeSimpleDecoder
kaldi::LatticeSimpleDecoder::num_toks_	lattice-simple-decoder.h	/^  int32 num_toks_; \/\/ current total #toks allocated...$/;"	m	class:kaldi::LatticeSimpleDecoder
kaldi::LatticeSimpleDecoder::prev_toks_	lattice-simple-decoder.h	/^  unordered_map<StateId, Token*> prev_toks_;$/;"	m	class:kaldi::LatticeSimpleDecoder
kaldi::LatticeSimpleDecoder::warned_	lattice-simple-decoder.h	/^  bool warned_;$/;"	m	class:kaldi::LatticeSimpleDecoder
kaldi::LatticeSimpleDecoder::~LatticeSimpleDecoder	lattice-simple-decoder.h	/^  ~LatticeSimpleDecoder() { ClearActiveTokens(); }$/;"	f	class:kaldi::LatticeSimpleDecoder
kaldi::LatticeSimpleDecoderConfig	lattice-simple-decoder.h	/^struct LatticeSimpleDecoderConfig {$/;"	s	namespace:kaldi
kaldi::LatticeSimpleDecoderConfig::Check	lattice-simple-decoder.h	/^  void Check() const {$/;"	f	struct:kaldi::LatticeSimpleDecoderConfig
kaldi::LatticeSimpleDecoderConfig::LatticeSimpleDecoderConfig	lattice-simple-decoder.h	/^  LatticeSimpleDecoderConfig(): beam(16.0),$/;"	f	struct:kaldi::LatticeSimpleDecoderConfig
kaldi::LatticeSimpleDecoderConfig::Register	lattice-simple-decoder.h	/^  void Register(ParseOptions *po) {$/;"	f	struct:kaldi::LatticeSimpleDecoderConfig
kaldi::LatticeSimpleDecoderConfig::beam	lattice-simple-decoder.h	/^  BaseFloat beam;$/;"	m	struct:kaldi::LatticeSimpleDecoderConfig
kaldi::LatticeSimpleDecoderConfig::beam_ratio	lattice-simple-decoder.h	/^  BaseFloat beam_ratio;$/;"	m	struct:kaldi::LatticeSimpleDecoderConfig
kaldi::LatticeSimpleDecoderConfig::determinize_lattice	lattice-simple-decoder.h	/^  bool determinize_lattice; \/\/ not inspected by this class... used in$/;"	m	struct:kaldi::LatticeSimpleDecoderConfig
kaldi::LatticeSimpleDecoderConfig::lattice_beam	lattice-simple-decoder.h	/^  BaseFloat lattice_beam;$/;"	m	struct:kaldi::LatticeSimpleDecoderConfig
kaldi::LatticeSimpleDecoderConfig::max_arcs	lattice-simple-decoder.h	/^  int32 max_arcs;$/;"	m	struct:kaldi::LatticeSimpleDecoderConfig
kaldi::LatticeSimpleDecoderConfig::max_loop	lattice-simple-decoder.h	/^  int32 max_loop;$/;"	m	struct:kaldi::LatticeSimpleDecoderConfig
kaldi::LatticeSimpleDecoderConfig::max_mem	lattice-simple-decoder.h	/^  int32 max_mem;$/;"	m	struct:kaldi::LatticeSimpleDecoderConfig
kaldi::LatticeSimpleDecoderConfig::prune_interval	lattice-simple-decoder.h	/^  int32 prune_interval;$/;"	m	struct:kaldi::LatticeSimpleDecoderConfig
kaldi::LatticeSimpleDecoderConfig::prune_lattice	lattice-simple-decoder.h	/^  bool prune_lattice;$/;"	m	struct:kaldi::LatticeSimpleDecoderConfig
kaldi::NBestDecoder	nbest-decoder.h	/^class NBestDecoder {$/;"	c	namespace:kaldi
kaldi::NBestDecoder::Arc	nbest-decoder.h	/^  typedef fst::StdArc Arc;$/;"	t	class:kaldi::NBestDecoder
kaldi::NBestDecoder::ClearToks	nbest-decoder.h	/^  void ClearToks(Elem *list) {$/;"	f	class:kaldi::NBestDecoder
kaldi::NBestDecoder::Decode	nbest-decoder.h	/^  void Decode(DecodableInterface *decodable) {$/;"	f	class:kaldi::NBestDecoder
kaldi::NBestDecoder::Elem	nbest-decoder.h	/^  typedef TokenHash::Elem Elem;$/;"	t	class:kaldi::NBestDecoder
kaldi::NBestDecoder::GetCutoff	nbest-decoder.h	/^  BaseFloat GetCutoff(Elem *list_head, size_t *tok_count,$/;"	f	class:kaldi::NBestDecoder
kaldi::NBestDecoder::GetNBestLattice	nbest-decoder.h	/^  bool GetNBestLattice(fst::MutableFst<CompactLatticeArc> *fst_out,$/;"	f	class:kaldi::NBestDecoder
kaldi::NBestDecoder::Label	nbest-decoder.h	/^  typedef Arc::Label Label;$/;"	t	class:kaldi::NBestDecoder
kaldi::NBestDecoder::NBestDecoder	nbest-decoder.h	/^  NBestDecoder(const fst::Fst<fst::StdArc> &fst,$/;"	f	class:kaldi::NBestDecoder
kaldi::NBestDecoder::PossiblyResizeHash	nbest-decoder.h	/^  void PossiblyResizeHash(size_t num_toks) {$/;"	f	class:kaldi::NBestDecoder
kaldi::NBestDecoder::PropagateEmitting	nbest-decoder.h	/^  BaseFloat PropagateEmitting(int32 frame) {$/;"	f	class:kaldi::NBestDecoder
kaldi::NBestDecoder::PropagateEpsilon	nbest-decoder.h	/^  void PropagateEpsilon(BaseFloat adaptive_beam) {$/;"	f	class:kaldi::NBestDecoder
kaldi::NBestDecoder::ReachedFinal	nbest-decoder.h	/^  bool ReachedFinal() {$/;"	f	class:kaldi::NBestDecoder
kaldi::NBestDecoder::SeqToken	nbest-decoder.h	/^  typedef TokenStore::SeqToken SeqToken;$/;"	t	class:kaldi::NBestDecoder
kaldi::NBestDecoder::SetOptions	nbest-decoder.h	/^  void SetOptions(const NBestDecoderOptions &opts) { opts_ = opts; }$/;"	f	class:kaldi::NBestDecoder
kaldi::NBestDecoder::StateId	nbest-decoder.h	/^  typedef Arc::StateId StateId;$/;"	t	class:kaldi::NBestDecoder
kaldi::NBestDecoder::StateQueue	nbest-decoder.h	/^  typedef std::tr1::unordered_set<StateId> StateQueue;$/;"	t	class:kaldi::NBestDecoder
kaldi::NBestDecoder::Token	nbest-decoder.h	/^  typedef TokenStore::Token Token;$/;"	t	class:kaldi::NBestDecoder
kaldi::NBestDecoder::TokenHash	nbest-decoder.h	/^  typedef HashList<StateId, Token*> TokenHash;$/;"	t	class:kaldi::NBestDecoder
kaldi::NBestDecoder::TokenStore	nbest-decoder.h	/^  class TokenStore {$/;"	c	class:kaldi::NBestDecoder
kaldi::NBestDecoder::TokenStore::Advance	nbest-decoder.h	/^    inline Token* Advance(Token *source, Arc &arc, int32 frame,$/;"	f	class:kaldi::NBestDecoder::TokenStore
kaldi::NBestDecoder::TokenStore::Clear	nbest-decoder.h	/^    void Clear() {$/;"	f	class:kaldi::NBestDecoder::TokenStore
kaldi::NBestDecoder::TokenStore::Combine	nbest-decoder.h	/^    inline Token* Combine(Token *tok1, Token *tok2) { \/\/ Viterbi version$/;"	f	class:kaldi::NBestDecoder::TokenStore
kaldi::NBestDecoder::TokenStore::CombineN	nbest-decoder.h	/^    inline bool CombineN(Elem *head, Token *new_tok) { \/\/ n-best version$/;"	f	class:kaldi::NBestDecoder::TokenStore
kaldi::NBestDecoder::TokenStore::CreateSeq	nbest-decoder.h	/^    inline SeqToken *CreateSeq(Label input, SeqToken *prev) {$/;"	f	class:kaldi::NBestDecoder::TokenStore
kaldi::NBestDecoder::TokenStore::CreateTok	nbest-decoder.h	/^    inline Token *CreateTok(Label output, Token *prev) {$/;"	f	class:kaldi::NBestDecoder::TokenStore
kaldi::NBestDecoder::TokenStore::DeleteSeq	nbest-decoder.h	/^    inline void DeleteSeq(SeqToken *seq) {$/;"	f	class:kaldi::NBestDecoder::TokenStore
kaldi::NBestDecoder::TokenStore::DeleteTok	nbest-decoder.h	/^    inline void DeleteTok(Token *tok) {$/;"	f	class:kaldi::NBestDecoder::TokenStore
kaldi::NBestDecoder::TokenStore::Elem	nbest-decoder.h	/^    typedef TokenHash::Elem Elem;$/;"	t	class:kaldi::NBestDecoder::TokenStore
kaldi::NBestDecoder::TokenStore::Init	nbest-decoder.h	/^    void Init(DecodableInterface *decodable, TokenHash *toks, int32 n_best) {$/;"	f	class:kaldi::NBestDecoder::TokenStore
kaldi::NBestDecoder::TokenStore::NewSeq	nbest-decoder.h	/^    inline SeqToken *NewSeq() {$/;"	f	class:kaldi::NBestDecoder::TokenStore
kaldi::NBestDecoder::TokenStore::SeqToken	nbest-decoder.h	/^    struct SeqToken { \/\/ an incremental\/relative token inside a full Token$/;"	s	class:kaldi::NBestDecoder::TokenStore
kaldi::NBestDecoder::TokenStore::SeqToken::i	nbest-decoder.h	/^      Label i;   \/\/ input label i$/;"	m	struct:kaldi::NBestDecoder::TokenStore::SeqToken
kaldi::NBestDecoder::TokenStore::SeqToken::previous	nbest-decoder.h	/^      SeqToken *previous;  \/\/ lattice backward pointer (also as linked list)$/;"	m	struct:kaldi::NBestDecoder::TokenStore::SeqToken
kaldi::NBestDecoder::TokenStore::SeqToken::refs	nbest-decoder.h	/^      int refs;       \/\/ reference counter (for memory management)$/;"	m	struct:kaldi::NBestDecoder::TokenStore::SeqToken
kaldi::NBestDecoder::TokenStore::Token	nbest-decoder.h	/^    class Token {$/;"	c	class:kaldi::NBestDecoder::TokenStore
kaldi::NBestDecoder::TokenStore::Token::Equal	nbest-decoder.h	/^      inline bool Equal(Token *other) { \/\/ compares output sequences of Tokens$/;"	f	class:kaldi::NBestDecoder::TokenStore::Token
kaldi::NBestDecoder::TokenStore::Token::I	nbest-decoder.h	/^      SeqToken *I; \/\/ sequence I$/;"	m	class:kaldi::NBestDecoder::TokenStore::Token
kaldi::NBestDecoder::TokenStore::Token::c	nbest-decoder.h	/^      Weight c; \/\/ c (total weight)$/;"	m	class:kaldi::NBestDecoder::TokenStore::Token
kaldi::NBestDecoder::TokenStore::Token::ca	nbest-decoder.h	/^      Weight ca; \/\/ acoustic part of c$/;"	m	class:kaldi::NBestDecoder::TokenStore::Token
kaldi::NBestDecoder::TokenStore::Token::hash	nbest-decoder.h	/^      unsigned hash; \/\/ hashing the output symbol sequence$/;"	m	class:kaldi::NBestDecoder::TokenStore::Token
kaldi::NBestDecoder::TokenStore::Token::o	nbest-decoder.h	/^      Label o; \/\/ o$/;"	m	class:kaldi::NBestDecoder::TokenStore::Token
kaldi::NBestDecoder::TokenStore::Token::operator <	nbest-decoder.h	/^      inline bool operator < (const Token &other) {$/;"	f	class:kaldi::NBestDecoder::TokenStore::Token
kaldi::NBestDecoder::TokenStore::Token::previous	nbest-decoder.h	/^      Token *previous; \/\/ t'$/;"	m	class:kaldi::NBestDecoder::TokenStore::Token
kaldi::NBestDecoder::TokenStore::Token::refs	nbest-decoder.h	/^      int32 refs; \/\/ reference counter (for memory management)$/;"	m	class:kaldi::NBestDecoder::TokenStore::Token
kaldi::NBestDecoder::TokenStore::TokenHash	nbest-decoder.h	/^    typedef HashList<StateId, Token*> TokenHash;$/;"	t	class:kaldi::NBestDecoder::TokenStore
kaldi::NBestDecoder::TokenStore::TokenStore	nbest-decoder.h	/^    TokenStore() {$/;"	f	class:kaldi::NBestDecoder::TokenStore
kaldi::NBestDecoder::TokenStore::allocate_block_size_	nbest-decoder.h	/^    static const size_t allocate_block_size_ = 8192;$/;"	m	class:kaldi::NBestDecoder::TokenStore
kaldi::NBestDecoder::TokenStore::allocated_s_	nbest-decoder.h	/^    std::vector<SeqToken*> allocated_s_;  \/\/ list of allocated seq tokens$/;"	m	class:kaldi::NBestDecoder::TokenStore
kaldi::NBestDecoder::TokenStore::allocated_t_	nbest-decoder.h	/^    std::vector<Token*> allocated_t_;  \/\/ list of allocated tokens$/;"	m	class:kaldi::NBestDecoder::TokenStore
kaldi::NBestDecoder::TokenStore::decodable_	nbest-decoder.h	/^    DecodableInterface *decodable_;$/;"	m	class:kaldi::NBestDecoder::TokenStore
kaldi::NBestDecoder::TokenStore::free_st_head_	nbest-decoder.h	/^    SeqToken *free_st_head_;$/;"	m	class:kaldi::NBestDecoder::TokenStore
kaldi::NBestDecoder::TokenStore::free_t_head_	nbest-decoder.h	/^    Token *free_t_head_;$/;"	m	class:kaldi::NBestDecoder::TokenStore
kaldi::NBestDecoder::TokenStore::n_best_	nbest-decoder.h	/^    int32 n_best_;$/;"	m	class:kaldi::NBestDecoder::TokenStore
kaldi::NBestDecoder::TokenStore::toks_	nbest-decoder.h	/^    TokenHash *toks_;$/;"	m	class:kaldi::NBestDecoder::TokenStore
kaldi::NBestDecoder::TokenStore::~TokenStore	nbest-decoder.h	/^    ~TokenStore() {$/;"	f	class:kaldi::NBestDecoder::TokenStore
kaldi::NBestDecoder::Weight	nbest-decoder.h	/^  typedef Arc::Weight Weight;$/;"	t	class:kaldi::NBestDecoder
kaldi::NBestDecoder::decodable_	nbest-decoder.h	/^  DecodableInterface *decodable_;$/;"	m	class:kaldi::NBestDecoder
kaldi::NBestDecoder::fst_	nbest-decoder.h	/^  const fst::Fst<fst::StdArc> &fst_;$/;"	m	class:kaldi::NBestDecoder
kaldi::NBestDecoder::opts_	nbest-decoder.h	/^  NBestDecoderOptions opts_;$/;"	m	class:kaldi::NBestDecoder
kaldi::NBestDecoder::queue_	nbest-decoder.h	/^  StateQueue queue_; \/\/ used in PropagateEpsilon,$/;"	m	class:kaldi::NBestDecoder
kaldi::NBestDecoder::tmp_array_	nbest-decoder.h	/^  std::vector<BaseFloat> tmp_array_;  \/\/ used in GetCutoff.$/;"	m	class:kaldi::NBestDecoder
kaldi::NBestDecoder::token_store_	nbest-decoder.h	/^  TokenStore token_store_;$/;"	m	class:kaldi::NBestDecoder
kaldi::NBestDecoder::toks_	nbest-decoder.h	/^  TokenHash toks_;$/;"	m	class:kaldi::NBestDecoder
kaldi::NBestDecoder::~NBestDecoder	nbest-decoder.h	/^  ~NBestDecoder() {$/;"	f	class:kaldi::NBestDecoder
kaldi::NBestDecoderOptions	nbest-decoder.h	/^struct NBestDecoderOptions {$/;"	s	namespace:kaldi
kaldi::NBestDecoderOptions::NBestDecoderOptions	nbest-decoder.h	/^  NBestDecoderOptions(): beam(16.0),$/;"	f	struct:kaldi::NBestDecoderOptions
kaldi::NBestDecoderOptions::Register	nbest-decoder.h	/^  void Register(ParseOptions *po, bool full) {  \/\/\/ if "full", use obscure$/;"	f	struct:kaldi::NBestDecoderOptions
kaldi::NBestDecoderOptions::beam	nbest-decoder.h	/^  BaseFloat beam;$/;"	m	struct:kaldi::NBestDecoderOptions
kaldi::NBestDecoderOptions::beam_delta	nbest-decoder.h	/^  BaseFloat beam_delta;$/;"	m	struct:kaldi::NBestDecoderOptions
kaldi::NBestDecoderOptions::hash_ratio	nbest-decoder.h	/^  BaseFloat hash_ratio;$/;"	m	struct:kaldi::NBestDecoderOptions
kaldi::NBestDecoderOptions::max_active	nbest-decoder.h	/^  int32 max_active;$/;"	m	struct:kaldi::NBestDecoderOptions
kaldi::NBestDecoderOptions::n_best	nbest-decoder.h	/^  int32 n_best;$/;"	m	struct:kaldi::NBestDecoderOptions
kaldi::SimpleDecoder	simple-decoder.h	/^class SimpleDecoder {$/;"	c	namespace:kaldi
kaldi::SimpleDecoder::Arc	simple-decoder.h	/^  typedef fst::StdArc Arc;$/;"	t	class:kaldi::SimpleDecoder
kaldi::SimpleDecoder::ClearToks	simple-decoder.h	/^  static void ClearToks(unordered_map<StateId, Token*> &toks) {$/;"	f	class:kaldi::SimpleDecoder
kaldi::SimpleDecoder::Decode	simple-decoder.h	/^  bool Decode(DecodableInterface *decodable) {$/;"	f	class:kaldi::SimpleDecoder
kaldi::SimpleDecoder::GetBestPath	simple-decoder.h	/^  bool GetBestPath(fst::MutableFst<fst::StdArc> *fst_out) {$/;"	f	class:kaldi::SimpleDecoder
kaldi::SimpleDecoder::Label	simple-decoder.h	/^  typedef Arc::Label Label;$/;"	t	class:kaldi::SimpleDecoder
kaldi::SimpleDecoder::ProcessEmitting	simple-decoder.h	/^  void ProcessEmitting(DecodableInterface *decodable, int frame) {$/;"	f	class:kaldi::SimpleDecoder
kaldi::SimpleDecoder::ProcessNonemitting	simple-decoder.h	/^  void ProcessNonemitting() {$/;"	f	class:kaldi::SimpleDecoder
kaldi::SimpleDecoder::PruneToks	simple-decoder.h	/^  static void PruneToks(BaseFloat beam, unordered_map<StateId, Token*> *toks) {$/;"	f	class:kaldi::SimpleDecoder
kaldi::SimpleDecoder::ReachedFinal	simple-decoder.h	/^  bool ReachedFinal() {$/;"	f	class:kaldi::SimpleDecoder
kaldi::SimpleDecoder::SimpleDecoder	simple-decoder.h	/^  SimpleDecoder(const fst::Fst<fst::StdArc> &fst, BaseFloat beam): fst_(fst), beam_(beam) { }$/;"	f	class:kaldi::SimpleDecoder
kaldi::SimpleDecoder::StateId	simple-decoder.h	/^  typedef Arc::StateId StateId;$/;"	t	class:kaldi::SimpleDecoder
kaldi::SimpleDecoder::Token	simple-decoder.h	/^  class Token {$/;"	c	class:kaldi::SimpleDecoder
kaldi::SimpleDecoder::Token::Token	simple-decoder.h	/^    Token(const Arc &arc, Token *prev): arc_(arc), prev_(prev), ref_count_(1) {$/;"	f	class:kaldi::SimpleDecoder::Token
kaldi::SimpleDecoder::Token::TokenDelete	simple-decoder.h	/^    static void TokenDelete(Token *tok) {$/;"	f	class:kaldi::SimpleDecoder::Token
kaldi::SimpleDecoder::Token::arc_	simple-decoder.h	/^    Arc arc_;$/;"	m	class:kaldi::SimpleDecoder::Token
kaldi::SimpleDecoder::Token::operator <	simple-decoder.h	/^    bool operator < (const Token &other) {$/;"	f	class:kaldi::SimpleDecoder::Token
kaldi::SimpleDecoder::Token::prev_	simple-decoder.h	/^    Token *prev_;$/;"	m	class:kaldi::SimpleDecoder::Token
kaldi::SimpleDecoder::Token::ref_count_	simple-decoder.h	/^    int32 ref_count_;$/;"	m	class:kaldi::SimpleDecoder::Token
kaldi::SimpleDecoder::Token::weight_	simple-decoder.h	/^    Weight weight_; \/\/ accumulated weight up to this point.$/;"	m	class:kaldi::SimpleDecoder::Token
kaldi::SimpleDecoder::Weight	simple-decoder.h	/^  typedef Arc::Weight Weight;$/;"	t	class:kaldi::SimpleDecoder
kaldi::SimpleDecoder::beam_	simple-decoder.h	/^  BaseFloat beam_;$/;"	m	class:kaldi::SimpleDecoder
kaldi::SimpleDecoder::cur_toks_	simple-decoder.h	/^  unordered_map<StateId, Token*> cur_toks_;$/;"	m	class:kaldi::SimpleDecoder
kaldi::SimpleDecoder::fst_	simple-decoder.h	/^  const fst::Fst<fst::StdArc> &fst_;$/;"	m	class:kaldi::SimpleDecoder
kaldi::SimpleDecoder::prev_toks_	simple-decoder.h	/^  unordered_map<StateId, Token*> prev_toks_;$/;"	m	class:kaldi::SimpleDecoder
kaldi::SimpleDecoder::~SimpleDecoder	simple-decoder.h	/^  ~SimpleDecoder() {$/;"	f	class:kaldi::SimpleDecoder
kaldi::TrainingGraphCompiler	training-graph-compiler.h	/^class TrainingGraphCompiler {$/;"	c	namespace:kaldi
kaldi::TrainingGraphCompiler::CompileGraph	training-graph-compiler.cc	/^bool TrainingGraphCompiler::CompileGraph(const fst::VectorFst<fst::StdArc> &word_fst,$/;"	f	class:kaldi::TrainingGraphCompiler
kaldi::TrainingGraphCompiler::CompileGraphFromText	training-graph-compiler.cc	/^bool TrainingGraphCompiler::CompileGraphFromText($/;"	f	class:kaldi::TrainingGraphCompiler
kaldi::TrainingGraphCompiler::CompileGraphs	training-graph-compiler.cc	/^bool TrainingGraphCompiler::CompileGraphs($/;"	f	class:kaldi::TrainingGraphCompiler
kaldi::TrainingGraphCompiler::CompileGraphsFromText	training-graph-compiler.cc	/^bool TrainingGraphCompiler::CompileGraphsFromText($/;"	f	class:kaldi::TrainingGraphCompiler
kaldi::TrainingGraphCompiler::TrainingGraphCompiler	training-graph-compiler.cc	/^TrainingGraphCompiler::TrainingGraphCompiler(const TransitionModel &trans_model,$/;"	f	class:kaldi::TrainingGraphCompiler
kaldi::TrainingGraphCompiler::ctx_dep_	training-graph-compiler.h	/^  const ContextDependency &ctx_dep_;$/;"	m	class:kaldi::TrainingGraphCompiler
kaldi::TrainingGraphCompiler::disambig_syms_	training-graph-compiler.h	/^  std::vector<int32> disambig_syms_; \/\/ disambig symbols (if any) in the phone$/;"	m	class:kaldi::TrainingGraphCompiler
kaldi::TrainingGraphCompiler::lex_cache_	training-graph-compiler.h	/^  fst::TableComposeCache<fst::Fst<fst::StdArc> > lex_cache_;  \/\/ stores matcher..$/;"	m	class:kaldi::TrainingGraphCompiler
kaldi::TrainingGraphCompiler::lex_fst_	training-graph-compiler.h	/^  fst::VectorFst<fst::StdArc> *lex_fst_; \/\/ lexicon FST (an input; we take$/;"	m	class:kaldi::TrainingGraphCompiler
kaldi::TrainingGraphCompiler::opts_	training-graph-compiler.h	/^  TrainingGraphCompilerOptions opts_;$/;"	m	class:kaldi::TrainingGraphCompiler
kaldi::TrainingGraphCompiler::trans_model_	training-graph-compiler.h	/^  const TransitionModel &trans_model_;$/;"	m	class:kaldi::TrainingGraphCompiler
kaldi::TrainingGraphCompiler::~TrainingGraphCompiler	training-graph-compiler.h	/^  ~TrainingGraphCompiler() { delete lex_fst_; }$/;"	f	class:kaldi::TrainingGraphCompiler
kaldi::TrainingGraphCompilerOptions	training-graph-compiler.h	/^struct TrainingGraphCompilerOptions {$/;"	s	namespace:kaldi
kaldi::TrainingGraphCompilerOptions::Register	training-graph-compiler.h	/^  void Register(ParseOptions *po) {$/;"	f	struct:kaldi::TrainingGraphCompilerOptions
kaldi::TrainingGraphCompilerOptions::TrainingGraphCompilerOptions	training-graph-compiler.h	/^  explicit TrainingGraphCompilerOptions(BaseFloat transition_scale = 1.0,$/;"	f	struct:kaldi::TrainingGraphCompilerOptions
kaldi::TrainingGraphCompilerOptions::reorder	training-graph-compiler.h	/^  bool reorder;  \/\/ (Dan-style graphs)$/;"	m	struct:kaldi::TrainingGraphCompilerOptions
kaldi::TrainingGraphCompilerOptions::rm_eps	training-graph-compiler.h	/^  bool rm_eps;$/;"	m	struct:kaldi::TrainingGraphCompilerOptions
kaldi::TrainingGraphCompilerOptions::self_loop_scale	training-graph-compiler.h	/^  BaseFloat self_loop_scale;$/;"	m	struct:kaldi::TrainingGraphCompilerOptions
kaldi::TrainingGraphCompilerOptions::transition_scale	training-graph-compiler.h	/^  BaseFloat transition_scale;$/;"	m	struct:kaldi::TrainingGraphCompilerOptions
lattice_beam	lattice-faster-decoder.h	/^  BaseFloat lattice_beam;$/;"	m	struct:kaldi::LatticeFasterDecoderConfig
lattice_beam	lattice-simple-decoder.h	/^  BaseFloat lattice_beam;$/;"	m	struct:kaldi::LatticeSimpleDecoderConfig
lex_cache_	training-graph-compiler.h	/^  fst::TableComposeCache<fst::Fst<fst::StdArc> > lex_cache_;  \/\/ stores matcher..$/;"	m	class:kaldi::TrainingGraphCompiler
lex_fst_	training-graph-compiler.h	/^  fst::VectorFst<fst::StdArc> *lex_fst_; \/\/ lexicon FST (an input; we take$/;"	m	class:kaldi::TrainingGraphCompiler
likes_	decodable-matrix.h	/^  const Matrix<BaseFloat> &likes_;$/;"	m	class:kaldi::DecodableMatrixScaled
likes_	decodable-matrix.h	/^  const Matrix<BaseFloat> &likes_;$/;"	m	class:kaldi::DecodableMatrixScaledMapped
links	lattice-biglm-faster-decoder.h	/^    ForwardLink *links; \/\/ Head of singly linked list of ForwardLinks$/;"	m	struct:kaldi::LatticeBiglmFasterDecoder::Token
links	lattice-faster-decoder.h	/^    ForwardLink *links; \/\/ Head of singly linked list of ForwardLinks$/;"	m	struct:kaldi::LatticeFasterDecoder::Token
links	lattice-simple-decoder.h	/^    ForwardLink *links; \/\/ Head of singly linked list of ForwardLinks$/;"	m	struct:kaldi::LatticeSimpleDecoder::Token
lm_diff_fst_	biglm-faster-decoder.h	/^  const fst::DeterministicOnDemandFst<fst::StdArc> &lm_diff_fst_;$/;"	m	class:kaldi::BiglmFasterDecoder
lm_diff_fst_	lattice-biglm-faster-decoder.h	/^  const fst::DeterministicOnDemandFst<fst::StdArc> &lm_diff_fst_;  $/;"	m	class:kaldi::LatticeBiglmFasterDecoder
log_like	decodable-am-diag-gmm.h	/^    BaseFloat log_like;  \/\/\/< Cache value$/;"	m	struct:kaldi::DecodableAmDiagGmmUnmapped::LikelihoodCacheRecord
log_like	decodable-am-sgmm.h	/^    BaseFloat log_like;  \/\/\/< Cache value$/;"	m	struct:kaldi::DecodableAmSgmm::LikelihoodCacheRecord
log_like_cache_	decodable-am-diag-gmm.h	/^  std::vector<LikelihoodCacheRecord> log_like_cache_;$/;"	m	class:kaldi::DecodableAmDiagGmmUnmapped
log_like_cache_	decodable-am-sgmm.h	/^  std::vector<LikelihoodCacheRecord> log_like_cache_;$/;"	m	class:kaldi::DecodableAmSgmm
log_prune_	decodable-am-sgmm.h	/^  BaseFloat log_prune_;$/;"	m	class:kaldi::DecodableAmSgmm
log_prune_	decodable-am-sgmm2.h	/^  BaseFloat log_prune_;$/;"	m	class:kaldi::DecodableAmSgmm2
logdets_	decodable-am-diag-gmm.h	/^  Vector<BaseFloat> logdets_;$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
max_active	faster-decoder.h	/^  int32 max_active;$/;"	m	struct:kaldi::FasterDecoderOptions
max_active	lattice-faster-decoder.h	/^  int32 max_active;$/;"	m	struct:kaldi::LatticeFasterDecoderConfig
max_active	nbest-decoder.h	/^  int32 max_active;$/;"	m	struct:kaldi::NBestDecoderOptions
max_arcs	lattice-faster-decoder.h	/^  int32 max_arcs; \/\/ max #arcs in lattice.$/;"	m	struct:kaldi::LatticeFasterDecoderConfig
max_arcs	lattice-simple-decoder.h	/^  int32 max_arcs;$/;"	m	struct:kaldi::LatticeSimpleDecoderConfig
max_loop	lattice-faster-decoder.h	/^  int32 max_loop; \/\/ can be used to debug non-determinizable input, but for now,$/;"	m	struct:kaldi::LatticeFasterDecoderConfig
max_loop	lattice-simple-decoder.h	/^  int32 max_loop;$/;"	m	struct:kaldi::LatticeSimpleDecoderConfig
max_mem	lattice-faster-decoder.h	/^  int32 max_mem; \/\/ max memory usage in determinization$/;"	m	struct:kaldi::LatticeFasterDecoderConfig
max_mem	lattice-simple-decoder.h	/^  int32 max_mem;$/;"	m	struct:kaldi::LatticeSimpleDecoderConfig
mllr_xform_	decodable-am-diag-gmm.h	/^  const RegtreeMllrDiagGmm &mllr_xform_;$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeMllr
must_prune_forward_links	lattice-biglm-faster-decoder.h	/^    bool must_prune_forward_links;$/;"	m	struct:kaldi::LatticeBiglmFasterDecoder::TokenList
must_prune_forward_links	lattice-faster-decoder.h	/^    bool must_prune_forward_links;$/;"	m	struct:kaldi::LatticeFasterDecoder::TokenList
must_prune_forward_links	lattice-simple-decoder.h	/^    bool must_prune_forward_links;$/;"	m	struct:kaldi::LatticeSimpleDecoder::TokenList
must_prune_tokens	lattice-biglm-faster-decoder.h	/^    bool must_prune_tokens;$/;"	m	struct:kaldi::LatticeBiglmFasterDecoder::TokenList
must_prune_tokens	lattice-faster-decoder.h	/^    bool must_prune_tokens;$/;"	m	struct:kaldi::LatticeFasterDecoder::TokenList
must_prune_tokens	lattice-simple-decoder.h	/^    bool must_prune_tokens;$/;"	m	struct:kaldi::LatticeSimpleDecoder::TokenList
n_best	nbest-decoder.h	/^  int32 n_best;$/;"	m	struct:kaldi::NBestDecoderOptions
n_best_	nbest-decoder.h	/^    int32 n_best_;$/;"	m	class:kaldi::NBestDecoder::TokenStore
next	lattice-biglm-faster-decoder.h	/^    ForwardLink *next; \/\/ next in singly-linked list of forward links from a$/;"	m	struct:kaldi::LatticeBiglmFasterDecoder::ForwardLink
next	lattice-biglm-faster-decoder.h	/^    Token *next; \/\/ Next in list of tokens for this frame.$/;"	m	struct:kaldi::LatticeBiglmFasterDecoder::Token
next	lattice-faster-decoder.h	/^    ForwardLink *next; \/\/ next in singly-linked list of forward links from a$/;"	m	struct:kaldi::LatticeFasterDecoder::ForwardLink
next	lattice-faster-decoder.h	/^    Token *next; \/\/ Next in list of tokens for this frame.$/;"	m	struct:kaldi::LatticeFasterDecoder::Token
next	lattice-simple-decoder.h	/^    ForwardLink *next; \/\/ next in singly-linked list of forward links from a$/;"	m	struct:kaldi::LatticeSimpleDecoder::ForwardLink
next	lattice-simple-decoder.h	/^    Token *next; \/\/ Next in list of tokens for this frame.$/;"	m	struct:kaldi::LatticeSimpleDecoder::Token
next_tok	lattice-biglm-faster-decoder.h	/^    Token *next_tok; \/\/ the next token [or NULL if represents final-state]$/;"	m	struct:kaldi::LatticeBiglmFasterDecoder::ForwardLink
next_tok	lattice-faster-decoder.h	/^    Token *next_tok; \/\/ the next token [or NULL if represents final-state]$/;"	m	struct:kaldi::LatticeFasterDecoder::ForwardLink
next_tok	lattice-simple-decoder.h	/^    Token *next_tok; \/\/ the next token [or NULL if represents final-state]$/;"	m	struct:kaldi::LatticeSimpleDecoder::ForwardLink
num_toks_	lattice-biglm-faster-decoder.h	/^  int32 num_toks_; \/\/ current total #toks allocated...$/;"	m	class:kaldi::LatticeBiglmFasterDecoder
num_toks_	lattice-faster-decoder.h	/^  int32 num_toks_; \/\/ current total #toks allocated...$/;"	m	class:kaldi::LatticeFasterDecoder
num_toks_	lattice-simple-decoder.h	/^  int32 num_toks_; \/\/ current total #toks allocated...$/;"	m	class:kaldi::LatticeSimpleDecoder
o	nbest-decoder.h	/^      Label o; \/\/ o$/;"	m	class:kaldi::NBestDecoder::TokenStore::Token
olabel	lattice-biglm-faster-decoder.h	/^    Label olabel; \/\/ olabel on link.$/;"	m	struct:kaldi::LatticeBiglmFasterDecoder::ForwardLink
olabel	lattice-faster-decoder.h	/^    Label olabel; \/\/ olabel on link.$/;"	m	struct:kaldi::LatticeFasterDecoder::ForwardLink
olabel	lattice-simple-decoder.h	/^    Label olabel; \/\/ olabel on link.$/;"	m	struct:kaldi::LatticeSimpleDecoder::ForwardLink
operator <	biglm-faster-decoder.h	/^    inline bool operator < (const Token &other) {$/;"	f	class:kaldi::BiglmFasterDecoder::Token
operator <	faster-decoder.h	/^    inline bool operator < (const Token &other) {$/;"	f	class:kaldi::FasterDecoder::Token
operator <	nbest-decoder.h	/^      inline bool operator < (const Token &other) {$/;"	f	class:kaldi::NBestDecoder::TokenStore::Token
operator <	simple-decoder.h	/^    bool operator < (const Token &other) {$/;"	f	class:kaldi::SimpleDecoder::Token
opts_	biglm-faster-decoder.h	/^  BiglmFasterDecoderOptions opts_;$/;"	m	class:kaldi::BiglmFasterDecoder
opts_	faster-decoder.h	/^  FasterDecoderOptions opts_;$/;"	m	class:kaldi::FasterDecoder
opts_	nbest-decoder.h	/^  NBestDecoderOptions opts_;$/;"	m	class:kaldi::NBestDecoder
opts_	training-graph-compiler.h	/^  TrainingGraphCompilerOptions opts_;$/;"	m	class:kaldi::TrainingGraphCompiler
per_frame_vars_	decodable-am-sgmm.h	/^  SgmmPerFrameDerivedVars per_frame_vars_;$/;"	m	class:kaldi::DecodableAmSgmm
per_frame_vars_	decodable-am-sgmm2.h	/^  Sgmm2PerFrameDerivedVars per_frame_vars_;$/;"	m	class:kaldi::DecodableAmSgmm2
prev_	biglm-faster-decoder.h	/^    Token *prev_;$/;"	m	class:kaldi::BiglmFasterDecoder::Token
prev_	faster-decoder.h	/^    Token *prev_;$/;"	m	class:kaldi::FasterDecoder::Token
prev_	simple-decoder.h	/^    Token *prev_;$/;"	m	class:kaldi::SimpleDecoder::Token
prev_toks_	lattice-simple-decoder.h	/^  unordered_map<StateId, Token*> prev_toks_;$/;"	m	class:kaldi::LatticeSimpleDecoder
prev_toks_	simple-decoder.h	/^  unordered_map<StateId, Token*> prev_toks_;$/;"	m	class:kaldi::SimpleDecoder
previous	nbest-decoder.h	/^      SeqToken *previous;  \/\/ lattice backward pointer (also as linked list)$/;"	m	struct:kaldi::NBestDecoder::TokenStore::SeqToken
previous	nbest-decoder.h	/^      Token *previous; \/\/ t'$/;"	m	class:kaldi::NBestDecoder::TokenStore::Token
previous_frame_	decodable-am-diag-gmm.h	/^  int32 previous_frame_;$/;"	m	class:kaldi::DecodableAmDiagGmmUnmapped
previous_frame_	decodable-am-sgmm.h	/^  int32 previous_frame_;$/;"	m	class:kaldi::DecodableAmSgmm
prune_interval	lattice-faster-decoder.h	/^  int32 prune_interval;$/;"	m	struct:kaldi::LatticeFasterDecoderConfig
prune_interval	lattice-simple-decoder.h	/^  int32 prune_interval;$/;"	m	struct:kaldi::LatticeSimpleDecoderConfig
prune_lattice	lattice-simple-decoder.h	/^  bool prune_lattice;$/;"	m	struct:kaldi::LatticeSimpleDecoderConfig
queue_	biglm-faster-decoder.h	/^  std::vector<PairId> queue_;  \/\/ temp variable used in ProcessNonemitting,$/;"	m	class:kaldi::BiglmFasterDecoder
queue_	faster-decoder.h	/^  std::vector<StateId> queue_;  \/\/ temp variable used in ProcessNonemitting,$/;"	m	class:kaldi::FasterDecoder
queue_	lattice-biglm-faster-decoder.h	/^  std::vector<PairId> queue_;  \/\/ temp variable used in ProcessNonemitting,$/;"	m	class:kaldi::LatticeBiglmFasterDecoder
queue_	lattice-faster-decoder.h	/^  std::vector<StateId> queue_;  \/\/ temp variable used in ProcessNonemitting,$/;"	m	class:kaldi::LatticeFasterDecoder
queue_	nbest-decoder.h	/^  StateQueue queue_; \/\/ used in PropagateEpsilon,$/;"	m	class:kaldi::NBestDecoder
ref_count_	biglm-faster-decoder.h	/^    int32 ref_count_;$/;"	m	class:kaldi::BiglmFasterDecoder::Token
ref_count_	faster-decoder.h	/^    int32 ref_count_;$/;"	m	class:kaldi::FasterDecoder::Token
ref_count_	simple-decoder.h	/^    int32 ref_count_;$/;"	m	class:kaldi::SimpleDecoder::Token
refs	nbest-decoder.h	/^      int refs;       \/\/ reference counter (for memory management)$/;"	m	struct:kaldi::NBestDecoder::TokenStore::SeqToken
refs	nbest-decoder.h	/^      int32 refs; \/\/ reference counter (for memory management)$/;"	m	class:kaldi::NBestDecoder::TokenStore::Token
regtree_	decodable-am-diag-gmm.h	/^  const RegressionTree &regtree_;$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
regtree_	decodable-am-diag-gmm.h	/^  const RegressionTree &regtree_;$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeMllr
reorder	training-graph-compiler.h	/^  bool reorder;  \/\/ (Dan-style graphs)$/;"	m	struct:kaldi::TrainingGraphCompilerOptions
rm_eps	training-graph-compiler.h	/^  bool rm_eps;$/;"	m	struct:kaldi::TrainingGraphCompilerOptions
scale_	decodable-am-diag-gmm.h	/^  BaseFloat scale_;$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
scale_	decodable-am-diag-gmm.h	/^  BaseFloat scale_;$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeMllr
scale_	decodable-am-diag-gmm.h	/^  BaseFloat scale_;$/;"	m	class:kaldi::DecodableAmDiagGmmScaled
scale_	decodable-am-sgmm.h	/^  BaseFloat scale_;$/;"	m	class:kaldi::DecodableAmSgmmScaled
scale_	decodable-am-sgmm2.h	/^  BaseFloat scale_;$/;"	m	class:kaldi::DecodableAmSgmm2Scaled
scale_	decodable-matrix.h	/^  BaseFloat scale_;$/;"	m	class:kaldi::DecodableMatrixScaled
scale_	decodable-matrix.h	/^  BaseFloat scale_;$/;"	m	class:kaldi::DecodableMatrixScaledMapped
self_loop_scale	training-graph-compiler.h	/^  BaseFloat self_loop_scale;$/;"	m	struct:kaldi::TrainingGraphCompilerOptions
sgmm_	decodable-am-sgmm2.h	/^  const AmSgmm2 &sgmm_;$/;"	m	class:kaldi::DecodableAmSgmm2
sgmm_cache_	decodable-am-sgmm2.h	/^  Sgmm2LikelihoodCache sgmm_cache_;$/;"	m	class:kaldi::DecodableAmSgmm2
sgmm_config_	decodable-am-sgmm.h	/^  const SgmmGselectConfig &sgmm_config_;$/;"	m	class:kaldi::DecodableAmSgmm
spk_	decodable-am-sgmm.h	/^  const SgmmPerSpkDerivedVars &spk_;$/;"	m	class:kaldi::DecodableAmSgmm
spk_	decodable-am-sgmm2.h	/^  Sgmm2PerSpkDerivedVars *spk_;$/;"	m	class:kaldi::DecodableAmSgmm2
tmp_array_	biglm-faster-decoder.h	/^  std::vector<BaseFloat> tmp_array_;  \/\/ used in GetCutoff.$/;"	m	class:kaldi::BiglmFasterDecoder
tmp_array_	faster-decoder.h	/^  std::vector<BaseFloat> tmp_array_;  \/\/ used in GetCutoff.$/;"	m	class:kaldi::FasterDecoder
tmp_array_	lattice-biglm-faster-decoder.h	/^  std::vector<BaseFloat> tmp_array_;  \/\/ used in GetCutoff.$/;"	m	class:kaldi::LatticeBiglmFasterDecoder
tmp_array_	lattice-faster-decoder.h	/^  std::vector<BaseFloat> tmp_array_;  \/\/ used in GetCutoff.$/;"	m	class:kaldi::LatticeFasterDecoder
tmp_array_	nbest-decoder.h	/^  std::vector<BaseFloat> tmp_array_;  \/\/ used in GetCutoff.$/;"	m	class:kaldi::NBestDecoder
token_store_	nbest-decoder.h	/^  TokenStore token_store_;$/;"	m	class:kaldi::NBestDecoder
toks	lattice-biglm-faster-decoder.h	/^    Token *toks;$/;"	m	struct:kaldi::LatticeBiglmFasterDecoder::TokenList
toks	lattice-faster-decoder.h	/^    Token *toks;$/;"	m	struct:kaldi::LatticeFasterDecoder::TokenList
toks	lattice-simple-decoder.h	/^    Token *toks;$/;"	m	struct:kaldi::LatticeSimpleDecoder::TokenList
toks_	biglm-faster-decoder.h	/^  HashList<PairId, Token*> toks_;$/;"	m	class:kaldi::BiglmFasterDecoder
toks_	faster-decoder.h	/^  HashList<StateId, Token*> toks_;$/;"	m	class:kaldi::FasterDecoder
toks_	lattice-biglm-faster-decoder.h	/^  HashList<PairId, Token*> toks_;$/;"	m	class:kaldi::LatticeBiglmFasterDecoder
toks_	lattice-faster-decoder.h	/^  HashList<StateId, Token*> toks_;$/;"	m	class:kaldi::LatticeFasterDecoder
toks_	nbest-decoder.h	/^    TokenHash *toks_;$/;"	m	class:kaldi::NBestDecoder::TokenStore
toks_	nbest-decoder.h	/^  TokenHash toks_;$/;"	m	class:kaldi::NBestDecoder
tot_cost	lattice-biglm-faster-decoder.h	/^    BaseFloat tot_cost; \/\/ would equal weight.Value()... cost up to this point.$/;"	m	struct:kaldi::LatticeBiglmFasterDecoder::Token
tot_cost	lattice-faster-decoder.h	/^    BaseFloat tot_cost; \/\/ would equal weight.Value()... cost up to this point.$/;"	m	struct:kaldi::LatticeFasterDecoder::Token
tot_cost	lattice-simple-decoder.h	/^    BaseFloat tot_cost; \/\/ would equal weight.Value()... cost up to this point.$/;"	m	struct:kaldi::LatticeSimpleDecoder::Token
trans_model_	decodable-am-diag-gmm.h	/^  const TransitionModel &trans_model_;  \/\/ for tid to pdf mapping$/;"	m	class:kaldi::DecodableAmDiagGmm
trans_model_	decodable-am-diag-gmm.h	/^  const TransitionModel &trans_model_;  \/\/ for transition-id to pdf mapping$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
trans_model_	decodable-am-diag-gmm.h	/^  const TransitionModel &trans_model_;  \/\/ for transition-id to pdf mapping$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeMllr
trans_model_	decodable-am-diag-gmm.h	/^  const TransitionModel &trans_model_;  \/\/ for transition-id to pdf mapping$/;"	m	class:kaldi::DecodableAmDiagGmmScaled
trans_model_	decodable-am-sgmm.h	/^  const TransitionModel &trans_model_;  \/\/\/< for tid to pdf mapping$/;"	m	class:kaldi::DecodableAmSgmm
trans_model_	decodable-am-sgmm2.h	/^  const TransitionModel &trans_model_;  \/\/\/< for tid to pdf mapping$/;"	m	class:kaldi::DecodableAmSgmm2
trans_model_	decodable-matrix.h	/^  const TransitionModel &trans_model_;  \/\/ for tid to pdf mapping$/;"	m	class:kaldi::DecodableMatrixScaledMapped
trans_model_	training-graph-compiler.h	/^  const TransitionModel &trans_model_;$/;"	m	class:kaldi::TrainingGraphCompiler
transition_scale	training-graph-compiler.h	/^  BaseFloat transition_scale;$/;"	m	struct:kaldi::TrainingGraphCompilerOptions
valid_logdets_	decodable-am-diag-gmm.h	/^  bool valid_logdets_;$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
warned_	lattice-biglm-faster-decoder.h	/^  bool warned_;$/;"	m	class:kaldi::LatticeBiglmFasterDecoder
warned_	lattice-faster-decoder.h	/^  bool warned_;$/;"	m	class:kaldi::LatticeFasterDecoder
warned_	lattice-simple-decoder.h	/^  bool warned_;$/;"	m	class:kaldi::LatticeSimpleDecoder
warned_noarc_	biglm-faster-decoder.h	/^  bool warned_noarc_;$/;"	m	class:kaldi::BiglmFasterDecoder
warned_noarc_	lattice-biglm-faster-decoder.h	/^  bool warned_noarc_;  $/;"	m	class:kaldi::LatticeBiglmFasterDecoder
weight_	biglm-faster-decoder.h	/^    Weight weight_; \/\/ weight up to current point.$/;"	m	class:kaldi::BiglmFasterDecoder::Token
weight_	faster-decoder.h	/^    Weight weight_; \/\/ weight up to current point.$/;"	m	class:kaldi::FasterDecoder::Token
weight_	simple-decoder.h	/^    Weight weight_; \/\/ accumulated weight up to this point.$/;"	m	class:kaldi::SimpleDecoder::Token
xformed_data_	decodable-am-diag-gmm.h	/^  std::vector< Vector<BaseFloat> > xformed_data_;$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
xformed_data_squared_	decodable-am-diag-gmm.h	/^  std::vector< Vector<BaseFloat> > xformed_data_squared_;$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
xformed_gconsts_	decodable-am-diag-gmm.h	/^  std::vector< Vector<BaseFloat>* > xformed_gconsts_;$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeMllr
xformed_mean_invvars_	decodable-am-diag-gmm.h	/^  std::vector< Matrix<BaseFloat>* > xformed_mean_invvars_;$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeMllr
~BiglmFasterDecoder	biglm-faster-decoder.h	/^  ~BiglmFasterDecoder() {$/;"	f	class:kaldi::BiglmFasterDecoder
~DecodableAmDiagGmmRegtreeMllr	decodable-am-diag-gmm.cc	/^DecodableAmDiagGmmRegtreeMllr::~DecodableAmDiagGmmRegtreeMllr() {$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeMllr
~FasterDecoder	faster-decoder.h	/^  ~FasterDecoder() { ClearToks(toks_.Clear()); }$/;"	f	class:kaldi::FasterDecoder
~LatticeBiglmFasterDecoder	lattice-biglm-faster-decoder.h	/^  ~LatticeBiglmFasterDecoder() {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
~LatticeFasterDecoder	lattice-faster-decoder.h	/^  ~LatticeFasterDecoder() { ClearActiveTokens(); }$/;"	f	class:kaldi::LatticeFasterDecoder
~LatticeSimpleDecoder	lattice-simple-decoder.h	/^  ~LatticeSimpleDecoder() { ClearActiveTokens(); }$/;"	f	class:kaldi::LatticeSimpleDecoder
~NBestDecoder	nbest-decoder.h	/^  ~NBestDecoder() {$/;"	f	class:kaldi::NBestDecoder
~SimpleDecoder	simple-decoder.h	/^  ~SimpleDecoder() {$/;"	f	class:kaldi::SimpleDecoder
~Token	biglm-faster-decoder.h	/^    inline ~Token() {$/;"	f	class:kaldi::BiglmFasterDecoder::Token
~TokenStore	nbest-decoder.h	/^    ~TokenStore() {$/;"	f	class:kaldi::NBestDecoder::TokenStore
~TrainingGraphCompiler	training-graph-compiler.h	/^  ~TrainingGraphCompiler() { delete lex_fst_; }$/;"	f	class:kaldi::TrainingGraphCompiler
